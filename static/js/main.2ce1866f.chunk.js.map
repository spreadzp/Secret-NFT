{"version":3,"sources":["metamask.js","cypher.js","SetDecrypt.js","MintNFT.js","UploadIPFS.js","DownloadIPFS.js","BuyersBoard.js","BetForm.js","MarketPlace.js","OwnerAssets.js","Contacts.js","App.js","index.js"],"names":["EthCrypto","require","getPublicKeyViaMetamask","_x","_getPublicKeyViaMetamask","apply","this","arguments","_callee","address","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","reject","window","ethereum","sendAsync","jsonrpc","method","params","error","encryptionpublickey","result","stop","metamaskEncryptData","_x2","_x3","_metamaskEncryptData","_callee2","message","pubKey","encrypted","encryptedMessage","_context2","console","log","encryptWithPublicKey","sent","cipher","stringify","metamaskEncrypt","_x4","_x5","_metamaskEncrypt","_callee3","enc","_context3","encrypt","data","web3","utils","toHex","JSON","handle","promise","then","undefined","catch","decryptPrivateKey","_x6","_x7","_decryptPrivateKey","_callee4","account","_yield$handle","_yield$handle2","decryptedMessage","decryptErr","_context4","request","Object","slicedToArray","concat","decryptUriFile","_x8","_x9","_decryptUriFile","_callee5","privateKey","parsedEncInfo","_context5","length","parse","decryptWithPrivateKey","t0","getAccount","_getAccount","selectedAddress","encryptData","_encryptData","publicKey","pk","SetDecrypt","props","drizzle","drizzleState","encData","encPrivateKey","typeData","_useState","showDialod","useState","_useState2","setEncryptedInfo","_useState3","_useState4","decryptedPK","setDecryptedPK","_useState5","_useState6","decryptedInfo","setDecryptedInfo","_useState7","_useState8","decPk","setDecPk","_useState9","_useState10","setDecInfoShow","_useForm","useForm","register","handleSubmit","watch","errors","useEffect","_ref","asyncToGenerator","mark","dm","accounts","getDecryptMessage","_ref2","type","react_default","createElement","className","htmlFor","Fragment","includes","name","rows","cols","value","src","onClick","MintNFT","hashMint","setHashMint","countTokens","setCountTokens","ipfsLink","encryptedKey","contract","contracts","EncNft","_countOfTokens","numResult","methods","totalSupply","call","from","countOfTokens","onSubmit","stringUri","resMint","setUri","mint","send","gasPrice","Math","pow","gasLimit","transactionHash","description","uri","objectSpread2","image","placeholder","ref","required","maxLength","client","create","options","label","UploadIPFS","fileUrl","updateFileUrl","clearData","setClearData","encryptedData","setEncryptedData","encryptedPrivateKey","setEncryptedPrivateKey","_useState11","_useState12","setCustomerAddress","_useState13","_useState14","setCid","_useState15","_useState16","_useState17","_useState18","newPrivateKey","setNewPrivateKey","_useState19","_useState20","newPublicKey","setNewPublicKey","_useState21","_useState22","newAddress","setNewAddress","_useState23","_useState24","creatorAddress","setCreatorAddress","_useState25","_useState26","_useState27","_useState28","selectedOption","setSelectedOption","_useState29","_useState30","choisedFile","_useState31","_useState32","textArea","setTextArea","encryptPrivateKeyForNFTFile","setValue","dataToEncrypt","addressToEncrypt","_ref4","added","url","add","path","sendEncryptInfoToIPFS","generateKeys","newIdentity","createIdentity","Form","Group","controlId","Select","aria-label","onChange","e","target","map","o","key","event","open","id","file","files","fileReader","FileReader","readAsText","onload","fileAsText","onerror","hidden","fileToEncrypt","src_SetDecrypt","href","src_MintNFT","DownloadIPFS","encryptedInfo","Coupoken","decMessage","setDecryptMessage","fileToDecrypt","BuyersBoard","setTotalAmountNft","nftBuyersDetails","setNftBuyersDetails","nftOwnersDetails","contractMarket","MarketPlace","showBoard","setShowBoard","buyerIndex","setBuyerIndex","getBuyers","tokensArray","index","push","idNft","owner","_ref3","token","countBuyers","_loop","_index","getCountBuyers","buyersMakeBet","buyersBoard","toConsumableArray","idToken","buyerAddress","buyerPubKey","buyerBet","goalPurchase","delegateYield","t1","sellNft","buyer","ownerOfTokenInfo","lastEncryptedPrivateKey","decryptedPrivateKey","getTokenInfoLastOwner","acceptRateAndTransferToken","BuyersOfToken","Table","striped","bordered","hover","filter","item","ind","formatEther","approved","getSellerActions","Accordion","defaultActiveKey","Item","eventKey","Header","totalSum","totalBuyersOfToken","CountBuyers","Body","BetForm","showForm","isShowForm","setFocus","bnValue","BigNumber","parseUnits","valueBet","makeBet","disabled","tokenId","step","totalAmountNft","setNftOwnersDetails","setPubKey","chosenTokenId","setChosenTokenId","showBetForm","setShowBetForm","showSellers","setShowSellers","fillOwnersTokens","transferNFT","moveTokenForSell","approveNFT","approve","ownersArray","isTokenForSell","_ref5","ownerAddress","approvedAddress","tokenInfo","tokenInfoJson","ownerOf","getApproved","tokenURI","src_BetForm","src_BuyersBoard","OwnerAssets","sellerSoldAmounts","setSellerSoldAmounts","setEncData","showDecryptModule","setShowDecryptModule","setTypeData","choosedToken","setChoosedToken","typeFileNames","cutParams","start","end","getIdsByAddress","all","soldBalance","currentOwnerInfo","uriInfo","parsedUri","getOwnerInfo","balance","currentOwner","getTypeDataFromDescription","split","cidPath","cid","cuttedString","object","get","timeout","TextDecoder","decode","Data","slice","getInfoFromIPFS","withdrawSum","resultWithdraw","sellerWithdrawSum","decryptInfo","i","add1","add2","flag","Contacts","App","loading","drizzleReadinessState","setDrizzleReadinessState","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","align","rel","react_router_dom","to","react_router","exact","src_MarketPlace","src_OwnerAssets","src_UploadIPFS","src_DownloadIPFS","src_Contacts","Web3","currentProvider","contractName","web3Contract","eth","Contract","abi","block","customProvider","polls","Drizzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2ce1866f.chunk.js","sourcesContent":["import { encrypt } from 'eth-sig-util'\nimport web3 from 'web3'\nvar EthCrypto = require('eth-crypto');\nexport async function getPublicKeyViaMetamask(address) {\n    return new Promise((resolve, reject) => {\n        window.ethereum.sendAsync(\n            {\n                jsonrpc: '2.0',\n                method: 'eth_getEncryptionPublicKey',\n                params: [address],\n                // from: address,\n            },\n            function (error, encryptionpublickey) {\n                if (!error) {\n                    resolve(encryptionpublickey.result)\n                } else {\n                    reject(error)\n                }\n            }\n        )\n    })\n}\n\nexport async function metamaskEncryptData(message, pubKey) {\n    console.log(message)\n    const encrypted = await EthCrypto.encryptWithPublicKey(\n        pubKey, // publicKey\n        message // message\n    );\n    console.log(\"🚀 ~ file: metamask.js ~ line 30 ~ metamaskEncrypt ~ encrypted\", encrypted)\n\n    const encryptedMessage = EthCrypto.cipher.stringify(\n        encrypted\n    )\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\nexport async function metamaskEncrypt(message, pubKey) {\n    console.log(\"🚀 ~ file: metamask.js ~ line 41 ~ metamaskEncrypt ~ pubKey\", pubKey)\n    console.log(message)\n\n    const enc = encrypt(\n        pubKey,\n        { data: message },\n        'x25519-xsalsa20-poly1305'\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 31 ~ metamaskEncrypt ~ enc\", enc)\n    const encryptedMessage = web3.utils.toHex(\n        JSON.stringify(\n            enc\n        )\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 54 ~ metamaskEncrypt ~ encryptedMessage\", encryptedMessage)\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\n\nvar handle = (promise) => {\n    return promise\n        .then(data => ([data, undefined]))\n        .catch(error => Promise.resolve([undefined, error]));\n}\n\nexport async function decryptPrivateKey(encryptedMessage, account) {\n    //console.log(`encryptedMessage: ${encryptedMessage}`)\n    const [decryptedMessage, decryptErr] = await handle(window.ethereum.request({\n        method: 'eth_decrypt',\n        params: [encryptedMessage, account],\n    }));\n\n    if (decryptErr) { console.error(decryptErr.message) }\n    else {\n        console.log(`decryptedMessage: ${decryptedMessage}`)\n        return decryptedMessage\n    }\n}\n\nexport async function decryptUriFile(encryptedMessage, privateKey) {\n    console.log(\"🚀 ~ file: metamask.js ~ line 83 ~ decryptUriFile ~ encryptedMessage\", encryptedMessage)\n    try{\n        console.log(`encryptedMessage.length: ${encryptedMessage.length}`)\n        const parsedEncInfo = EthCrypto.cipher.parse(encryptedMessage)\n        const message = await EthCrypto.decryptWithPrivateKey(\n            privateKey, parsedEncInfo)\n        console.log(\"🚀 ~ file: metamask.js ~ line 85 ~ decryptMessage ~ message\", message)\n        return message;\n    } catch(err) {\n        console.log('err :>> ', err);\n    }\n    \n}\n","import EthCrypto from 'eth-crypto';\nimport { metamaskEncrypt, getPublicKeyViaMetamask } from './metamask';\n\nexport async function getAccount() {\n    return await window.ethereum.selectedAddress\n}\n\nexport function getNewAccount() {\n    return EthCrypto.createIdentity();\n}\n\n\nexport async function encryptData(publicKey, data) {\n    const pk = await getPublicKeyViaMetamask(publicKey)\n    console.log(\"🚀 ~ file: cypher.js ~ line 19 ~ encrypt ~ pk\", pk)\n    return await metamaskEncrypt(data, pk)\n}\n\nexport async function decrypt(cMessage) {\n    const cyperObj = EthCrypto.cipher.parse(cMessage);\n    return await EthCrypto.decryptWithPrivateKey(\n        'bdb335a3c6dceda42eb92e6479f326d68d86bdf5237c41ff1eedf961813d2eb4', // privateKey\n        cyperObj // encrypted-data\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst SetDecrypt = props => {\n\n    const { drizzle, drizzleState, encData, encPrivateKey, typeData, showDialod } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decPk, setDecPk] = useState(false);\n    const [decInfoShow, setDecInfoShow] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decPk) {\n            async function getDecryptMessage() {\n                if (encPrivateKey !== '') {\n                    const dm = await decryptPrivateKey(encPrivateKey, drizzleState.accounts[0]);\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                    setDecInfoShow(true)\n                }\n            }\n            getDecryptMessage()\n\n        }\n    }, [decPk, encPrivateKey]);\n\n    useEffect(() => {\n        if (decryptedPK && encData) {\n            async function getDecryptMessage() {\n                const dm = await decryptUriFile(encData, decryptedPK);\n                setDecryptedInfo(dm)\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decryptedPK, encData]);\n\n    // const onFileChange = (event) => {\n    //     let file = event.target.files[0];\n\n    //     let fileReader = new FileReader();\n    //     fileReader.readAsText(file);\n\n    //     fileReader.onload = (event) => {\n    //         let fileAsText = event.target.result;\n    //         setEncryptedInfo(fileAsText);\n    //     };\n    // };\n\n    const showDecryptByTypeData = (type) => {\n        return (\n            <>\n                {[0, '0'].includes(type) && <div name=\"decrypredData\"\n                    className=\"u-full-width\"><textarea rows={20} cols={80} value={decryptedInfo}   />!!!!!</div>}\n                {[1, '1'].includes(type) && <div><img name=\"decrypredData\"\n                    className=\"u-full-width\" src={decryptedInfo} />\n                </div>}\n                {\n                    [2, '2'].includes(type) && <div name=\"decrypredData\"\n                    className=\"u-full-width\"><textarea rows={40} cols={80} value={decryptedInfo}   /></div>\n                }\n            </>\n        )\n    }\n\n    return (\n        <section>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Decrypted Data</label>\n                    {showDecryptByTypeData(typeData)}\n\n                </div>\n            </div>\n            <button className=\"btn-upload\" onClick={() => setDecPk(!decPk)} >Decrypt Data</button>\n            {/* <button className=\"btn-upload\" onClick={() => showDialod(false)} >close</button> */}\n        </section>\n    );\n};\nexport default SetDecrypt;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst MintNFT = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const [countTokens, setCountTokens] = useState(0);\n    const { drizzle, drizzleState, ipfsLink, encryptedKey, typeData } = props;\n    const contract = drizzle.contracts.EncNft;\n\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .totalSupply()\n                .call({ from: drizzleState.accounts[0] });\n            console.log('result !== countTokens :>> ', result, countTokens);\n            if (+result !== countTokens) {\n                const numResult = +result\n                console.log(\"🚀 ~ file: MintNFT.js ~ line 28 ~ countOfTokens ~ numResult\", numResult)\n                setCountTokens(numResult)\n                console.log('countTokens :>> ', countTokens);\n            }\n\n\n        }\n        countOfTokens()\n    }, [])\n    const onSubmit = async (data) => {\n\n        const stringUri = setUri(data);\n\n        console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.mint(drizzleState.accounts[0], countTokens + 1, stringUri, encryptedKey).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10,\n            gasLimit: 4000000\n        })\n        if (resMint) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 21 ~ onSubmit ~ resMint\", resMint)\n            setHashMint(resMint.transactionHash)\n\n        }\n    };\n    const approveNft = async () => {\n        // countTokens ???\n        const res = await contract.methods.approve(drizzle.contracts.MarketPlace.address, countTokens).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        if (res) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 45 ~ approveNft ~ res\", res)\n            getTxStatus()\n        }\n    }\n    const setUri = data => {\n\n        console.log('typeData :>> ', typeData);\n        if (typeData == 0) {\n            data.description += ' #text'\n        }\n        if (typeData == 1) {\n            data.description += ' #image'\n        }\n\n        if (typeData == 2) {\n            data.description += ' #file'\n        }\n        console.log(\"🚀 ~ file: MintNFT.js ~ line 56 ~ data\", data)\n        const uri = { ...data, image: ipfsLink }\n        return JSON.stringify(uri)\n    };\n\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    return (\n        <section>\n            <div>Mint new NFT to owner address</div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Name</label>\n                        <input\n                            name=\"name\"\n                            className=\"u-full-width\"\n                            placeholder=\"Name of your NFT\"\n                            ref={register({ required: true, maxLength: 42 })}\n                        />\n                        {errors.name && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Description of the NFT</label>\n                        <input\n                            name=\"description\"\n                            className=\"u-full-width\"\n                            placeholder=\"description data\"\n                            ref={register({ required: false, maxLength: 8000 })}\n                        />\n                        {errors.description && <span>Use a valid input</span>}\n                    </div>\n                </div>\n\n                <input className=\"btn-upload\" type=\"submit\" value=\"Mint\" />\n            </form>\n            <div>\n                Hash mint transaction:  {hashMint}\n            </div>\n            {/* <TransferNFT drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    ipfsLink={ipfsLink} /> */}\n            {/* <button onClick={() => approveNft()}>Approve to MarketPlace contract</button> */}\n        </section>\n    );\n};\n\nexport default MintNFT;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { encrypt, encryptData, getAccount, getNewAccount } from \"./cypher\";\nimport SetDecrypt from \"./SetDecrypt\";\nimport { create } from 'ipfs-http-client'\nimport { metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\nimport MintNFT from \"./MintNFT\";\nimport imageToBase64 from 'image-to-base64/browser';\n\nimport { Dropdown, FloatingLabel, Form, FormControl, InputGroup, SplitButton, Button } from \"react-bootstrap\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\nconst options = [\n    { value: 0, label: 'text' },\n    { value: 1, label: 'image' },\n    { value: 2, label: 'file' }\n]\n\nconst UploadIPFS = props => {\n    const [fileUrl, updateFileUrl] = useState(``)\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [encryptedData, setEncryptedData] = useState('');\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [customerAddress, setCustomerAddress] = useState('');\n    const { drizzle, drizzleState } = props;\n    const [cid, setCid] = useState('')\n    const [textFromIpfsFIle, setTextFromIpfsFIle] = useState('')\n    const [newPrivateKey, setNewPrivateKey] = useState('')\n    const [newPublicKey, setNewPublicKey] = useState('')\n    const [newAddress, setNewAddress] = useState('')\n    const [creatorAddress, setCreatorAddress] = useState('')\n    const [typeDataToEncrypt, setTypeDataToEncrypt] = useState(0)\n    const [selectedOption, setSelectedOption] = useState(0);\n    const [choisedFile, setChoisedFile] = useState('')\n\n    const [textArea, setTextArea] = useState('')\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    async function onChange(e) {\n        const file = e.target.files[0]\n        try {\n            const added = await client.add(file)\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            updateFileUrl(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n\n    const onSubmit = data => {\n        console.log(\"🚀 ~ file: UploadIPFS.js ~ line 48 ~ data\", data)\n        setValue(data);\n    };\n\n    const encryptPrivateKeyForNFTFile = async () => {\n\n        const encData = await encryptData(creatorAddress, newPrivateKey)\n        if (encData !== '') {\n            setEncryptedPrivateKey(encData)\n        }\n\n    };\n\n    const setValue = async value => {\n        console.log('clearData :>> ', clearData);\n        setClearData(value.dataToEncrypt);\n        setCustomerAddress(value.addressToEncrypt)\n\n        const encData = await metamaskEncryptData(value.dataToEncrypt || clearData || textArea, newPublicKey)\n        if (encData !== '') {\n            setEncryptedData(encData)\n        }\n    };\n\n    const downloadToFile = (content, filename, contentType) => {\n        const a = document.createElement('a');\n        const file = new Blob([content], { type: contentType });\n\n        a.href = URL.createObjectURL(file);\n        a.download = filename;\n        a.click();\n\n        URL.revokeObjectURL(a.href);\n    };\n\n    useEffect(async () => {\n        const address = await getAccount()\n        if (address) {\n            setCreatorAddress(address)\n        }\n\n    }, [getAccount, setCreatorAddress])\n\n    useEffect(() => {\n        if (encryptedData && creatorAddress) {\n            async function sendEncryptInfoToIPFS() {\n                // downloadToFile(encryptedData, `${customerAddress}.txt`, 'text/plain');\n                const added = await client.add(encryptedData)\n                setCid(added.path)\n                const url = `https://ipfs.infura.io/ipfs/${added.path}`\n                updateFileUrl(url)\n            }\n\n            sendEncryptInfoToIPFS();\n        }\n\n\n    }, [encryptedData, creatorAddress])\n\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n        //setChoisedFile(file.name)\n        console.log('selectedOption :>> ', selectedOption);\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setClearData(fileAsText);\n        };\n        fileReader.onerror = (error) => console.error('Error: ', error);\n\n    };\n\n    const getPath = () => {\n        var inputName = document.getElementById('file1');\n        var imgPath;\n\n        imgPath = inputName.value;\n        alert(imgPath);\n        return imgPath;\n    }\n\n    const getInfoFromIPFS = async () => {\n        if (fileUrl) {\n            const result = await client.object.get(cid, { timeout: 30000 })\n            const string = new TextDecoder().decode(result.Data).slice(0, -3);\n            const cuttedString = string.slice(5)\n            setTextFromIpfsFIle(cuttedString)\n        }\n    }\n\n    const generateKeys = () => {\n        const newIdentity = getNewAccount()\n        setNewPrivateKey(newIdentity.privateKey)\n        setNewPublicKey(newIdentity.publicKey)\n        setNewAddress(newIdentity.address)\n    }\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    const handleChange = (value, selectOptionSetter) => {\n        selectOptionSetter(value)\n        // handle other stuff like persisting to store etc\n    }\n    const handleTextAreaChange = (event) => {\n        if (event && event.target.value) {\n            setTextArea(event.target.value)\n            setClearData(event.target.event);\n        }\n    }\n    function imageToBase64(img)\n    {\n        var canvas, ctx, dataURL, base64;\n        canvas = document.createElement(\"canvas\");\n        ctx = canvas.getContext(\"2d\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        dataURL = canvas.toDataURL(\"image/png\");\n        base64 = dataURL.replace(/^data:image\\/png;base64,/, \"\");\n        return base64;\n    }\n    return (\n        <div className=\"App\">\n            <h1>Mint encoded NFT</h1>\n            <section>\n                <h2>Step 1: create private key for the NFT</h2>\n\n                <button className=\"btn-upload\" onClick={() => generateKeys()}>Generate keys for encryption a data</button>\n                <div>pk: {newPrivateKey}</div>\n                <div>pubkey: {newPublicKey}</div>\n                <div>add: {newAddress}</div>\n                <div>Creator address{creatorAddress}</div>\n                {newPrivateKey && <h2>Step 2: Encrypt private key via the creator public key</h2>}\n                {newPrivateKey && <button className=\"btn-upload\" onClick={() => encryptPrivateKeyForNFTFile()}>Encrypt private key</button>}\n                <div>Encrypted private key</div>\n                <div>{encryptedPrivateKey}</div>\n                <br></br>\n\n                {encryptedPrivateKey && <h2>Step 3: Encrypt data via generated public key for NFT URI and upload it to IPFS </h2>}\n                {encryptedPrivateKey &&\n\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <label>Choice type data</label>\n                        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlSelect\">\n                            <Form.Select aria-label=\"Floating label select example\" value={selectedOption}\n                                onChange={e => handleChange(e.target.value, setSelectedOption)}>\n                                {options.map(o => (\n                                    <option key={o.value} value={o.value}>{o.label}</option>\n                                ))}\n                            </Form.Select>\n                        </Form.Group>\n                        {selectedOption === '1' ? <><Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                            <label>Paste base64 string of the image</label>\n\n                            <textarea rows={8} value={textArea} onChange={handleTextAreaChange} />\n                            <div>Your image must be less than 1Mb for the service below</div>\n                        </Form.Group>\n                            {\n                                selectedOption === '1' && <input type=\"button\" className=\"btn-upload\" onClick={() => window.open(\"https://www.base64-image.de/\", \"_blank\")} value=\"toBase64\" />\n                            }\n                        </> :\n                            <>{\n                                selectedOption === '0' && <div className=\"row\">\n                                    <div className=\"u-full-width\">\n                                        <label htmlFor=\"mURI\">Data for encryption</label>\n                                        <input\n                                            name=\"dataToEncrypt\"\n                                            className=\"u-full-width\"\n                                            placeholder=\"string data\"\n                                            ref={register({ required: false, maxLength: 80000 })}\n                                        />\n                                        {errors.dataToEncrypt && <span>Use a valid input</span>}\n                                    </div>\n                                </div>\n                            }\n                                {\n                                    selectedOption === '2' && <div className=\"row\">\n                                        <div className=\"u-full-width\">\n                                            <input type=\"file\" id=\"upload\"\n                                                name=\"fileToEncrypt\"\n                                                className=\"u-full-width\"\n                                                onChange={onFileChange}\n                                                hidden />\n                                            <label className=\"label-upload\" htmlFor=\"upload\">Choose file</label>                                           \n                                            {errors.fileToEncrypt && <span>Use a valid input</span>}\n                                            {choisedFile}\n                                        </div>\n                                    </div>}\n                            </>\n                        }\n                        {clearData !== '' && <input className=\"btn-upload\" type=\"submit\" value=\"Push encoded data to IPFS\" />}\n                    </form>\n                }\n                {fileUrl && <h2>Step 4: Encrypt data via generated public key for NFT URI </h2>}\n                {fileUrl && <SetDecrypt\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    encData={encryptedData}\n                    encPrivateKey={encryptedPrivateKey}\n                    typeData={selectedOption}\n                />}\n            </section>\n            <a href={fileUrl} target=\"_blank\">{fileUrl}</a>\n            {fileUrl && <h2>Step 5: Encrypt data via generated public key for NFT URI </h2>}\n            {fileUrl && <MintNFT\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                ipfsLink={fileUrl}\n                encryptedKey={encryptedPrivateKey}\n                typeData={selectedOption}\n            />\n            }\n        </div>\n    );\n};\n\nexport default UploadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {  decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst DownloadIPFS = props => {\n\n    const { drizzle, drizzleState, encData } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decMessage) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptPrivateKey(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage]);\n\n    useEffect(() => {\n        if (decryptedInfo) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptUriFile(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedInfo(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage, decryptedInfo]);\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setEncryptedInfo(fileAsText);\n        };\n    };\n\n\n\n    return (\n        <section>\n            <h2>Download a file from IPFS</h2>\n            <div>{encryptedInfo}</div>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    <div\n                        name=\"decrypredData\"\n                        className=\"u-full-width\"\n\n                    >{decryptedInfo}</div>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"u-full-width\">\n                    <label htmlFor=\"mURI\">Read the file and decrypt</label>\n                    <input\n                        type=\"file\"\n                        name=\"fileToDecrypt\"\n                        className=\"u-full-width\"\n                        onChange={onFileChange}\n                    />\n                    {errors.fileToDecrypt && <span>Use a valid input</span>}\n                </div>\n            </div>\n            <button onClick={() => setDecryptMessage(!decMessage)} >DECRYPT</button>\n\n<h2>Decrypted PK</h2>\n<div>{decryptedPK}</div>\n<h2>Decrypted file info</h2>\n<div>{decryptedInfo}</div>\n        </section>\n    );\n};\n\nexport default DownloadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Accordion } from 'react-bootstrap';\nimport { decryptPrivateKey, getPublicKeyViaMetamask, metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\n\nimport { BigNumber, ethers, utils } from 'ethers'\n\nconst BuyersBoard = props => {\n    const [dataKey, setDataKey] = useState(null);\n    const [totalAmountNft, setTotalAmountNft] = useState(0);\n    const [nftBuyersDetails, setNftBuyersDetails] = useState([]);\n    const [publicKey, setPubKey] = useState('');\n    const [chosenTokenId, setChosenTokenId] = useState(0);\n    const { drizzle, drizzleState, nftOwnersDetails } = props;\n    const contract = drizzle.contracts.EncNft;\n    const contractMarket = drizzle.contracts.MarketPlace;\n\n    const [showBoard, setShowBoard] = useState(false);\n    const [buyerIndex, setBuyerIndex] = useState(-1);\n    useEffect(() => {\n        getBuyers();\n    }, []);\n\n\n    const makeBet = async (owner) => {\n        setChosenTokenId(owner.idNft)\n        const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n        if (pk) {\n            setPubKey(pk)\n        }\n    }\n    const getBuyers = async () => {\n        let result = await contract.methods\n            .totalSupply()\n            .call({ from: drizzleState.accounts[0] });\n        if (result > 0) {\n            setTotalAmountNft(result)\n            const tokensArray = []\n            for (let index = 1; index <= result; index++) {\n                tokensArray.push({ idNft: index, owner: '', name: '', description: '', image: '' })\n            }\n            tokensArray.map(async token => {\n                try {\n                    const countBuyers = await contractMarket.methods.getCountBuyers(token.idNft).call({ from: drizzleState.accounts[0] })\n\n                    if (countBuyers > 0) {\n                        for (let index = 0; index < countBuyers; index++) {\n                            const buyersMakeBet = await contractMarket.methods.buyersBoard(token.idNft, index).call({ from: drizzleState.accounts[0] });\n                            if (buyersMakeBet) {\n                                setNftBuyersDetails(nftBuyersDetails => [...nftBuyersDetails, {\n                                    idToken: token.idNft, buyerAddress: buyersMakeBet[0], buyerPubKey: buyersMakeBet[1],\n                                    buyerBet: buyersMakeBet[2], goalPurchase: buyersMakeBet[3]\n                                }])\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 72 ~ getBuyers ~ error\", error)\n                }\n            })\n        }\n    };\n\n    const sellNft = async (buyer, token) => {\n        if (token.owner === drizzleState.accounts[0]) {\n            // enc-decrypt pryvateKey - enc via buyerPubKey\n            const ownerOfTokenInfo = await contract.methods.getTokenInfoLastOwner(token.idNft).call({ from: drizzleState.accounts[0] });\n\n            const lastEncryptedPrivateKey = ownerOfTokenInfo.encData\n\n            const decryptedPrivateKey = await decryptPrivateKey(lastEncryptedPrivateKey, drizzleState.accounts[0])\n\n            if (decryptedPrivateKey) {\n                const encData = await metamaskEncrypt(decryptedPrivateKey, buyer.buyerPubKey)\n                if (encData !== '') {\n                    const sellInfo = await contractMarket.methods.acceptRateAndTransferToken(token.idNft, buyer.buyerAddress, encData).send({ from: drizzleState.accounts[0], gasPrice: 10 * 10 ** 10, gasLimit: 600000 })\n\n                }\n            }\n\n\n        }\n    }\n\n    const getSellerActions = (buyer, token) => {\n        return (\n            token.owner === drizzleState.accounts[0] && token.approved ?\n                token.owner === drizzleState.accounts[0] && !token.approved ?\n                    'Need to approve to sell' :\n                    <button className=\"btn-sell\" onClick={() => sellNft(buyer, token)}>Sell NFT</button > :\n\n                ''\n        )\n    }\n    const CountBuyers = (token) => {\n        let totalSum = 0;\n        const totalBuyersOfToken = nftBuyersDetails.filter(item => item.idToken === token.idNft)\n\n        totalBuyersOfToken.map(buyer => totalSum += +utils.formatEther(buyer.buyerBet))\n        return (\n            <div className=\"info\">{totalBuyersOfToken.length} buyers,  Total sum bets: {totalSum} ETH </div>\n\n        )\n    }\n    const BuyersOfToken = (token) => {\n        // own address make color red\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th> Buyer address </th>\n                        <th> Buyer rate </th>\n                        <th> Why do I need it </th>\n                        <th> Action </th>\n                    </tr>\n                </thead>\n                <tbody>{\n                    nftBuyersDetails.filter(item => item.idToken === token.idNft).map((buyer, ind) => {\n                        return (buyer.buyerBet > 0 && <tr key={ind}>\n                            <td className={buyer.buyerAddress === drizzleState.accounts[0] ? 'owner-address' : null}> {buyer.buyerAddress} </td>\n                            <td>{utils.formatEther(buyer.buyerBet)}ETH</td>\n                            <td> {buyer.goalPurchase} </td>\n                            <td>{getSellerActions(buyer, token)} </td>\n                        </tr>)\n                    })\n                }</tbody>\n            </Table>)\n    }\n\n\n\n    return (\n        // if it exists, then we display its value\n        <>\n            <button className=\"btn-bet\" onClick={() => setShowBoard(!showBoard)}>{showBoard ? 'Hide Buyers Boards' : 'Show Buyers Boards'}</button>\n            {showBoard && <Accordion defaultActiveKey=\"0\" > {\n                nftOwnersDetails.map((token, index) =>\n                    <Accordion.Item eventKey={index} key={index} >\n                        <Accordion.Header className=\"ah\" onClick={() => setBuyerIndex(index)}> ID: {token.idNft} name: {token.name} {CountBuyers(token)}</Accordion.Header>\n                        <Accordion.Body className={buyerIndex === index ? \"active\" : \"inactive\"} >\n                            <div > {token.description} </div> {BuyersOfToken(token)}\n                        </Accordion.Body> </Accordion.Item >\n                )\n            }\n\n            </Accordion>}\n        </>\n    );\n};\n\nexport default BuyersBoard;","import React, { useState, useEffect } from \"react\";\nimport { useForm, useFormContext } from \"react-hook-form\";\nimport { BigNumber, ethers, utils } from 'ethers' \n\nconst BetForm = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const { drizzle, drizzleState, pk, address, idToken, showForm, isShowForm  } = props;\n    const contract = drizzle.contracts.MarketPlace;\n\n\n    const {register, handleSubmit, watch, errors, setFocus } = useForm();\n    const onSubmit = async (data) => {\n        // const stringUri = setUri(data);\n        const bnValue  = BigNumber.from(utils.parseUnits(data.valueBet, 18))\n        // console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.makeBet(idToken, pk, drizzleState.accounts[0], data.goalPurchase).send({ from: drizzleState.accounts[0], \n            value: bnValue, gasPrice: 10 * 10 ** 10,\n            gasLimit: 400000})\n            showForm(false)\n        if (resMint) {\n            setHashMint(resMint.transactionHash)\n        }\n    };\n\n  \n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    return (\n    <>\n {isShowForm && <section>\n            <div>Bet params</div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Id token</label>\n                        <input\n                            name=\"tokenId\"\n                            className=\"u-full-width\"\n                            value={idToken}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.tokenId && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"pk\">Public key of your account</label>\n                        <input\n                            name=\"pk\"\n                            className=\"u-full-width\"\n                            value={pk}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.pk && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"address\">Your account address</label>\n                        <input\n                            name=\"address\"\n                            className=\"u-full-width\"\n                            value={address}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.address && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"valueBet\">Your bet in ETH</label>\n                        <input\n                            name=\"valueBet\"                            \n                            className=\"u-full-width\"\n                            type=\"number\"\n                            step=\"0.000000000000001\" \n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.valueBet && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"goalPurchase\">Why do I need it? </label>\n                        <input\n                            name=\"goalPurchase\"\n                            className=\"u-full-width\"\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.goalPurchase && <span>Use a valid input</span>}\n                    </div>\n                </div>\n\n                <input className=\"button-primary\" type=\"submit\" value=\"Make Bet\" />\n            </form>\n            <div>\n                Hash mint transaction:  {hashMint}\n            </div>             \n        </section>}\n    </>\n      \n    );\n};\n\nexport default BetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Table } from 'react-bootstrap'; \nimport BuyersBoard from \"./BuyersBoard\";\nimport BetForm from \"./BetForm\";\nimport { getPublicKeyViaMetamask } from \"./metamask\"; \n\nconst MarketPlace = props => {\n  const [totalAmountNft, setTotalAmountNft] = useState(0);\n  const [nftOwnersDetails, setNftOwnersDetails] = useState([]);\n  const { drizzle, drizzleState } = props;\n  const contract = drizzle.contracts.EncNft;\n  const contractMarket = drizzle.contracts.MarketPlace;\n\n  const [publicKey, setPubKey] = useState('');\n  const [chosenTokenId, setChosenTokenId] = useState(0);\n  const [showBetForm, setShowBetForm] = useState(false);\n  const [showSellers, setShowSellers] = useState(false);\n  useEffect(() => {\n    if(drizzleState.accounts[0]) {\n      fillOwnersTokens();\n    }\n    \n  },[drizzleState.accounts[0]]);\n\n  const makeBet = async (owner) => {\n    setChosenTokenId(owner.idNft)\n    const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n    if (pk) {\n      setPubKey(pk)\n      setShowBetForm(true)\n    }\n  }\n\n  const transferNFT = async (owner) => {\n    // need to add seller description in UI\n    let result = await contractMarket.methods.moveTokenForSell(owner.idNft, `Advertise of token ${owner.idNft}`).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 30 ~ transferNFT ~ result\", result)\n  }\n\n  const approveNFT = async (owner) => {\n    let result = await contract.methods.approve(contractMarket.address, owner.idNft).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 51 ~ result ~ result\", result)\n  }\n\n  const fillOwnersTokens = async () => {\n    let result = await contract.methods\n      .totalSupply()\n      .call({ from: drizzleState.accounts[0] });\n    if (result > 0) {\n      setTotalAmountNft(result)\n      const ownersArray = []\n      for (let index = 1; index <= result; index++) {\n        ownersArray.push({ idNft: index, owner: '', approved: false, isTokenForSell: false, name: '', description: '', image: '' })\n      }\n      ownersArray.map(async owner => {\n        const ownerAddress = await contract.methods.ownerOf(owner.idNft).call({ from: drizzleState.accounts[0] });\n        if (ownerAddress) {\n          owner.owner = ownerAddress\n          const approvedAddress = await contract.methods.getApproved(owner.idNft).call({ from: drizzleState.accounts[0] });\n          const tokenInfo = await contract.methods.tokenURI(owner.idNft).call({ from: drizzleState.accounts[0] });\n         \n          if(approvedAddress) {\n            owner.approved = approvedAddress === contractMarket.address\n          }\n          if(tokenInfo) {\n            const tokenInfoJson = JSON.parse(tokenInfo)\n            owner = {...owner, ...tokenInfoJson};\n          }\n          setNftOwnersDetails(nftOwnersDetails => [...nftOwnersDetails, owner])\n        }\n      })\n    }\n\n  };\n\n  const getTxStatus = () => {\n    const { transactions, transactionStack } = drizzleState;\n    // const txHash = transactionStack[stackId];\n    // if (!txHash) return null; \n    // return `Transaction status: ${transactions[txHash] &&\n    //   transactions[txHash].status}`;\n  };\n\n  return (\n    // if it exists, then we display its value\n    <section>\n      <h2>MarketPlace</h2>\n      <button className=\"btn-sell\" onClick={() => setShowSellers(!showSellers)}>{showSellers ? 'Hide NFT Board' : 'Show NFT Board'}</button>\n      {showSellers && <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID NFT</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>URI</th>\n            <th>Owner address</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {nftOwnersDetails.length == totalAmountNft ? nftOwnersDetails.map((owner, ind) =>\n            <tr key={ind}>\n              <td>{owner.idNft}</td>\n              <td>{owner.name}</td>\n              <td>{owner.description}</td>\n              <td><a href={owner.image} target=\"_blank\">URL</a></td>\n              <td className={drizzleState.accounts[0] === owner.owner? 'owner-address' : null}> {owner.owner}</td>\n              <td>{drizzleState.accounts[0] === owner.owner ?\n              owner.approved ? \n                <button className=\"btn-for-sell\" onClick={() => transferNFT(owner)}>Move NFT for sell place</button> :\n                <button className=\"btn-approve\" onClick={() => approveNFT(owner)}>Approve NFT for sell</button> :\n                <button className=\"btn-bet\" onClick={() => makeBet(owner)}> Make BET</button>}</td>\n            </tr>\n          ) : <></>}\n        </tbody>\n      </Table>}\n\n      {<section>\n        {showBetForm && <BetForm\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          idToken={chosenTokenId}\n          pk={publicKey}\n          address={drizzleState.accounts[0]}\n          showForm={() => setShowBetForm}\n          isShowForm= {showBetForm}\n        />}\n      </section>}\n      <BuyersBoard\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        nftOwnersDetails={nftOwnersDetails}\n      />\n    </section>\n  );\n};\n\nexport default MarketPlace;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Table } from 'react-bootstrap';\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\nimport { create } from 'ipfs-http-client'\nimport SetDecrypt from \"./SetDecrypt\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\nconst OwnerAssets = props => {\n\n    const { drizzle, drizzleState} = props;\n    const [sellerSoldAmounts, setSellerSoldAmounts] = useState([]);\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [encData, setEncData] = useState('');\n    const [showDecryptModule, setShowDecryptModule] = useState(false);\n\n    const [typeData, setTypeData] = useState(0)\n    const [choosedToken, setChoosedToken] = useState(null)\n    const contract = drizzle.contracts.EncNft;\n\n    const contractMarket = drizzle.contracts.MarketPlace;\n    const typeFileNames = ['#text', '#image', '#file']\n    const cutParams = [{start: 5, end: -3}, {start: 5, end: -3}, {start: 5, end: -3}]\n    \n\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .getIdsByAddress(drizzleState.accounts[0])\n                .call({ from: drizzleState.accounts[0] });\n            console.log('result   ', result);\n            if (result && result.length) {\n\n                Promise.all(\n                    result.map(async (id) => {\n                        const soldBalance = await contractMarket.methods\n                            .getOwnerInfo(id, drizzleState.accounts[0])\n                            .call({ from: drizzleState.accounts[0] });\n\n                        const currentOwnerInfo = await contract.methods.getTokenInfoLastOwner(id).call({ from: drizzleState.accounts[0] });\n                        console.log(id, \"🚀 ~ file: OwnerAssets.js ~ line 42 ~ result.map ~  currentOwnerInfo\", currentOwnerInfo.encData, currentOwnerInfo.owner)\n\n                        const uriInfo = await contract.methods.tokenURI(id).call({ from: drizzleState.accounts[0] });\n\n                        const parsedUri = JSON.parse(uriInfo)\n                        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 48 ~ result.map ~ parsedUri\", parsedUri)\n                        setSellerSoldAmounts(sellerSoldAmounts => [...sellerSoldAmounts, { idToken: id, balance: soldBalance, currentOwner: currentOwnerInfo.owner, encPrivateKey: currentOwnerInfo.encData, ...parsedUri }])\n                    })\n                )\n            }\n            console.log('sellerSoldAmounts :>> ', sellerSoldAmounts);\n        }\n        countOfTokens()\n    }, [])\n\n    useEffect(() =>{\n        if(choosedToken) {\n            getTypeDataFromDescription(choosedToken.description)\n\n            const path = choosedToken.image.split('/')\n            const cidPath = path[path.length - 1]\n            console.log(\"🚀 ~ file: OwnerAssets.js ~ line 60 ~ useEffect ~ cidPath\", cidPath)\n            const getInfoFromIPFS = async (cid) => {\n                const result = await client.object.get(cid, { timeout: 60000 })\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 66 ~ getInfoFromIPFS ~ result\", result)\n                console.log('typeData :>> ', typeData);\n                console.log('cutParams[typeData].start, cutParams[typeData].end :>> ', cutParams[typeData].start, cutParams[typeData].end);\n                const cuttedString = new TextDecoder().decode(result.Data).slice(cutParams[typeData].start, cutParams[typeData].end);\n                //const cuttedString = string.slice(5)\n                //console.log(\"🚀 ~ file: OwnerAssets.js ~ line 66 ~ getInfoFromIPFS ~ cuttedString\", cuttedString)\n                setEncData(cuttedString)\n\n            }\n            getInfoFromIPFS(cidPath)\n        }\n        \n\n    }, [choosedToken])\n    \n\n    const withdrawSum = async (idToken) => {\n\n        const resultWithdraw = await contractMarket.methods.sellerWithdrawSum(idToken).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 57 ~ result ~ result\", resultWithdraw)\n    };\n\n    const getTypeDataFromDescription = (description) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 78 ~ getTypeDataFromDescription ~ description\", description)\n        typeFileNames.map((name, ind) => {\n\n            if (description.includes(name)) {\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 80 ~ typeFileNames.map ~ ind\", ind)\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 81 ~ typeFileNames.map ~ name\", name)\n\n                setTypeData(ind)\n            }\n        })\n    }\n\n    const decryptInfo = async (token) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 85 ~ decryptInfo ~ token\", token)\n        if (!choosedToken || choosedToken !== token || showDecryptModule) {\n            setChoosedToken(token)\n            getTypeDataFromDescription(token.description)\n            setShowDecryptModule(true)\n        }\n    }\n    useEffect(() => {\n \n        if (choosedToken && choosedToken.encPrivateKey !== encryptedPrivateKey)  {\n            setEncryptedPrivateKey(choosedToken.encPrivateKey)\n            getTypeDataFromDescription(choosedToken.description)\n\n            setShowDecryptModule(true)\n        } \n\n\n    }, [decryptInfo, choosedToken, showDecryptModule])\n\n\n    const compareAddresses = (add1, add2) => {\n        return add1 === add2\n    }\n\n    const callbackFromDecrypt = (flag) => {\n        setShowDecryptModule(flag)\n    }\n\n    // const showDecryptByTypeData = (type) => {\n    //     return (\n    //         <>\n    //             {type === 0 && <div name=\"decrypredData\"\n    //                 className=\"u-full-width\">{decryptedInfo}</div>}\n    //             {type === 1 && <img name=\"decrypredData\"\n    //                 className=\"u-full-width\" src={decryptedInfo} />}\n    //         </>\n    //     )\n    // }\n\n    return (\n        <section>\n            <h2>Your assets</h2>\n\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>ID NFT</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>Sum for withdraw</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        sellerSoldAmounts.map((token, i) =>\n                        (<tr key={i}>\n                            <td>{token.idToken}</td>\n                            <td>{token.name}</td>\n                            <td>{token.description}</td>\n                            <td>{token.balance}</td>\n                            <td>{token.balance > 0 ?\n                                <button className=\"btn-withdraw\" onClick={() => withdrawSum(token.idToken)}>Withdraw</button> :\n                                compareAddresses(token.currentOwner, drizzleState.accounts[0]) ?\n                                    <button className=\"btn-decrypt\" onClick={function () { return decryptInfo(token) }}>Decrypt data of the NFT </button> :\n                                    'You sold the token and withdraw all sum'\n                            }</td>\n                        </tr>))\n\n                    }\n\n                </tbody>\n            </Table>\n            {showDecryptModule && <SetDecrypt\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                encData={encData}\n                encPrivateKey={encryptedPrivateKey}\n                typeData={typeData}\n                showDialod={callbackFromDecrypt}\n            />}\n        </section>\n    );\n};\nexport default OwnerAssets;\n","import React, { useState, useEffect } from \"react\";\n\nconst Contacts = props => {\n    const { drizzle, drizzleState } = props;\n\n\n    return (\n        <section>\n            <h2>Contacts</h2>\n\n        </section>\n    );\n};\n\nexport default Contacts;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; \nimport UploadIPFS from \"./UploadIPFS\";\nimport DownloadIPFS from \"./DownloadIPFS\";\nimport MarketPlace from \"./MarketPlace\";\nimport OwnerAssets from \"./OwnerAssets\";\nimport Contacts from \"./Contacts\";\n\nconst App = props => {\n  const [drizzleReadinessState, setDrizzleReadinessState] = useState({\n    drizzleState: null,\n    loading: true\n  });\n  const { drizzle } = props;\n\n  useEffect(\n    () => {\n      const unsubscribe = drizzle.store.subscribe(() => {\n        // every time the store updates, grab the state from drizzle\n        const drizzleState = drizzle.store.getState();\n        // check to see if it's ready, if so, update local component state\n        if (drizzleState.drizzleStatus.initialized) {\n          setDrizzleReadinessState({\n            drizzleState: drizzleState,\n            loading: false\n          });\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    },\n    [drizzle.store, drizzleReadinessState]\n  ); \n  return drizzleReadinessState.loading ? (\n    <div align=\"center\">\n      <h4>\n        <a\n          href=\"https://metamask.io/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Please install Metamask extension and reload the page\n        </a>\n      </h4>\n      Set it on the rinkeby test network\n    </div>\n  ) : (\n    <Router>\n      <div>\n        <div className=\"title_logo\">\n          <img\n            src={\n              \"assets/enc-nft-logo.png\"\n            }\n          />\n          <h1>Encoded NFT</h1>\n        </div> \n        <br /> \n        <br />\n        <br />\n\n        <nav className=\"menu\">\n          <ul> \n            <li>\n              <Link className=\"link\" to=\"/\">Market Place</Link>\n            </li>\n            <li>\n              <Link className=\"link\" to=\"/assets\">Owner Assets</Link>\n            </li> \n            <li>\n              <Link className=\"link\" to=\"/upload-ipfs\">Upload a file to IPFS</Link>\n            </li> \n            <li>\n              <Link className=\"link\" to=\"/contacts\">Contacts</Link>\n            </li> \n          </ul>\n        </nav>\n\n        <hr />\n        <br />\n        <Switch>\n          <Route exact path=\"/\">\n            <MarketPlace\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/assets\">\n            <OwnerAssets\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n            </Route>           \n          <Route path=\"/upload-ipfs\">\n            <UploadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/download-ipfs\">\n            <DownloadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/contacts\">\n            <Contacts\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Web3 from \"web3\";\n\n// import drizzle functions and contract artifact\nimport { Drizzle } from \"drizzle\";\nimport MarketPlace from \"./contracts/MarketPlace.json\";\nimport EncNft from \"./contracts/EncNft.json\"\nconst web3 = new Web3(window.web3.currentProvider);\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [\n    {\n      contractName: 'EncNft',\n      web3Contract: new web3.eth.Contract(EncNft.abi, '0xd7d366cF18D57c6aFC62Fd16FDbBBab08066988F') \n    },\n    {\n      contractName: 'MarketPlace',\n      web3Contract: new web3.eth.Contract(MarketPlace.abi, '0x7680956dFC896f00bedD1Dc1285e1B1c56c327EE') \n    }    \n  ],\n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:8545\"),\n    customProvider: new Web3(window.web3.currentProvider),\n  },\n  // syncAlways:true,\n  polls: {\n    accounts: 2000,\n  },\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle}/>, document.getElementById('root'));\n"],"sourceRoot":""}