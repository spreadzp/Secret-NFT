{"version":3,"sources":["metamask.js","cypher.js","SetDecrypt.js","MintNFT.js","UploadIPFS.js","DownloadIPFS.js","BuyersBoard.js","BetForm.js","MarketPlace.js","OwnerAssets.js","Contacts.js","App.js","index.js"],"names":["EthCrypto","require","getPublicKeyViaMetamask","_x","_getPublicKeyViaMetamask","apply","this","arguments","_callee","address","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","reject","window","ethereum","sendAsync","jsonrpc","method","params","error","encryptionpublickey","result","stop","metamaskEncryptData","_x2","_x3","_metamaskEncryptData","_callee2","message","pubKey","encrypted","encryptedMessage","_context2","console","log","encryptWithPublicKey","sent","cipher","stringify","metamaskEncrypt","_x4","_x5","_metamaskEncrypt","_callee3","enc","_context3","encrypt","data","web3","utils","toHex","JSON","handle","promise","then","undefined","catch","decryptPrivateKey","_x6","_x7","_decryptPrivateKey","_callee4","account","_yield$handle","_yield$handle2","decryptedMessage","decryptErr","_context4","request","Object","slicedToArray","concat","decryptUriFile","_x8","_x9","_decryptUriFile","_callee5","privateKey","parsedEncInfo","_context5","length","parse","decryptWithPrivateKey","t0","getAccount","_getAccount","selectedAddress","encryptData","_encryptData","publicKey","pk","SetDecrypt","props","drizzle","drizzleState","encData","encPrivateKey","typeData","_useState","showDialod","useState","_useState2","setEncryptedInfo","_useState3","_useState4","decryptedPK","setDecryptedPK","_useState5","_useState6","decryptedInfo","setDecryptedInfo","_useState7","_useState8","decPk","setDecPk","_useState9","_useState10","setDecInfoShow","_useForm","useForm","register","handleSubmit","watch","errors","useEffect","_ref","asyncToGenerator","mark","dm","accounts","getDecryptMessage","_ref2","type","react_default","createElement","className","htmlFor","Fragment","name","rows","cols","value","src","onClick","MintNFT","hashMint","setHashMint","countTokens","setCountTokens","ipfsLink","encryptedKey","contract","contracts","EncNft","_countOfTokens","numResult","methods","totalSupply","call","from","countOfTokens","onSubmit","stringUri","resMint","setUri","mint","send","transactionHash","description","uri","objectSpread2","image","placeholder","ref","required","maxLength","client","create","options","label","UploadIPFS","fileUrl","updateFileUrl","clearData","setClearData","encryptedData","setEncryptedData","encryptedPrivateKey","setEncryptedPrivateKey","_useState11","_useState12","setCustomerAddress","_useState13","_useState14","setCid","_useState15","_useState16","_useState17","_useState18","newPrivateKey","setNewPrivateKey","_useState19","_useState20","newPublicKey","setNewPublicKey","_useState21","_useState22","newAddress","setNewAddress","_useState23","_useState24","creatorAddress","setCreatorAddress","_useState25","_useState26","_useState27","_useState28","selectedOption","setSelectedOption","_useState29","_useState30","choisedFile","_useState31","_useState32","textArea","setTextArea","encryptPrivateKeyForNFTFile","setValue","dataToEncrypt","addressToEncrypt","_ref4","added","url","add","path","sendEncryptInfoToIPFS","generateKeys","newIdentity","createIdentity","Form","Group","controlId","Select","aria-label","onChange","e","target","map","o","key","event","open","id","file","files","fileReader","FileReader","readAsText","onload","fileAsText","onerror","hidden","fileToEncrypt","src_SetDecrypt","href","src_MintNFT","DownloadIPFS","encryptedInfo","Coupoken","decMessage","setDecryptMessage","fileToDecrypt","BuyersBoard","setTotalAmountNft","nftBuyersDetails","setNftBuyersDetails","nftOwnersDetails","contractMarket","MarketPlace","showBoard","setShowBoard","buyerIndex","setBuyerIndex","getBuyers","tokensArray","index","push","idNft","owner","_ref3","token","countBuyers","_loop","_index","getCountBuyers","buyersMakeBet","buyersBoard","toConsumableArray","idToken","buyerAddress","buyerPubKey","buyerBet","goalPurchase","delegateYield","t1","sellNft","buyer","ownerOfTokenInfo","lastEncryptedPrivateKey","decryptedPrivateKey","getTokenInfoLastOwner","acceptRateAndTransferToken","gasPrice","Math","pow","gasLimit","BuyersOfToken","Table","striped","bordered","hover","filter","item","ind","formatEther","approved","getSellerActions","Accordion","defaultActiveKey","Item","eventKey","Header","totalSum","totalBuyersOfToken","CountBuyers","Body","BetForm","showForm","isShowForm","setFocus","bnValue","BigNumber","parseUnits","valueBet","makeBet","disabled","tokenId","step","totalAmountNft","setNftOwnersDetails","setPubKey","chosenTokenId","setChosenTokenId","showBetForm","setShowBetForm","showSellers","setShowSellers","fillOwnersTokens","transferNFT","moveTokenForSell","approveNFT","approve","ownersArray","isTokenForSell","_ref5","ownerAddress","approvedAddress","tokenInfo","tokenInfoJson","ownerOf","getApproved","tokenURI","src_BetForm","src_BuyersBoard","OwnerAssets","sellerSoldAmounts","setSellerSoldAmounts","setEncData","showDecryptModule","setShowDecryptModule","setTypeData","choosedToken","setChoosedToken","typeFileNames","cutParams","start","end","getIdsByAddress","all","soldBalance","currentOwnerInfo","uriInfo","parsedUri","getOwnerInfo","balance","currentOwner","getTypeDataFromDescription","split","cidPath","cid","cuttedString","object","get","timeout","TextDecoder","decode","Data","slice","getInfoFromIPFS","withdrawSum","resultWithdraw","sellerWithdrawSum","includes","decryptInfo","i","add1","add2","flag","Contacts","App","loading","drizzleReadinessState","setDrizzleReadinessState","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","align","rel","react_router_dom","to","react_router","exact","src_MarketPlace","src_OwnerAssets","src_UploadIPFS","src_DownloadIPFS","src_Contacts","Web3","currentProvider","contractName","web3Contract","eth","Contract","abi","block","customProvider","polls","Drizzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"s5ZAEIA,EAAYC,EAAQ,KACjB,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAuCC,GAAvC,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACI,IAAIC,QAAQ,SAACC,EAASC,GACzBC,OAAOC,SAASC,UACZ,CACIC,QAAS,MACTC,OAAQ,6BACRC,OAAQ,CAAChB,IAGb,SAAUiB,EAAOC,GACRD,EAGDP,EAAOO,GAFPR,EAAQS,EAAoBC,aAXzC,wBAAAf,EAAAgB,SAAArB,6BAoBA,SAAesB,EAAtBC,EAAAC,GAAA,OAAAC,EAAA5B,MAAAC,KAAAC,sDAAO,SAAA2B,EAAmCC,EAASC,GAA5C,IAAAC,EAAAC,EAAA,OAAA5B,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cACHyB,QAAQC,IAAIN,GADTI,EAAAxB,KAAA,EAEqBf,EAAU0C,qBAC9BN,EACAD,GAJD,cAEGE,EAFHE,EAAAI,KAMHH,QAAQC,IAAI,2EAAkEJ,GAExEC,EAAmBtC,EAAU4C,OAAOC,UACtCR,GATDE,EAAAvB,OAAA,SAcIsB,GAdJ,wBAAAC,EAAAV,SAAAK,6BAgBA,SAAeY,EAAtBC,EAAAC,GAAA,OAAAC,EAAA5C,MAAAC,KAAAC,sDAAO,SAAA2C,EAA+Bf,EAASC,GAAxC,IAAAe,EAAAb,EAAA,OAAA5B,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cACHyB,QAAQC,IAAI,wEAA+DL,GAC3EI,QAAQC,IAAIN,GAENgB,EAAME,kBACRjB,EACA,CAAEkB,KAAMnB,GACR,4BAEJK,QAAQC,IAAI,qEAA4DU,GAClEb,EAAmBiB,IAAKC,MAAMC,MAChCC,KAAKb,UACDM,IAGRX,QAAQC,IAAI,kFAAyEH,GAflFc,EAAApC,OAAA,SAmBIsB,GAnBJ,wBAAAc,EAAAvB,SAAAqB,6BAsBP,IAAIS,EAAS,SAACC,GACV,OAAOA,EACFC,KAAK,SAAAP,GAAI,MAAK,CAACA,OAAMQ,KACrBC,MAAM,SAAArC,GAAK,OAAIT,QAAQC,QAAQ,MAAC4C,EAAWpC,OAG7C,SAAesC,EAAtBC,EAAAC,GAAA,OAAAC,EAAA9D,MAAAC,KAAAC,sDAAO,SAAA6D,EAAiC9B,EAAkB+B,GAAnD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/D,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAE0C4C,EAAOvC,OAAOC,SAASsD,QAAQ,CACxEnD,OAAQ,cACRC,OAAQ,CAACa,EAAkB+B,MAJ5B,UAAAC,EAAAI,EAAA/B,KAAA4B,EAAAK,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAEIE,EAFJD,EAAA,KAEsBE,EAFtBF,EAAA,KAAAG,EAAA3D,KAAA,SAOeyB,QAAQd,MAAM+C,EAAWtC,SAPxCuC,EAAA3D,KAAA,wBASCyB,QAAQC,IAAR,qBAAAqC,OAAiCN,IATlCE,EAAA1D,OAAA,SAUQwD,GAVR,yBAAAE,EAAA7C,SAAAuC,6BAcA,SAAeW,EAAtBC,EAAAC,GAAA,OAAAC,EAAA7E,MAAAC,KAAAC,sDAAO,SAAA4E,EAA8B7C,EAAkB8C,GAAhD,IAAAC,EAAAlD,EAAA,OAAAzB,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cAAAuE,EAAAxE,KAAA,EAEC0B,QAAQC,IAAR,4BAAAqC,OAAwCxC,EAAiBiD,SACnDF,EAAgBrF,EAAU4C,OAAO4C,MAAMlD,GAH9CgD,EAAAvE,KAAA,EAIuBf,EAAUyF,sBAC5BL,EAAYC,GALjB,cAIOlD,EAJPmD,EAAA3C,KAMCH,QAAQC,IAAI,wEAA+DN,GAN5EmD,EAAAtE,OAAA,SAOQmB,GAPR,QAAAmD,EAAAxE,KAAA,GAAAwE,EAAAI,GAAAJ,EAAA,SASC9C,QAAQC,IAAI,WAAZ6C,EAAAI,IATD,yBAAAJ,EAAAzD,SAAAsD,EAAA,yCC9EA,SAAeQ,IAAtB,OAAAC,EAAAvF,MAAAC,KAAAC,sDAAO,SAAAC,IAAA,OAAAE,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUK,OAAOC,SAASwE,gBAD1B,cAAAhF,EAAAG,OAAA,SAAAH,EAAA8B,MAAA,wBAAA9B,EAAAgB,SAAArB,6BASA,SAAesF,EAAtB3F,EAAA4B,GAAA,OAAAgE,EAAA1F,MAAAC,KAAAC,sDAAO,SAAA2B,EAA2B8D,EAAW1C,GAAtC,IAAA2C,EAAA,OAAAvF,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACcb,EAAwB8F,GADtC,cACGC,EADH1D,EAAAI,KAEHH,QAAQC,IAAI,0DAAiDwD,GAF1D1D,EAAAxB,KAAA,EAGU+B,EAAgBQ,EAAM2C,GAHhC,cAAA1D,EAAAvB,OAAA,SAAAuB,EAAAI,MAAA,wBAAAJ,EAAAV,SAAAK,6BCRP,IAmFegE,EAnFI,SAAAC,GAEiEA,EAAxEC,QAAR,IAAiBC,EAA+DF,EAA/DE,aAAcC,EAAiDH,EAAjDG,QAASC,EAAwCJ,EAAxCI,cAAeC,EAAyBL,EAAzBK,SACvDC,GADgFN,EAAfO,WACvBC,mBAAS,KAAnDC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAsBI,GAAtBD,EAAA,GAAAA,EAAA,IACAE,EAAsCH,mBAAS,IAA/CI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAA0BX,oBAAS,GAAnCY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAAOE,EAAPD,EAAA,GAAcE,EAAdF,EAAA,GACAG,EAAsCf,oBAAS,GAA/CgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAAoBE,GAApBD,EAAA,GAAAA,EAAA,IACAE,EAAkDC,cAAlDD,EAAQE,SAARF,EAAkBG,aAAlBH,EAAgCI,MAAhCJ,EAAuCK,OAEvCC,oBAAU,WACNtB,EAAiBP,IAClB,CAACA,IAEJ6B,oBAAU,WACFX,GAAO,eAAAY,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACP,SAAA9H,IAAA,IAAA+H,EAAA,OAAA7H,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC0B,KAAlBwF,EADR,CAAA1F,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEyBiD,EAAkBuC,EAAeF,EAAamC,SAAS,IAFhF,OAEcD,EAFd1H,EAAA8B,KAGQH,QAAQC,IAAI,6EAAoE8F,GAChFtB,EAAesB,GACfX,GAAe,GALvB,wBAAA/G,EAAAgB,SAAArB,MADO,yBAAA4H,EAAA/H,MAAAC,KAAAC,YAAA,EASPkI,IAGL,CAACjB,EAAOjB,IAEX4B,oBAAU,WACFnB,GAAeV,GAAS,eAAAoC,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACxB,SAAApG,IAAA,IAAAqG,EAAA,OAAA7H,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACqBgE,EAAeuB,EAASU,GAD7C,OACUuB,EADVhG,EAAAI,KAEI0E,EAAiBkB,GAFrB,wBAAAhG,EAAAV,SAAAK,MADwB,yBAAAwG,EAAArI,MAAAC,KAAAC,YAAA,EAMxBkI,IAGL,CAACzB,EAAaV,IAcjB,IAA+BqC,EAgB/B,OACIC,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,eACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,iBAAf,mBApBeJ,EAqBQnC,EAnB/BoC,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,KACa,KAARL,GAAeC,EAAAjI,EAAAkI,cAAA,OAAKI,KAAK,gBACtBH,UAAU,gBAAeF,EAAAjI,EAAAkI,cAAA,YAAUK,KAAM,GAAIC,KAAM,GAAIC,MAAOhC,KACzD,KAARuB,GAAeC,EAAAjI,EAAAkI,cAAA,WAAKD,EAAAjI,EAAAkI,cAAA,OAAKI,KAAK,gBAC3BH,UAAU,eAAeO,IAAKjC,KAGtB,KAARuB,GAAeC,EAAAjI,EAAAkI,cAAA,OAAKI,KAAK,gBACzBH,UAAU,gBAAeF,EAAAjI,EAAAkI,cAAA,YAAUK,KAAM,GAAIC,KAAM,GAAIC,MAAOhC,SAetEwB,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,aAAaQ,QAAS,kBAAM7B,GAAUD,KAAxD,mCC+CO+B,EA9HH,SAAApD,GACZ,IAAAM,EAA8BE,mBAAS,MAAvCC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GACAK,GADAF,EAAA,GAAAA,EAAA,GACkCD,mBAAS,KAA3CI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACgCJ,mBAAS,KAAzCQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOsC,EAAPrC,EAAA,GAAiBsC,EAAjBtC,EAAA,GACAG,EAA4BX,mBAAS,IAArCY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACsCZ,mBAAS,IAA/CgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAAOgC,EAAP/B,EAAA,GAAoBgC,EAApBhC,EAAA,GACQvB,EAA4DD,EAA5DC,QAASC,EAAmDF,EAAnDE,aAAcuD,EAAqCzD,EAArCyD,SAAUC,EAA2B1D,EAA3B0D,aAAcrD,EAAaL,EAAbK,SACjDsD,EAAW1D,EAAQ2D,UAAUC,OAGnCnC,EAAkDC,cAA1CC,EAARF,EAAQE,SAAUC,EAAlBH,EAAkBG,aAAqBE,GAAvCL,EAAgCI,MAAhCJ,EAAuCK,QACvCC,oBAAU,WAAM,SAAA8B,IAAA,OAAAA,EAAArF,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACZ,SAAA9H,IAAA,IAAAoB,EAAAsI,EAAA,OAAAxJ,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACyB+I,EAASK,QACzBC,cACAC,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAH5C,OACU5G,EADVf,EAAA8B,KAIQH,QAAQC,IAAI,8BAA+Bb,EAAQ8H,IAClD9H,IAAW8H,IACNQ,GAAatI,EACnBY,QAAQC,IAAI,wEAA+DyH,GAC3EP,EAAeO,GACf1H,QAAQC,IAAI,mBAAoBiH,IATxC,wBAAA7I,EAAAgB,SAAArB,OADYH,MAAAC,KAAAC,YAAA,WAAA0J,EAAA5J,MAAAC,KAAAC,WAeZgK,IACD,IACH,IAAMC,EAAQ,eAAApC,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApG,EAAOoB,GAAP,IAAAmH,EAAAC,EAAA,OAAAhK,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEP0J,EAAYE,EAAOrH,GAEzBd,QAAQC,IAAI,mEAA0DgI,GAJzDlI,EAAAxB,KAAA,EAKS+I,EAASK,QAAQS,KAAKvE,EAAamC,SAAS,GAAIkB,EAAc,EAAGe,EAAWZ,GAAcgB,KAAK,CAAEP,KAAMjE,EAAamC,SAAS,KALtI,QAKPkC,EALOnI,EAAAI,QAOTH,QAAQC,IAAI,iEAAwDiI,GACpEjB,EAAYiB,EAAQI,kBARX,wBAAAvI,EAAAV,SAAAK,MAAH,gBAAA/B,GAAA,OAAAiI,EAAA/H,MAAAC,KAAAC,YAAA,GAuBJoK,EAAS,SAAArH,GAEXd,QAAQC,IAAI,gBAAiB+D,GACd,GAAZA,IACClD,EAAKyH,aAAe,UAET,GAAZvE,IACClD,EAAKyH,aAAe,WAGT,GAAZvE,IACClD,EAAKyH,aAAe,UAExBvI,QAAQC,IAAI,mDAA0Ca,GACtD,IAAM0H,EAAGpG,OAAAqG,EAAA,EAAArG,QAAAqG,EAAA,EAAArG,CAAA,GAAQtB,GAAR,IAAc4H,MAAOtB,IAC9B,OAAOlG,KAAKb,UAAUmI,IAkB1B,OACIpC,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,4CACAD,EAAAjI,EAAAkI,cAAA,QAAM2B,SAAUxC,EAAawC,IACzB5B,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,QAAf,QACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,OACLH,UAAU,eACVqC,YAAY,mBACZC,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAOe,MAAQL,EAAAjI,EAAAkI,cAAA,mCAGxBD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,QAAf,0BACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,cACLH,UAAU,eACVqC,YAAY,mBACZC,IAAKrD,EAAS,CAAEsD,UAAU,EAAOC,UAAW,QAE/CpD,EAAO6C,aAAenC,EAAAjI,EAAAkI,cAAA,mCAI/BD,EAAAjI,EAAAkI,cAAA,SAAOC,UAAU,aAAaH,KAAK,SAASS,MAAM,UAEtDR,EAAAjI,EAAAkI,cAAA,sCAC6BW,uBC7GvC+B,EAASC,iBAAO,sCAChBC,EAAU,CACZ,CAAErC,MAAO,EAAGsC,MAAO,QACnB,CAAEtC,MAAO,EAAGsC,MAAO,SACnB,CAAEtC,MAAO,EAAGsC,MAAO,SA0QRC,EAvQI,SAAAxF,GACf,IAAAM,EAAiCE,mBAAQ,IAAzCC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAOmF,EAAPhF,EAAA,GAAgBiF,EAAhBjF,EAAA,GACAE,EAA8BH,mBAAS,MAAvCI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACkCJ,mBAAS,KAA3CQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAO4E,EAAP3E,EAAA,GAAkB4E,EAAlB5E,EAAA,GACAG,EAA0CX,mBAAS,IAAnDY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAAO0E,EAAPzE,EAAA,GAAsB0E,EAAtB1E,EAAA,GACAG,EAAsDf,mBAAS,IAA/DgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAAOwE,EAAPvE,EAAA,GAA4BwE,EAA5BxE,EAAA,GACAyE,EAA8CzF,mBAAS,IAAvD0F,EAAAzH,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,GAAwBE,GAAxBD,EAAA,GAAAA,EAAA,IACQjG,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aACjBkG,EAAsB5F,mBAAS,IAA/B6F,EAAA5H,OAAAC,EAAA,EAAAD,CAAA2H,EAAA,GAAYE,GAAZD,EAAA,GAAAA,EAAA,IACAE,EAAgD/F,mBAAS,IAAzDgG,EAAA/H,OAAAC,EAAA,EAAAD,CAAA8H,EAAA,GACAE,GADAD,EAAA,GAAAA,EAAA,GAC0ChG,mBAAS,KAAnDkG,EAAAjI,OAAAC,EAAA,EAAAD,CAAAgI,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAAwCrG,mBAAS,IAAjDsG,EAAArI,OAAAC,EAAA,EAAAD,CAAAoI,EAAA,GAAOE,EAAPD,EAAA,GAAqBE,EAArBF,EAAA,GACAG,EAAoCzG,mBAAS,IAA7C0G,EAAAzI,OAAAC,EAAA,EAAAD,CAAAwI,EAAA,GAAOE,GAAPD,EAAA,GAAmBE,GAAnBF,EAAA,GACAG,GAA4C7G,mBAAS,IAArD8G,GAAA7I,OAAAC,EAAA,EAAAD,CAAA4I,GAAA,GAAOE,GAAPD,GAAA,GAAuBE,GAAvBF,GAAA,GACAG,GAAkDjH,mBAAS,GAA3DkH,GAAAjJ,OAAAC,EAAA,EAAAD,CAAAgJ,GAAA,GACAE,IADAD,GAAA,GAAAA,GAAA,GAC4ClH,mBAAS,IAArDoH,GAAAnJ,OAAAC,EAAA,EAAAD,CAAAkJ,GAAA,GAAOE,GAAPD,GAAA,GAAuBE,GAAvBF,GAAA,GACAG,GAAsCvH,mBAAS,IAA/CwH,GAAAvJ,OAAAC,EAAA,EAAAD,CAAAsJ,GAAA,GAAOE,GAAPD,GAAA,GAEAE,IAFAF,GAAA,GAEgCxH,mBAAS,KAAzC2H,GAAA1J,OAAAC,EAAA,EAAAD,CAAAyJ,GAAA,GAAOE,GAAPD,GAAA,GAAiBE,GAAjBF,GAAA,GAEAzG,GAAkDC,cAA1CC,GAARF,GAAQE,SAAUC,GAAlBH,GAAkBG,aAAqBE,IAAvCL,GAAgCI,MAAhCJ,GAAuCK,QAYvC,IAKMuG,GAA2B,eAAArG,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAA9H,IAAA,IAAA8F,EAAA,OAAA5F,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEV+E,EAAY4H,GAAgBZ,GAFlB,OAGhB,MADVxG,EAF0BzF,EAAA8B,OAI5BwJ,EAAuB7F,GAJK,wBAAAzF,EAAAgB,SAAArB,MAAH,yBAAA4H,EAAA/H,MAAAC,KAAAC,YAAA,GAS3BmO,GAAQ,eAAAhG,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApG,EAAMkH,GAAN,IAAA9C,EAAA,OAAA5F,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cACbyB,QAAQC,IAAI,iBAAkBqJ,GAC9BC,EAAa3C,EAAMuF,eACnBrC,EAAmBlD,EAAMwF,kBAHZrM,EAAAxB,KAAA,EAKSe,EAAoBsH,EAAMuF,eAAiB7C,GAAayC,GAAUrB,GAL3E,OAMG,MADV5G,EALO/D,EAAAI,OAOTsJ,EAAiB3F,GAPR,wBAAA/D,EAAAV,SAAAK,MAAH,gBAAAH,GAAA,OAAA2G,EAAArI,MAAAC,KAAAC,YAAA,GAsBd4H,oBAASvD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAC,SAAApF,IAAA,IAAAzC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACgB4E,IADhB,QACAlF,EADA2C,EAAAT,OAGFgL,GAAkBlN,GAHhB,wBAAA2C,EAAAvB,SAAAqB,MAMP,CAACyC,EAAYgI,KAEhBxF,oBAAU,WACF6D,GAAiB0B,IAAgB,eAAAmB,EAAAjK,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACjC,SAAAlE,IAAA,IAAA0K,EAAAC,EAAA,OAAArO,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAEwBwK,EAAOyD,IAAIhD,GAFnC,OAEU8C,EAFVpK,EAAA/B,KAGI8J,EAAOqC,EAAMG,MACPF,EAJV,+BAAAjK,OAI+CgK,EAAMG,MACjDpD,EAAckD,GALlB,wBAAArK,EAAA7C,SAAAuC,MADiC,yBAAAyK,EAAAxO,MAAAC,KAAAC,YAAA,EASjC2O,IAIL,CAAClD,EAAe0B,KAGnB,IAgCMyB,GAAe,WACjB,IAAMC,EHvIHpP,UAAUqP,iBGwIbtC,EAAiBqC,EAAYhK,YAC7B+H,EAAgBiC,EAAYpJ,WAC5BuH,GAAc6B,EAAY3O,UAuC9B,OACImI,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,8BACAD,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,oDAEAD,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,aAAaQ,QAAS,kBAAM6F,OAA9C,uCACAvG,EAAAjI,EAAAkI,cAAA,kBAAUiE,GACVlE,EAAAjI,EAAAkI,cAAA,sBAAcqE,GACdtE,EAAAjI,EAAAkI,cAAA,mBAAWyE,IACX1E,EAAAjI,EAAAkI,cAAA,6BAAqB6E,IACpBZ,GAAiBlE,EAAAjI,EAAAkI,cAAA,oEACjBiE,GAAiBlE,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,aAAaQ,QAAS,kBAAMmF,OAA9C,uBAClB7F,EAAAjI,EAAAkI,cAAA,oCACAD,EAAAjI,EAAAkI,cAAA,WAAMqD,GACNtD,EAAAjI,EAAAkI,cAAA,WAECqD,GAAuBtD,EAAAjI,EAAAkI,cAAA,8FACvBqD,GAEGtD,EAAAjI,EAAAkI,cAAA,QAAM2B,SAAUxC,GA5Jf,SAAA1E,GACbd,QAAQC,IAAI,sDAA6Ca,GACzDoL,GAASpL,MA2JOsF,EAAAjI,EAAAkI,cAAA,iCACAD,EAAAjI,EAAAkI,cAACyG,EAAA,EAAKC,MAAN,CAAYzG,UAAU,OAAO0G,UAAU,6BACnC5G,EAAAjI,EAAAkI,cAACyG,EAAA,EAAKG,OAAN,CAAaC,aAAW,gCAAgCtG,MAAO4E,GAC3D2B,SAAU,SAAAC,GAAC,OA9CjBxG,EA8CkCwG,EAAEC,OAAOzG,WAAO6E,GA7CjD7E,GADF,IAACA,IA+COqC,EAAQqE,IAAI,SAAAC,GAAC,OACVnH,EAAAjI,EAAAkI,cAAA,UAAQmH,IAAKD,EAAE3G,MAAOA,MAAO2G,EAAE3G,OAAQ2G,EAAErE,WAIjC,MAAnBsC,GAAyBpF,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,KAAEJ,EAAAjI,EAAAkI,cAACyG,EAAA,EAAKC,MAAN,CAAYzG,UAAU,OAAO0G,UAAU,gCAC/D5G,EAAAjI,EAAAkI,cAAA,iDAEAD,EAAAjI,EAAAkI,cAAA,YAAUK,KAAM,EAAGE,MAAOmF,GAAUoB,SAnD/B,SAACM,GACtBA,GAASA,EAAMJ,OAAOzG,QACtBoF,GAAYyB,EAAMJ,OAAOzG,OACzB2C,EAAakE,EAAMJ,OAAOI,WAiDVrH,EAAAjI,EAAAkI,cAAA,sEAGuB,MAAnBmF,IAA0BpF,EAAAjI,EAAAkI,cAAA,SAAOF,KAAK,SAASG,UAAU,aAAaQ,QAAS,kBAAMlI,OAAO8O,KAAK,+BAAgC,WAAW9G,MAAM,cAGtJR,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,KACuB,MAAnBgF,IAA0BpF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACrCF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,QAAf,uBACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,gBACLH,UAAU,eACVqC,YAAY,cACZC,IAAKrD,GAAS,CAAEsD,UAAU,EAAOC,UAAW,QAE/CpD,GAAOyG,eAAiB/F,EAAAjI,EAAAkI,cAAA,mCAKV,MAAnBmF,IAA0BpF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACrCF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOF,KAAK,OAAOwH,GAAG,SAClBlH,KAAK,gBACLH,UAAU,eACV6G,SAvIvB,SAACM,GAClB,IAAIG,EAAOH,EAAMJ,OAAOQ,MAAM,GAE9B7N,QAAQC,IAAI,sBAAuBuL,IACnC,IAAIsC,EAAa,IAAIC,WACrBD,EAAWE,WAAWJ,GACtBE,EAAWG,OAAS,SAACR,GACjB,IAAIS,EAAaT,EAAMJ,OAAOjO,OAC9BmK,EAAa2E,IAEjBJ,EAAWK,QAAU,SAACjP,GAAD,OAAWc,QAAQd,MAAM,UAAWA,KA8HjBkP,QAAM,IACVhI,EAAAjI,EAAAkI,cAAA,SAAOC,UAAU,eAAeC,QAAQ,UAAxC,eACCb,GAAO2I,eAAiBjI,EAAAjI,EAAAkI,cAAA,iCACxBuF,MAKN,KAAdtC,GAAoBlD,EAAAjI,EAAAkI,cAAA,SAAOC,UAAU,aAAaH,KAAK,SAASS,MAAM,+BAG9EwC,GAAWhD,EAAAjI,EAAAkI,cAAA,wEACX+C,GAAWhD,EAAAjI,EAAAkI,cAACiI,EAAD,CACR1K,QAASA,EACTC,aAAcA,EACdC,QAAS0F,EACTzF,cAAe2F,EACf1F,SAAUwH,MAGlBpF,EAAAjI,EAAAkI,cAAA,KAAGkI,KAAMnF,EAASiE,OAAO,UAAUjE,GAClCA,GAAWhD,EAAAjI,EAAAkI,cAAA,wEACX+C,GAAWhD,EAAAjI,EAAAkI,cAACmI,EAAD,CACR5K,QAASA,EACTC,aAAcA,EACduD,SAAUgC,EACV/B,aAAcqC,EACd1F,SAAUwH,OC9KXiD,EA/FM,SAAA9K,GAE0BA,EAAnCC,QAAR,IAAiBC,EAA0BF,EAA1BE,aAAcC,EAAYH,EAAZG,QAC/BG,EAA0CE,mBAAS,IAAnDC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAOyK,EAAPtK,EAAA,GAAsBC,EAAtBD,EAAA,GAEAE,GADqBT,EAAa0D,UAA1BoH,SAC8BxK,mBAAS,KAA/CI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAAwCX,oBAAS,GAAjDY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAAO8J,EAAP7J,EAAA,GAAmB8J,EAAnB9J,EAAA,GACAM,EAAkDC,cAAXI,GAAvCL,EAAQE,SAARF,EAAkBG,aAAlBH,EAAgCI,MAAhCJ,EAAuCK,QAEvCC,oBAAU,WACNtB,EAAiBP,IAClB,CAACA,IAEJ6B,oBAAU,WACFiJ,GAAY,eAAAhJ,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACZ,SAAA9H,IAAA,IAAA+H,EAAA,OAAA7H,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC0B,KAAlBmQ,EADR,CAAArQ,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEyBiD,EAAkBkN,EAAe,8CAF1D,OAEc3I,EAFd1H,EAAA8B,KAGQH,QAAQC,IAAI,6EAAoE8F,GAChFtB,EAAesB,GAJvB,wBAAA1H,EAAAgB,SAAArB,MADY,yBAAA4H,EAAA/H,MAAAC,KAAAC,YAAA,EASZkI,IAGL,CAAC2I,IAEJjJ,oBAAU,WACFf,GAAe,eAAAsB,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACf,SAAApG,IAAA,IAAAqG,EAAA,OAAA7H,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,UAC0B,KAAlBmQ,EADR,CAAA3O,EAAAxB,KAAA,eAAAwB,EAAAxB,KAAA,EAEyBgE,EAAemM,EAAe,8CAFvD,OAEc3I,EAFdhG,EAAAI,KAGQH,QAAQC,IAAI,6EAAoE8F,GAChFlB,EAAiBkB,GAJzB,wBAAAhG,EAAAV,SAAAK,MADe,yBAAAwG,EAAArI,MAAAC,KAAAC,YAAA,EASfkI,IAGL,CAAC2I,EAAYhK,IAgBhB,OACIwB,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,uCACAD,EAAAjI,EAAAkI,cAAA,WAAMqI,GACNtI,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,eACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,iBAAf,kBACAH,EAAAjI,EAAAkI,cAAA,OACII,KAAK,gBACLH,UAAU,gBAEZ1B,KAIVwB,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,QAAf,6BACAH,EAAAjI,EAAAkI,cAAA,SACIF,KAAK,OACLM,KAAK,gBACLH,UAAU,eACV6G,SApCC,SAACM,GAClB,IAAIG,EAAOH,EAAMJ,OAAOQ,MAAM,GAE1BC,EAAa,IAAIC,WACrBD,EAAWE,WAAWJ,GAEtBE,EAAWG,OAAS,SAACR,GACjB,IAAIS,EAAaT,EAAMJ,OAAOjO,OAC9BiF,EAAiB6J,OA8BRxI,EAAOoJ,eAAiB1I,EAAAjI,EAAAkI,cAAA,mCAGjCD,EAAAjI,EAAAkI,cAAA,UAAQS,QAAS,kBAAM+H,GAAmBD,KAA1C,WAEZxI,EAAAjI,EAAAkI,cAAA,0BACAD,EAAAjI,EAAAkI,cAAA,WAAM7B,GACN4B,EAAAjI,EAAAkI,cAAA,iCACAD,EAAAjI,EAAAkI,cAAA,WAAMzB,wCCwDSmK,EAhJK,SAAApL,GAChB,IAAAM,EAA8BE,mBAAS,MAAvCC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GACAK,GADAF,EAAA,GAAAA,EAAA,GAC4CD,mBAAS,IAArDI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAuB0K,GAAvBzK,EAAA,GAAAA,EAAA,IACAG,EAAgDP,mBAAS,IAAzDQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOuK,EAAPtK,EAAA,GAAyBuK,EAAzBvK,EAAA,GACAG,EAA+BX,mBAAS,IAAxCY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GAC0CZ,mBAAS,IAAnDgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GACQtB,GADRuB,EAAA,GAAAA,EAAA,GACoDxB,EAA5CC,SAASC,EAAmCF,EAAnCE,aAAcsL,EAAqBxL,EAArBwL,iBACzB7H,EAAW1D,EAAQ2D,UAAUC,OAC7B4H,EAAiBxL,EAAQ2D,UAAU8H,YAEzCzF,EAAkCzF,oBAAS,GAA3C0F,EAAAzH,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,GAAO0F,EAAPzF,EAAA,GAAkB0F,EAAlB1F,EAAA,GACAE,EAAoC5F,oBAAU,GAA9C6F,EAAA5H,OAAAC,EAAA,EAAAD,CAAA2H,EAAA,GAAOyF,EAAPxF,EAAA,GAAmByF,EAAnBzF,EAAA,GACArE,oBAAU,WACN+J,KACD,IAGH,IAOMA,EAAS,eAAAxJ,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApF,IAAA,IAAAtB,EAAAuQ,EAAAC,EAAA,OAAA1R,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACK+I,EAASK,QACvBC,cACAC,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAH1B,OAId,IAHI5G,EADU8C,EAAA/B,MAID,EAAG,CAGZ,IAFA6O,EAAkB5P,GACZuQ,EAAc,GACXC,EAAQ,EAAGA,GAASxQ,EAAQwQ,IACjCD,EAAYE,KAAK,CAAEC,MAAOF,EAAOG,MAAO,GAAItJ,KAAM,GAAI8B,YAAa,GAAIG,MAAO,KAElFiH,EAAYrC,IAAZ,eAAA0C,EAAA5N,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAgB,SAAApG,EAAMuQ,GAAN,IAAAC,EAAAC,EAAAC,EAAA,OAAAlS,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAAtC,KAAA,EAAAsC,EAAArC,KAAA,EAEkB6Q,EAAezH,QAAQ0I,eAAeJ,EAAMH,OAAOjI,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAFxG,aAEFkK,EAFEtP,EAAAT,MAIU,GAJV,CAAAS,EAAArC,KAAA,SAAA4R,EAAAjS,EAAAC,EAAA2H,KAAA,SAAAqK,EAKKP,GALL,IAAAU,EAAA,OAAApS,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EAM4B6Q,EAAezH,QAAQ4I,YAAYN,EAAMH,MAAOF,GAAO/H,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KANtH,QAMMsK,EANNvQ,EAAAI,OAQI+O,EAAoB,SAAAD,GAAgB,SAAA3M,OAAAF,OAAAoO,EAAA,EAAApO,CAAQ6M,GAAR,CAA0B,CAC1DwB,QAASR,EAAMH,MAAOY,aAAcJ,EAAc,GAAIK,YAAaL,EAAc,GACjFM,SAAUN,EAAc,GAAIO,aAAcP,EAAc,QAVhE,wBAAAvQ,EAAAV,SAAA8Q,KAKKP,EAAQ,EALb,YAKgBA,EAAQM,GALxB,CAAAtP,EAAArC,KAAA,gBAAAqC,EAAAkQ,cAAAX,EAKKP,GALL,eAKqCA,IALrChP,EAAArC,KAAA,gBAAAqC,EAAArC,KAAA,iBAAAqC,EAAAtC,KAAA,GAAAsC,EAAAmQ,GAAAnQ,EAAA,SAgBRZ,QAAQC,IAAI,oEAAZW,EAAAmQ,IAhBQ,yBAAAnQ,EAAAvB,SAAAK,EAAA,kBAAhB,gBAAAH,GAAA,OAAAyQ,EAAAnS,MAAAC,KAAAC,YAAA,IAVU,wBAAAmE,EAAA7C,SAAAqB,MAAH,yBAAAwF,EAAArI,MAAAC,KAAAC,YAAA,GAgCTiT,EAAO,eAAA3E,EAAAjK,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAAlE,EAAOqP,EAAOhB,GAAd,IAAAiB,EAAAC,EAAAC,EAAAtN,EAAA,OAAA5F,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,UACR0R,EAAMF,QAAUlM,EAAamC,SAAS,GAD9B,CAAAlD,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,EAGuB+I,EAASK,QAAQ0J,sBAAsBpB,EAAMH,OAAOjI,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAH9G,cAGFkL,EAHEpO,EAAA3C,KAKFgR,EAA0BD,EAAiBpN,QALzChB,EAAAvE,KAAA,EAO0BiD,EAAkB2P,EAAyBtN,EAAamC,SAAS,IAP3F,YAOFoL,EAPEtO,EAAA3C,MAAA,CAAA2C,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,GAUkB+B,EAAgB8Q,EAAqBH,EAAMN,aAV7D,WAWY,MADV7M,EAVFhB,EAAA3C,MAAA,CAAA2C,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,GAYuB6Q,EAAezH,QAAQ2J,2BAA2BrB,EAAMH,MAAOmB,EAAMP,aAAc5M,GAASuE,KAAK,CAAEP,KAAMjE,EAAamC,SAAS,GAAIuL,SAAU,GAAAC,KAAAC,IAAK,GAAM,IAAIC,SAAU,MAZ7L,QAAA5O,EAAA3C,KAAA,yBAAA2C,EAAAzD,SAAAuC,MAAH,gBAAApC,EAAAe,GAAA,OAAA8L,EAAAxO,MAAAC,KAAAC,YAAA,GAyCP4T,EAAgB,SAAC1B,GAGnB,OACI7J,EAAAjI,EAAAkI,cAACuL,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB3L,EAAAjI,EAAAkI,cAAA,aACID,EAAAjI,EAAAkI,cAAA,UACID,EAAAjI,EAAAkI,cAAA,6BACAD,EAAAjI,EAAAkI,cAAA,0BACAD,EAAAjI,EAAAkI,cAAA,gCACAD,EAAAjI,EAAAkI,cAAA,wBAGRD,EAAAjI,EAAAkI,cAAA,aACI4I,EAAiB+C,OAAO,SAAAC,GAAI,OAAIA,EAAKxB,UAAYR,EAAMH,QAAOxC,IAAI,SAAC2D,EAAOiB,GACtE,OAAQjB,EAAML,SAAW,GAAKxK,EAAAjI,EAAAkI,cAAA,MAAImH,IAAK0E,GACnC9L,EAAAjI,EAAAkI,cAAA,MAAIC,UAAW2K,EAAMP,eAAiB7M,EAAamC,SAAS,GAAK,gBAAkB,MAAnF,IAA2FiL,EAAMP,aAAjG,KACAtK,EAAAjI,EAAAkI,cAAA,UAAKrF,IAAMmR,YAAYlB,EAAML,UAA7B,OACAxK,EAAAjI,EAAAkI,cAAA,cAAM4K,EAAMJ,aAAZ,KACAzK,EAAAjI,EAAAkI,cAAA,UAvCC,SAAC4K,EAAOhB,GAC7B,OACIA,EAAMF,QAAUlM,EAAamC,SAAS,IAAMiK,EAAMmC,SAC9CnC,EAAMF,QAAUlM,EAAamC,SAAS,IAAOiK,EAAMmC,SAE/ChM,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,WAAWQ,QAAS,kBAAMkK,EAAQC,EAAOhB,KAA3D,YADA,0BAGJ,GAgCiBoC,CAAiBpB,EAAOhB,GAA7B,WASxB,OAEI7J,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,KACIJ,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,UAAUQ,QAAS,kBAAMyI,GAAcD,KAAaA,EAAY,qBAAuB,sBACxGA,GAAalJ,EAAAjI,EAAAkI,cAACiM,EAAA,EAAD,CAAWC,iBAAiB,KAA5B,IACVpD,EAAiB7B,IAAI,SAAC2C,EAAOL,GAAR,OACjBxJ,EAAAjI,EAAAkI,cAACiM,EAAA,EAAUE,KAAX,CAAgBC,SAAU7C,EAAOpC,IAAKoC,GAClCxJ,EAAAjI,EAAAkI,cAACiM,EAAA,EAAUI,OAAX,CAAkBpM,UAAU,KAAKQ,QAAS,kBAAM2I,EAAcG,KAA9D,QAA4EK,EAAMH,MAAlF,UAAgGG,EAAMxJ,KAAtG,IA7CA,SAACwJ,GACjB,IAAI0C,EAAW,EACTC,EAAqB3D,EAAiB+C,OAAO,SAAAC,GAAI,OAAIA,EAAKxB,UAAYR,EAAMH,QAGlF,OADA8C,EAAmBtF,IAAI,SAAA2D,GAAK,OAAI0B,IAAa3R,IAAMmR,YAAYlB,EAAML,YAEjExK,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,QAAQsM,EAAmB7P,OAA1C,6BAA4E4P,EAA5E,SAuCyHE,CAAY5C,IACzH7J,EAAAjI,EAAAkI,cAACiM,EAAA,EAAUQ,KAAX,CAAgBxM,UAAWkJ,IAAeI,EAAQ,SAAW,YACzDxJ,EAAAjI,EAAAkI,cAAA,eAAQ4J,EAAM1H,YAAd,KADJ,IACuCoJ,EAAc1B,IAHzD,mBCdL8C,EAvHC,SAAApP,GACZ,IAAAM,EAA8BE,mBAAS,MAAvCC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GACAK,GADAF,EAAA,GAAAA,EAAA,GACkCD,mBAAS,KAA3CI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACgCJ,mBAAS,KAAzCQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOsC,EAAPrC,EAAA,GAAiBsC,EAAjBtC,EAAA,GACAG,EAA4BX,mBAAS,IAArCY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GACQlB,GADRmB,EAAA,GAAAA,EAAA,GAC+EpB,EAAvEC,SAASC,EAA8DF,EAA9DE,aAAcJ,EAAgDE,EAAhDF,GAAIxF,EAA4C0F,EAA5C1F,QAASwS,EAAmC9M,EAAnC8M,QAASuC,EAA0BrP,EAA1BqP,SAAUC,EAAgBtP,EAAhBsP,WACzD3L,EAAW1D,EAAQ2D,UAAU8H,YAGnChK,EAA2DC,cAApDC,EAAPF,EAAOE,SAAUC,EAAjBH,EAAiBG,aAAqBE,GAAtCL,EAA+BI,MAA/BJ,EAAsCK,QAChCsC,GADN3C,EAA8C6N,SAChC,eAAAtN,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAA9H,EAAO8C,GAAP,IAAAqS,EAAAjL,EAAA,OAAAhK,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEP4U,EAAWC,IAAUtL,KAAK9G,IAAMqS,WAAWvS,EAAKwS,SAAU,KAFnDjV,EAAAE,KAAA,EAIS+I,EAASK,QAAQ4L,QAAQ9C,EAAShN,EAAII,EAAamC,SAAS,GAAIlF,EAAK+P,cAAcxI,KAAK,CAAEP,KAAMjE,EAAamC,SAAS,GACxIY,MAAOuM,EAAS5B,SAAU,GAAAC,KAAAC,IAAK,GAAM,IACrCC,SAAU,MAND,OAIPxJ,EAJO7J,EAAA8B,KAOT6S,GAAS,GACT9K,GACAjB,EAAYiB,EAAQI,iBATX,wBAAAjK,EAAAgB,SAAArB,MAAH,gBAAAL,GAAA,OAAAiI,EAAA/H,MAAAC,KAAAC,YAAA,IA6Bd,OACAqI,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,KACFyM,GAAc7M,EAAAjI,EAAAkI,cAAA,eACJD,EAAAjI,EAAAkI,cAAA,yBACAD,EAAAjI,EAAAkI,cAAA,QAAM2B,SAAUxC,EAAawC,IACzB5B,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,QAAf,YACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,UACLH,UAAU,eACVM,MAAO6J,EACP+C,UAAU,EACV5K,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAO+N,SAAWrN,EAAAjI,EAAAkI,cAAA,mCAG3BD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,MAAf,8BACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,KACLH,UAAU,eACVM,MAAOnD,EACP+P,UAAU,EACV5K,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAOjC,IAAM2C,EAAAjI,EAAAkI,cAAA,mCAGtBD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,WAAf,wBACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,UACLH,UAAU,eACVM,MAAO3I,EACPuV,UAAU,EACV5K,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAOzH,SAAWmI,EAAAjI,EAAAkI,cAAA,mCAG3BD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,YAAf,mBACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,WACLH,UAAU,eACVH,KAAK,SACLuN,KAAK,oBACL9K,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAO4N,UAAYlN,EAAAjI,EAAAkI,cAAA,mCAG5BD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,OACXF,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,gBACXF,EAAAjI,EAAAkI,cAAA,SAAOE,QAAQ,gBAAf,sBACAH,EAAAjI,EAAAkI,cAAA,SACII,KAAK,eACLH,UAAU,eACVsC,IAAKrD,EAAS,CAAEsD,UAAU,EAAMC,UAAW,OAE9CpD,EAAOmL,cAAgBzK,EAAAjI,EAAAkI,cAAA,mCAIhCD,EAAAjI,EAAAkI,cAAA,SAAOC,UAAU,iBAAiBH,KAAK,SAASS,MAAM,cAE1DR,EAAAjI,EAAAkI,cAAA,sCAC6BW,MC4B1BqI,EAzIK,SAAA1L,GAClB,IAAAM,EAA4CE,mBAAS,GAArDC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAO0P,EAAPvP,EAAA,GAAuB4K,EAAvB5K,EAAA,GACAE,EAAgDH,mBAAS,IAAzDI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAO6K,EAAP5K,EAAA,GAAyBqP,EAAzBrP,EAAA,GACQX,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aACXyD,EAAW1D,EAAQ2D,UAAUC,OAC7B4H,EAAiBxL,EAAQ2D,UAAU8H,YAEzC3K,EAA+BP,mBAAS,IAAxCQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAOlB,EAAPmB,EAAA,GAAkBkP,EAAlBlP,EAAA,GACAG,EAA0CX,mBAAS,GAAnDY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAAOgP,EAAP/O,EAAA,GAAsBgP,EAAtBhP,EAAA,GACAG,EAAsCf,oBAAS,GAA/CgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAAO8O,EAAP7O,EAAA,GAAoB8O,EAApB9O,EAAA,GACAyE,EAAsCzF,oBAAS,GAA/C0F,EAAAzH,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,GAAOsK,EAAPrK,EAAA,GAAoBsK,EAApBtK,EAAA,GACAlE,oBAAU,WACL9B,EAAamC,SAAS,IACvBoO,KAGF,CAACvQ,EAAamC,SAAS,KAEzB,IAAMuN,EAAO,eAAA3N,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAA9H,EAAO+R,GAAP,IAAAtM,EAAA,OAAAvF,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACdwV,EAAiBhE,EAAMD,OADTzR,EAAAE,KAAA,EAEGb,EAAwBmG,EAAamC,SAAS,IAFjD,QAERvC,EAFQpF,EAAA8B,QAIZ0T,EAAUpQ,GACVwQ,GAAe,IALH,wBAAA5V,EAAAgB,SAAArB,MAAH,gBAAAL,GAAA,OAAAiI,EAAA/H,MAAAC,KAAAC,YAAA,GASPsW,EAAW,eAAAnO,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApG,EAAOqQ,GAAP,IAAA3Q,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EAEC6Q,EAAezH,QAAQ2M,iBAAiBvE,EAAMD,MAA9C,sBAAAxN,OAA2EyN,EAAMD,QAASzH,KAAK,CAChHP,KAAMjE,EAAamC,SAAS,GAC5B0L,SAAU,OAJM,OAEdtS,EAFcW,EAAAI,KAMlBH,QAAQC,IAAI,uEAA8Db,GANxD,wBAAAW,EAAAV,SAAAK,MAAH,gBAAAH,GAAA,OAAA2G,EAAArI,MAAAC,KAAAC,YAAA,GASXwW,EAAU,eAAAvE,EAAA5N,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApF,EAAOqP,GAAP,IAAA3Q,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACE+I,EAASK,QAAQ6M,QAAQpF,EAAenR,QAAS8R,EAAMD,OAAOzH,KAAK,CACpFP,KAAMjE,EAAamC,SAAS,GAC5B0L,SAAU,OAHK,OACbtS,EADawB,EAAAT,KAKjBH,QAAQC,IAAI,kEAAyDb,GALpD,wBAAAwB,EAAAvB,SAAAqB,MAAH,gBAAAlB,GAAA,OAAAwQ,EAAAnS,MAAAC,KAAAC,YAAA,GAQVqW,EAAgB,eAAA/H,EAAAjK,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAAnD,IAAA,IAAAvD,EAAAqV,EAAA7E,EAAA,OAAA1R,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cAAAuE,EAAAvE,KAAA,EACJ+I,EAASK,QACzBC,cACAC,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAHf,OAIvB,IAHI5G,EADmB0D,EAAA3C,MAIV,EAAG,CAGd,IAFA6O,EAAkB5P,GACZqV,EAAc,GACX7E,EAAQ,EAAGA,GAASxQ,EAAQwQ,IACnC6E,EAAY5E,KAAK,CAAEC,MAAOF,EAAOG,MAAO,GAAIqC,UAAU,EAAOsC,gBAAgB,EAAOjO,KAAM,GAAI8B,YAAa,GAAIG,MAAO,KAExH+L,EAAYnH,IAAZ,eAAAqH,EAAAvS,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAgB,SAAAlE,EAAMmO,GAAN,IAAA6E,EAAAC,EAAAC,EAAAC,EAAA,OAAA7W,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACa+I,EAASK,QAAQqN,QAAQjF,EAAMD,OAAOjI,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KADtF,YACR4O,EADQ1S,EAAA/B,MAAA,CAAA+B,EAAA3D,KAAA,gBAGZwR,EAAMA,MAAQ6E,EAHF1S,EAAA3D,KAAA,EAIkB+I,EAASK,QAAQsN,YAAYlF,EAAMD,OAAOjI,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAJ/F,cAIN6O,EAJM3S,EAAA/B,KAAA+B,EAAA3D,KAAA,GAKY+I,EAASK,QAAQuN,SAASnF,EAAMD,OAAOjI,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KALtF,QAKN8O,EALM5S,EAAA/B,KAOT0U,IACD9E,EAAMqC,SAAWyC,IAAoBzF,EAAenR,SAEnD6W,IACKC,EAAgB7T,KAAK8B,MAAM8R,GACjC/E,EAAK3N,OAAAqG,EAAA,EAAArG,QAAAqG,EAAA,EAAArG,CAAA,GAAO2N,GAAUgF,IAExBnB,EAAoB,SAAAzE,GAAgB,SAAA7M,OAAAF,OAAAoO,EAAA,EAAApO,CAAQ+M,GAAR,CAA0BY,MAdlD,yBAAA7N,EAAA7C,SAAAuC,MAAhB,gBAAArB,GAAA,OAAAoU,EAAA9W,MAAAC,KAAAC,YAAA,IAVqB,wBAAA+E,EAAAzD,SAAAsD,MAAH,yBAAA0J,EAAAxO,MAAAC,KAAAC,YAAA,GAuCtB,OAEEqI,EAAAjI,EAAAkI,cAAA,eACED,EAAAjI,EAAAkI,cAAA,yBACAD,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,WAAWQ,QAAS,kBAAMqN,GAAgBD,KAAeA,EAAc,iBAAmB,kBAC3GA,GAAe9N,EAAAjI,EAAAkI,cAACuL,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3C3L,EAAAjI,EAAAkI,cAAA,aACED,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAAA,oBACAD,EAAAjI,EAAAkI,cAAA,kBACAD,EAAAjI,EAAAkI,cAAA,yBACAD,EAAAjI,EAAAkI,cAAA,iBACAD,EAAAjI,EAAAkI,cAAA,2BACAD,EAAAjI,EAAAkI,cAAA,sBAGJD,EAAAjI,EAAAkI,cAAA,aACG8I,EAAiBpM,QAAU4Q,EAAiBxE,EAAiB7B,IAAI,SAACyC,EAAOmC,GAAR,OAChE9L,EAAAjI,EAAAkI,cAAA,MAAImH,IAAK0E,GACP9L,EAAAjI,EAAAkI,cAAA,UAAK0J,EAAMD,OACX1J,EAAAjI,EAAAkI,cAAA,UAAK0J,EAAMtJ,MACXL,EAAAjI,EAAAkI,cAAA,UAAK0J,EAAMxH,aACXnC,EAAAjI,EAAAkI,cAAA,UAAID,EAAAjI,EAAAkI,cAAA,KAAGkI,KAAMwB,EAAMrH,MAAO2E,OAAO,UAA7B,QACJjH,EAAAjI,EAAAkI,cAAA,MAAIC,UAAWzC,EAAamC,SAAS,KAAO+J,EAAMA,MAAO,gBAAkB,MAA3E,IAAmFA,EAAMA,OACzF3J,EAAAjI,EAAAkI,cAAA,UAAKxC,EAAamC,SAAS,KAAO+J,EAAMA,MACxCA,EAAMqC,SACJhM,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,eAAeQ,QAAS,kBAAMuN,EAAYtE,KAA5D,2BACA3J,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,cAAcQ,QAAS,kBAAMyN,EAAWxE,KAA1D,wBACA3J,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,UAAUQ,QAAS,kBAAMyM,EAAQxD,KAAnD,iBAEF3J,EAAAjI,EAAAkI,cAAAD,EAAAjI,EAAAqI,SAAA,QAIPJ,EAAAjI,EAAAkI,cAAA,eACE2N,GAAe5N,EAAAjI,EAAAkI,cAAC8O,EAAD,CACdvR,QAASA,EACTC,aAAcA,EACd4M,QAASqD,EACTrQ,GAAID,EACJvF,QAAS4F,EAAamC,SAAS,GAC/BgN,SAAU,kBAAMiB,GAChBhB,WAAae,KAGjB5N,EAAAjI,EAAAkI,cAAC+O,EAAD,CACExR,QAASA,EACTC,aAAcA,EACdsL,iBAAkBA,MCnIpBpG,EAASC,iBAAO,sCAqLPqM,EAnLK,SAAA1R,GAEhB,IAAQC,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,aACjBI,EAAkDE,mBAAS,IAA3DC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAOqR,EAAPlR,EAAA,GAA0BmR,EAA1BnR,EAAA,GACAE,EAAsDH,mBAAS,IAA/DI,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAOoF,EAAPnF,EAAA,GAA4BoF,EAA5BpF,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GAC8BR,mBAAS,KAAvCY,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAAOhB,EAAPiB,EAAA,GAAgByQ,EAAhBzQ,EAAA,GACAG,EAAkDf,oBAAS,GAA3DgB,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAAOuQ,EAAPtQ,EAAA,GAA0BuQ,EAA1BvQ,EAAA,GAEAyE,EAAgCzF,mBAAS,GAAzC0F,EAAAzH,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,GAAO5F,EAAP6F,EAAA,GAAiB8L,EAAjB9L,EAAA,GACAE,EAAwC5F,mBAAS,MAAjD6F,EAAA5H,OAAAC,EAAA,EAAAD,CAAA2H,EAAA,GAAO6L,EAAP5L,EAAA,GAAqB6L,EAArB7L,EAAA,GACM1C,EAAW1D,EAAQ2D,UAAUC,OAE7B4H,EAAiBxL,EAAQ2D,UAAU8H,YACnCyG,EAAgB,CAAC,QAAS,SAAU,SACpCC,EAAY,CAAC,CAACC,MAAO,EAAGC,KAAM,GAAI,CAACD,MAAO,EAAGC,KAAM,GAAI,CAACD,MAAO,EAAGC,KAAM,IAG9EtQ,oBAAU,WAAM,SAAA8B,IAAA,OAAAA,EAAArF,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KACZ,SAAApG,IAAA,IAAAN,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACyB+I,EAASK,QACzBuO,gBAAgBrS,EAAamC,SAAS,IACtC6B,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAH5C,OACU5G,EADVW,EAAAI,KAIIH,QAAQC,IAAI,YAAab,GACrBA,GAAUA,EAAO2D,QAEjBtE,QAAQ0X,IACJ/W,EAAOkO,IAAP,eAAA1H,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAW,SAAA9H,EAAO2P,GAAP,IAAAyI,EAAAC,EAAAC,EAAAC,EAAA,OAAArY,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmB6Q,EAAezH,QACpC6O,aAAa7I,EAAI9J,EAAamC,SAAS,IACvC6B,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KAHjC,cACDoQ,EADC/X,EAAA8B,KAAA9B,EAAAE,KAAA,EAKwB+I,EAASK,QAAQ0J,sBAAsB1D,GAAI9F,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KALtG,cAKDqQ,EALChY,EAAA8B,KAMPH,QAAQC,IAAI0N,EAAI,iFAAwE0I,EAAiBvS,QAASuS,EAAiBtG,OAN5H1R,EAAAE,KAAA,EAQe+I,EAASK,QAAQuN,SAASvH,GAAI9F,KAAK,CAAEC,KAAMjE,EAAamC,SAAS,KARhF,OAQDsQ,EARCjY,EAAA8B,KAUDoW,EAAYrV,KAAK8B,MAAMsT,GAC7BtW,QAAQC,IAAI,yEAAgEsW,GAC5EhB,EAAqB,SAAAD,GAAiB,SAAAhT,OAAAF,OAAAoO,EAAA,EAAApO,CAAQkT,GAAR,CAAAlT,OAAAqG,EAAA,EAAArG,CAAA,CAA6BqO,QAAS9C,EAAI8I,QAASL,EAAaM,aAAcL,EAAiBtG,MAAOhM,cAAesS,EAAiBvS,SAAYyS,OAZjL,yBAAAlY,EAAAgB,SAAArB,MAAX,gBAAAL,GAAA,OAAAiI,EAAA/H,MAAAC,KAAAC,YAAA,KAgBRiC,QAAQC,IAAI,yBAA0BqV,GAxB1C,wBAAAvV,EAAAV,SAAAK,OADY7B,MAAAC,KAAAC,YAAA,WAAA0J,EAAA5J,MAAAC,KAAAC,WA2BZgK,IACD,IAEHpC,oBAAU,WACN,GAAGiQ,EAAc,CACbe,EAA2Bf,EAAarN,aAExC,IAAMkE,EAAOmJ,EAAalN,MAAMkO,MAAM,KAChCC,EAAUpK,EAAKA,EAAK1J,OAAS,GACnC/C,QAAQC,IAAI,sEAA6D4W,GACpD,eAAA3Q,EAAA9D,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAApF,EAAOoW,GAAP,IAAA1X,EAAA2X,EAAA,OAAA7Y,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACCwK,EAAOiO,OAAOC,IAAIH,EAAK,CAAEI,QAAS,MADnC,OACd9X,EADcwB,EAAAT,KAEpBH,QAAQC,IAAI,gBAAiB+D,GAC7BhE,QAAQC,IAAI,0DAA2D8V,EAAU/R,GAAUgS,MAAOD,EAAU/R,GAAUiS,KAChHc,GAAe,IAAII,aAAcC,OAAOhY,EAAOiY,MAAMC,MAAMvB,EAAU/R,GAAUgS,MAAOD,EAAU/R,GAAUiS,KAGhHT,EAAWuB,GAPS,wBAAAnW,EAAAvB,SAAAqB,MAAH,gBAAAnB,GAAA,OAAA2G,EAAArI,MAAAC,KAAAC,YAAA,EAUrBwZ,CAAgBV,KAIrB,CAACjB,IAGJ,IAAM4B,EAAW,eAAAxH,EAAA5N,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAAlE,EAAO6O,GAAP,IAAAgH,EAAA,OAAAvZ,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAEa6Q,EAAezH,QAAQ+P,kBAAkBjH,GAASpI,KAAK,CAChFP,KAAMjE,EAAamC,SAAS,GAC5BuL,SAAU,EAAAC,KAAAC,IAAI,GAAM,IAAIC,SAAU,MAJtB,OAEV+F,EAFUvV,EAAA/B,KAMhBH,QAAQC,IAAI,kEAAyDwX,GANrD,wBAAAvV,EAAA7C,SAAAuC,MAAH,gBAAApC,GAAA,OAAAwQ,EAAAnS,MAAAC,KAAAC,YAAA,GASX4Y,EAA6B,SAACpO,GAChCvI,QAAQC,IAAI,2FAAkFsI,GAC9FuN,EAAcxI,IAAI,SAAC7G,EAAMyL,GAEjB3J,EAAYoP,SAASlR,KACrBzG,QAAQC,IAAI,0EAAiEiS,GAC7ElS,QAAQC,IAAI,2EAAkEwG,GAE9EkP,EAAYzD,OAKlB0F,EAAW,eAAAvL,EAAAjK,OAAAyD,EAAA,EAAAzD,CAAAlE,EAAAC,EAAA2H,KAAG,SAAAnD,EAAOsN,GAAP,OAAA/R,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,OAChByB,QAAQC,IAAI,sEAA6DgQ,GACpE2F,GAAgBA,IAAiB3F,IAASwF,IAC3CI,EAAgB5F,GAChB0G,EAA2B1G,EAAM1H,aACjCmN,GAAqB,IALT,wBAAA5S,EAAAzD,SAAAsD,MAAH,gBAAApC,GAAA,OAAA8L,EAAAxO,MAAAC,KAAAC,YAAA,GAQjB4H,oBAAU,WAEFiQ,GAAgBA,EAAa7R,gBAAkB2F,IAC/CC,EAAuBiM,EAAa7R,eACpC4S,EAA2Bf,EAAarN,aAExCmN,GAAqB,KAI1B,CAACkC,EAAahC,EAAcH,IAsB/B,OACIrP,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,yBAEAD,EAAAjI,EAAAkI,cAACuL,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB3L,EAAAjI,EAAAkI,cAAA,aACID,EAAAjI,EAAAkI,cAAA,UACID,EAAAjI,EAAAkI,cAAA,oBACAD,EAAAjI,EAAAkI,cAAA,kBACAD,EAAAjI,EAAAkI,cAAA,yBACAD,EAAAjI,EAAAkI,cAAA,8BACAD,EAAAjI,EAAAkI,cAAA,sBAGRD,EAAAjI,EAAAkI,cAAA,aAEQiP,EAAkBhI,IAAI,SAAC2C,EAAO4H,GAAR,OACrBzR,EAAAjI,EAAAkI,cAAA,MAAImH,IAAKqK,GACNzR,EAAAjI,EAAAkI,cAAA,UAAK4J,EAAMQ,SACXrK,EAAAjI,EAAAkI,cAAA,UAAK4J,EAAMxJ,MACXL,EAAAjI,EAAAkI,cAAA,UAAK4J,EAAM1H,aACXnC,EAAAjI,EAAAkI,cAAA,UAAK4J,EAAMwG,SACXrQ,EAAAjI,EAAAkI,cAAA,UAAK4J,EAAMwG,QAAU,EACjBrQ,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,eAAeQ,QAAS,kBAAM0Q,EAAYvH,EAAMQ,WAAlE,aA1CFqH,EA2CmB7H,EAAMyG,aA3CnBqB,EA2CiClU,EAAamC,SAAS,GA1C5E8R,IAASC,EA2CY3R,EAAAjI,EAAAkI,cAAA,UAAQC,UAAU,cAAcQ,QAAS,WAAc,OAAO8Q,EAAY3H,KAA1E,4BACA,6CA7CP,IAAC6H,EAAMC,MAqDvBtC,GAAqBrP,EAAAjI,EAAAkI,cAACiI,EAAD,CAClB1K,QAASA,EACTC,aAAcA,EACdC,QAASA,EACTC,cAAe2F,EACf1F,SAAUA,EACVE,WAvDgB,SAAC8T,GACzBtC,EAAqBsC,QClHdC,EAZE,SAAAtU,GACqBA,EAA1BC,QAA0BD,EAAjBE,aAGjB,OACIuC,EAAAjI,EAAAkI,cAAA,eACID,EAAAjI,EAAAkI,cAAA,wBC8GG6R,GA9GH,SAAAvU,GACV,IAAAM,EAA0DE,mBAAS,CACjEN,aAAc,KACdsU,SAAS,IAFX/T,EAAAhC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAAOmU,EAAPhU,EAAA,GAA8BiU,EAA9BjU,EAAA,GAIQR,EAAYD,EAAZC,QAqBR,OAnBA+B,oBACE,WACE,IAAM2S,EAAc1U,EAAQ2U,MAAMC,UAAU,WAE1C,IAAM3U,EAAeD,EAAQ2U,MAAME,WAE/B5U,EAAa6U,cAAcC,aAC7BN,EAAyB,CACvBxU,aAAcA,EACdsU,SAAS,MAIf,OAAO,WACLG,MAGJ,CAAC1U,EAAQ2U,MAAOH,IAEXA,EAAsBD,QAC3B/R,EAAAjI,EAAAkI,cAAA,OAAKuS,MAAM,UACTxS,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAAA,KACEkI,KAAK,uBACLlB,OAAO,SACPwL,IAAI,uBAHN,0DAFJ,sCAaAzS,EAAAjI,EAAAkI,cAACyS,EAAA,EAAD,KACE1S,EAAAjI,EAAAkI,cAAA,WACED,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,cACbF,EAAAjI,EAAAkI,cAAA,OACEQ,IACE,4BAGJT,EAAAjI,EAAAkI,cAAA,0BAEFD,EAAAjI,EAAAkI,cAAA,WACAD,EAAAjI,EAAAkI,cAAA,WACAD,EAAAjI,EAAAkI,cAAA,WAEAD,EAAAjI,EAAAkI,cAAA,OAAKC,UAAU,QACbF,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAACyS,EAAA,EAAD,CAAMxS,UAAU,OAAOyS,GAAG,KAA1B,iBAEF3S,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAACyS,EAAA,EAAD,CAAMxS,UAAU,OAAOyS,GAAG,WAA1B,iBAEF3S,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAACyS,EAAA,EAAD,CAAMxS,UAAU,OAAOyS,GAAG,gBAA1B,0BAEF3S,EAAAjI,EAAAkI,cAAA,UACED,EAAAjI,EAAAkI,cAACyS,EAAA,EAAD,CAAMxS,UAAU,OAAOyS,GAAG,aAA1B,eAKN3S,EAAAjI,EAAAkI,cAAA,WACAD,EAAAjI,EAAAkI,cAAA,WACAD,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,KACE5S,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,CAAOC,OAAK,EAACxM,KAAK,KAChBrG,EAAAjI,EAAAkI,cAAC6S,EAAD,CACEtV,QAASA,EACTC,aAAcuU,EAAsBvU,gBAGxCuC,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,CAAOvM,KAAK,WACVrG,EAAAjI,EAAAkI,cAAC8S,EAAD,CACEvV,QAASA,EACTC,aAAcuU,EAAsBvU,gBAGxCuC,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,CAAOvM,KAAK,gBACVrG,EAAAjI,EAAAkI,cAAC+S,EAAD,CACExV,QAASA,EACTC,aAAcuU,EAAsBvU,gBAGxCuC,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,CAAOvM,KAAK,kBACVrG,EAAAjI,EAAAkI,cAACgT,EAAD,CACEzV,QAASA,EACTC,aAAcuU,EAAsBvU,gBAGxCuC,EAAAjI,EAAAkI,cAAC2S,EAAA,EAAD,CAAOvM,KAAK,aACVrG,EAAAjI,EAAAkI,cAACiT,EAAD,CACE1V,QAASA,EACTC,aAAcuU,EAAsBvU,kDCnG5C9C,GAAO,IAAIwY,IAAK3a,OAAOmC,KAAKyY,iBAG5BvQ,GAAU,CACd1B,UAAW,CACT,CACEkS,aAAc,SACdC,aAAc,IAAI3Y,GAAK4Y,IAAIC,SAASpS,GAAOqS,IAAK,+CAElD,CACEJ,aAAc,cACdC,aAAc,IAAI3Y,GAAK4Y,IAAIC,SAASvK,GAAYwK,IAAK,gDAGzD9Y,KAAM,CACJ+Y,OAAO,EAEPC,eAAgB,IAAIR,IAAK3a,OAAOmC,KAAKyY,kBAGvCQ,MAAO,CACLhU,SAAU,MAKRpC,GAAU,IAAIqW,WAAQhR,IAE5BiR,IAASC,OAAO/T,EAAAjI,EAAAkI,cAAC+T,GAAD,CAAKxW,QAASA,KAAYyW,SAASC,eAAe","file":"static/js/main.3a0f0ca2.chunk.js","sourcesContent":["import { encrypt } from 'eth-sig-util'\nimport web3 from 'web3'\nvar EthCrypto = require('eth-crypto');\nexport async function getPublicKeyViaMetamask(address) {\n    return new Promise((resolve, reject) => {\n        window.ethereum.sendAsync(\n            {\n                jsonrpc: '2.0',\n                method: 'eth_getEncryptionPublicKey',\n                params: [address],\n                // from: address,\n            },\n            function (error, encryptionpublickey) {\n                if (!error) {\n                    resolve(encryptionpublickey.result)\n                } else {\n                    reject(error)\n                }\n            }\n        )\n    })\n}\n\nexport async function metamaskEncryptData(message, pubKey) {\n    console.log(message)\n    const encrypted = await EthCrypto.encryptWithPublicKey(\n        pubKey, // publicKey\n        message // message\n    );\n    console.log(\"🚀 ~ file: metamask.js ~ line 30 ~ metamaskEncrypt ~ encrypted\", encrypted)\n\n    const encryptedMessage = EthCrypto.cipher.stringify(\n        encrypted\n    )\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\nexport async function metamaskEncrypt(message, pubKey) {\n    console.log(\"🚀 ~ file: metamask.js ~ line 41 ~ metamaskEncrypt ~ pubKey\", pubKey)\n    console.log(message)\n\n    const enc = encrypt(\n        pubKey,\n        { data: message },\n        'x25519-xsalsa20-poly1305'\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 31 ~ metamaskEncrypt ~ enc\", enc)\n    const encryptedMessage = web3.utils.toHex(\n        JSON.stringify(\n            enc\n        )\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 54 ~ metamaskEncrypt ~ encryptedMessage\", encryptedMessage)\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\n\nvar handle = (promise) => {\n    return promise\n        .then(data => ([data, undefined]))\n        .catch(error => Promise.resolve([undefined, error]));\n}\n\nexport async function decryptPrivateKey(encryptedMessage, account) {\n    //console.log(`encryptedMessage: ${encryptedMessage}`)\n    const [decryptedMessage, decryptErr] = await handle(window.ethereum.request({\n        method: 'eth_decrypt',\n        params: [encryptedMessage, account],\n    }));\n\n    if (decryptErr) { console.error(decryptErr.message) }\n    else {\n        console.log(`decryptedMessage: ${decryptedMessage}`)\n        return decryptedMessage\n    }\n}\n\nexport async function decryptUriFile(encryptedMessage, privateKey) {\n    try{\n        console.log(`encryptedMessage.length: ${encryptedMessage.length}`)\n        const parsedEncInfo = EthCrypto.cipher.parse(encryptedMessage)\n        const message = await EthCrypto.decryptWithPrivateKey(\n            privateKey, parsedEncInfo)\n        console.log(\"🚀 ~ file: metamask.js ~ line 85 ~ decryptMessage ~ message\", message)\n        return message;\n    } catch(err) {\n        console.log('err :>> ', err);\n    }\n    \n}\n","import EthCrypto from 'eth-crypto';\nimport { metamaskEncrypt, getPublicKeyViaMetamask } from './metamask';\n\nexport async function getAccount() {\n    return await window.ethereum.selectedAddress\n}\n\nexport function getNewAccount() {\n    return EthCrypto.createIdentity();\n}\n\n\nexport async function encryptData(publicKey, data) {\n    const pk = await getPublicKeyViaMetamask(publicKey)\n    console.log(\"🚀 ~ file: cypher.js ~ line 19 ~ encrypt ~ pk\", pk)\n    return await metamaskEncrypt(data, pk)\n}\n\nexport async function decrypt(cMessage) {\n    const cyperObj = EthCrypto.cipher.parse(cMessage);\n    return await EthCrypto.decryptWithPrivateKey(\n        'bdb335a3c6dceda42eb92e6479f326d68d86bdf5237c41ff1eedf961813d2eb4', // privateKey\n        cyperObj // encrypted-data\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst SetDecrypt = props => {\n\n    const { drizzle, drizzleState, encData, encPrivateKey, typeData, showDialod } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decPk, setDecPk] = useState(false);\n    const [decInfoShow, setDecInfoShow] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decPk) {\n            async function getDecryptMessage() {\n                if (encPrivateKey !== '') {\n                    const dm = await decryptPrivateKey(encPrivateKey, drizzleState.accounts[0]);\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                    setDecInfoShow(true)\n                }\n            }\n            getDecryptMessage()\n\n        }\n    }, [decPk, encPrivateKey]);\n\n    useEffect(() => {\n        if (decryptedPK && encData) {\n            async function getDecryptMessage() {\n                const dm = await decryptUriFile(encData, decryptedPK);\n                setDecryptedInfo(dm)\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decryptedPK, encData]);\n\n    // const onFileChange = (event) => {\n    //     let file = event.target.files[0];\n\n    //     let fileReader = new FileReader();\n    //     fileReader.readAsText(file);\n\n    //     fileReader.onload = (event) => {\n    //         let fileAsText = event.target.result;\n    //         setEncryptedInfo(fileAsText);\n    //     };\n    // };\n\n    const showDecryptByTypeData = (type) => {\n        return (\n            <>\n                {type == '0' && <div name=\"decrypredData\"\n                    className=\"u-full-width\"><textarea rows={20} cols={80} value={decryptedInfo}   /></div>}\n                {type == '1' && <div><img name=\"decrypredData\"\n                    className=\"u-full-width\" src={decryptedInfo} />\n                </div>}\n                {\n                    type == '2' && <div name=\"decrypredData\"\n                    className=\"u-full-width\"><textarea rows={40} cols={80} value={decryptedInfo}   /></div>\n                }\n            </>\n        )\n    }\n\n    return (\n        <section>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    {showDecryptByTypeData(typeData)}\n\n                </div>\n            </div>\n            <button className=\"btn-upload\" onClick={() => setDecPk(!decPk)} >Decrypt Data</button>\n            {/* <button className=\"btn-upload\" onClick={() => showDialod(false)} >close</button> */}\n        </section>\n    );\n};\nexport default SetDecrypt;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst MintNFT = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const [countTokens, setCountTokens] = useState(0);\n    const { drizzle, drizzleState, ipfsLink, encryptedKey, typeData } = props;\n    const contract = drizzle.contracts.EncNft;\n\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .totalSupply()\n                .call({ from: drizzleState.accounts[0] });\n                console.log('result !== countTokens :>> ', result, countTokens);\n            if (+result !== countTokens) {\n                const numResult = +result \n                console.log(\"🚀 ~ file: MintNFT.js ~ line 28 ~ countOfTokens ~ numResult\", numResult)\n                setCountTokens(numResult)\n                console.log('countTokens :>> ', countTokens);\n            }\n            \n\n        }\n        countOfTokens()\n    }, [])\n    const onSubmit = async (data) => {\n\n        const stringUri = setUri(data);\n       \n        console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.mint(drizzleState.accounts[0], countTokens + 1, stringUri, encryptedKey).send({ from: drizzleState.accounts[0] })\n        if (resMint) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 21 ~ onSubmit ~ resMint\", resMint)\n            setHashMint(resMint.transactionHash)\n        }\n    };\n    const approveNft = async () => {\n        console.log('countTokens :>> ', countTokens);\n        // countTokens ???\n        const res = await contract.methods.approve(drizzle.contracts.MarketPlace.address, countTokens).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        if (res) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 45 ~ approveNft ~ res\", res)\n            getTxStatus()\n        }\n    }\n        const setUri = data => {\n        \n            console.log('typeData :>> ', typeData);\n            if(typeData == 0) {\n                data.description += ' #text'\n            }\n            if(typeData == 1) {\n                data.description += ' #image'\n            }\n\n            if(typeData == 2) {\n                data.description += ' #file'\n            }\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 56 ~ data\", data)\n            const uri = { ...data, image: ipfsLink }\n            return JSON.stringify(uri)\n        }; \n\n        const getTxStatus = () => {\n            // get the transaction states from the drizzle state\n            const { transactions, transactionStack } = drizzleState;\n\n            // get the transaction hash using our saved `stackId`\n            const txHash = transactionStack[stackId];\n\n            // if transaction hash does not exist, don't display anything\n            if (!txHash) return null;\n\n            // otherwise, return the transaction status\n            return `Transaction status: ${transactions[txHash] &&\n                transactions[txHash].status}`;\n        };\n\n        return (\n            <section>\n                <div>Mint new NFT to owner address</div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Name</label>\n                            <input\n                                name=\"name\"\n                                className=\"u-full-width\"\n                                placeholder=\"Name of your NFT\"\n                                ref={register({ required: true, maxLength: 42 })}\n                            />\n                            {errors.name && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Description of the NFT</label>\n                            <input\n                                name=\"description\"\n                                className=\"u-full-width\"\n                                placeholder=\"description data\"\n                                ref={register({ required: false, maxLength: 8000 })}\n                            />\n                            {errors.description && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n\n                    <input className=\"btn-upload\" type=\"submit\" value=\"Mint\" />\n                </form>\n                <div>\n                    Hash mint transaction:  {hashMint}\n                </div>\n                {/* <TransferNFT drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    ipfsLink={ipfsLink} /> */}\n                {/* <button onClick={() => approveNft()}>Approve to MarketPlace contract</button> */}\n            </section>\n        );\n    };\n\n    export default MintNFT;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { encrypt, encryptData, getAccount, getNewAccount } from \"./cypher\";\nimport SetDecrypt from \"./SetDecrypt\";\nimport { create } from 'ipfs-http-client'\nimport { metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\nimport MintNFT from \"./MintNFT\";\nimport imageToBase64 from 'image-to-base64/browser';\n\nimport { Dropdown, FloatingLabel, Form, FormControl, InputGroup, SplitButton, Button } from \"react-bootstrap\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\nconst options = [\n    { value: 0, label: 'text' },\n    { value: 1, label: 'image' },\n    { value: 2, label: 'file' }\n]\n\nconst UploadIPFS = props => {\n    const [fileUrl, updateFileUrl] = useState(``)\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [encryptedData, setEncryptedData] = useState('');\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [customerAddress, setCustomerAddress] = useState('');\n    const { drizzle, drizzleState } = props;\n    const [cid, setCid] = useState('')\n    const [textFromIpfsFIle, setTextFromIpfsFIle] = useState('')\n    const [newPrivateKey, setNewPrivateKey] = useState('')\n    const [newPublicKey, setNewPublicKey] = useState('')\n    const [newAddress, setNewAddress] = useState('')\n    const [creatorAddress, setCreatorAddress] = useState('')\n    const [typeDataToEncrypt, setTypeDataToEncrypt] = useState(0)\n    const [selectedOption, setSelectedOption] = useState(0);\n    const [choisedFile, setChoisedFile] = useState('')\n\n    const [textArea, setTextArea] = useState('')\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    async function onChange(e) {\n        const file = e.target.files[0]\n        try {\n            const added = await client.add(file)\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            updateFileUrl(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n\n    const onSubmit = data => {\n        console.log(\"🚀 ~ file: UploadIPFS.js ~ line 48 ~ data\", data)\n        setValue(data);\n    };\n\n    const encryptPrivateKeyForNFTFile = async () => {\n\n        const encData = await encryptData(creatorAddress, newPrivateKey)\n        if (encData !== '') {\n            setEncryptedPrivateKey(encData)\n        }\n\n    };\n\n    const setValue = async value => {\n        console.log('clearData :>> ', clearData);\n        setClearData(value.dataToEncrypt);\n        setCustomerAddress(value.addressToEncrypt)\n\n        const encData = await metamaskEncryptData(value.dataToEncrypt || clearData || textArea, newPublicKey)\n        if (encData !== '') {\n            setEncryptedData(encData)\n        }\n    };\n\n    const downloadToFile = (content, filename, contentType) => {\n        const a = document.createElement('a');\n        const file = new Blob([content], { type: contentType });\n\n        a.href = URL.createObjectURL(file);\n        a.download = filename;\n        a.click();\n\n        URL.revokeObjectURL(a.href);\n    };\n\n    useEffect(async () => {\n        const address = await getAccount()\n        if (address) {\n            setCreatorAddress(address)\n        }\n\n    }, [getAccount, setCreatorAddress])\n\n    useEffect(() => {\n        if (encryptedData && creatorAddress) {\n            async function sendEncryptInfoToIPFS() {\n                // downloadToFile(encryptedData, `${customerAddress}.txt`, 'text/plain');\n                const added = await client.add(encryptedData)\n                setCid(added.path)\n                const url = `https://ipfs.infura.io/ipfs/${added.path}`\n                updateFileUrl(url)\n            }\n\n            sendEncryptInfoToIPFS();\n        }\n\n\n    }, [encryptedData, creatorAddress])\n\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n        //setChoisedFile(file.name)\n        console.log('selectedOption :>> ', selectedOption);\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setClearData(fileAsText);\n        };\n        fileReader.onerror = (error) => console.error('Error: ', error);\n\n    };\n\n    const getPath = () => {\n        var inputName = document.getElementById('file1');\n        var imgPath;\n\n        imgPath = inputName.value;\n        alert(imgPath);\n        return imgPath;\n    }\n\n    const getInfoFromIPFS = async () => {\n        if (fileUrl) {\n            const result = await client.object.get(cid, { timeout: 30000 })\n            const string = new TextDecoder().decode(result.Data).slice(0, -3);\n            const cuttedString = string.slice(5)\n            setTextFromIpfsFIle(cuttedString)\n        }\n    }\n\n    const generateKeys = () => {\n        const newIdentity = getNewAccount()\n        setNewPrivateKey(newIdentity.privateKey)\n        setNewPublicKey(newIdentity.publicKey)\n        setNewAddress(newIdentity.address)\n    }\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    const handleChange = (value, selectOptionSetter) => {\n        selectOptionSetter(value)\n        // handle other stuff like persisting to store etc\n    }\n    const handleTextAreaChange = (event) => {\n        if (event && event.target.value) {\n            setTextArea(event.target.value)\n            setClearData(event.target.event);\n        }\n    }\n    function imageToBase64(img)\n    {\n        var canvas, ctx, dataURL, base64;\n        canvas = document.createElement(\"canvas\");\n        ctx = canvas.getContext(\"2d\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        dataURL = canvas.toDataURL(\"image/png\");\n        base64 = dataURL.replace(/^data:image\\/png;base64,/, \"\");\n        return base64;\n    }\n    return (\n        <div className=\"App\">\n            <h1>Mint encoded NFT</h1>\n            <section>\n                <h2>Step 1: create private key for the NFT</h2>\n\n                <button className=\"btn-upload\" onClick={() => generateKeys()}>Generate keys for encryption a data</button>\n                <div>pk: {newPrivateKey}</div>\n                <div>pubkey: {newPublicKey}</div>\n                <div>add: {newAddress}</div>\n                <div>Creator address{creatorAddress}</div>\n                {newPrivateKey && <h2>Step 2: Encrypt private key via the creator public key</h2>}\n                {newPrivateKey && <button className=\"btn-upload\" onClick={() => encryptPrivateKeyForNFTFile()}>Encrypt private key</button>}\n                <div>Encrypted private key</div>\n                <div>{encryptedPrivateKey}</div>\n                <br></br>\n\n                {encryptedPrivateKey && <h2>Step 3: Encrypt data via generated public key for NFT URI and upload it to IPFS </h2>}\n                {encryptedPrivateKey &&\n\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <label>Choice type data</label>\n                        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlSelect\">\n                            <Form.Select aria-label=\"Floating label select example\" value={selectedOption}\n                                onChange={e => handleChange(e.target.value, setSelectedOption)}>\n                                {options.map(o => (\n                                    <option key={o.value} value={o.value}>{o.label}</option>\n                                ))}\n                            </Form.Select>\n                        </Form.Group>\n                        {selectedOption === '1' ? <><Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                            <label>Paste base64 string of the image</label>\n\n                            <textarea rows={8} value={textArea} onChange={handleTextAreaChange} />\n                            <div>Your image must be less than 1Mb for the service below</div>\n                        </Form.Group>\n                            {\n                                selectedOption === '1' && <input type=\"button\" className=\"btn-upload\" onClick={() => window.open(\"https://www.base64-image.de/\", \"_blank\")} value=\"toBase64\" />\n                            }\n                        </> :\n                            <>{\n                                selectedOption === '0' && <div className=\"row\">\n                                    <div className=\"u-full-width\">\n                                        <label htmlFor=\"mURI\">Data for encryption</label>\n                                        <input\n                                            name=\"dataToEncrypt\"\n                                            className=\"u-full-width\"\n                                            placeholder=\"string data\"\n                                            ref={register({ required: false, maxLength: 80000 })}\n                                        />\n                                        {errors.dataToEncrypt && <span>Use a valid input</span>}\n                                    </div>\n                                </div>\n                            }\n                                {\n                                    selectedOption === '2' && <div className=\"row\">\n                                        <div className=\"u-full-width\">\n                                            <input type=\"file\" id=\"upload\"\n                                                name=\"fileToEncrypt\"\n                                                className=\"u-full-width\"\n                                                onChange={onFileChange}\n                                                hidden />\n                                            <label className=\"label-upload\" htmlFor=\"upload\">Choose file</label>                                           \n                                            {errors.fileToEncrypt && <span>Use a valid input</span>}\n                                            {choisedFile}\n                                        </div>\n                                    </div>}\n                            </>\n                        }\n                        {clearData !== '' && <input className=\"btn-upload\" type=\"submit\" value=\"Push encoded data to IPFS\" />}\n                    </form>\n                }\n                {fileUrl && <h2>Step 4: Encrypt data via generated public key for NFT URI </h2>}\n                {fileUrl && <SetDecrypt\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    encData={encryptedData}\n                    encPrivateKey={encryptedPrivateKey}\n                    typeData={selectedOption}\n                />}\n            </section>\n            <a href={fileUrl} target=\"_blank\">{fileUrl}</a>\n            {fileUrl && <h2>Step 5: Encrypt data via generated public key for NFT URI </h2>}\n            {fileUrl && <MintNFT\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                ipfsLink={fileUrl}\n                encryptedKey={encryptedPrivateKey}\n                typeData={selectedOption}\n            />\n            }\n        </div>\n    );\n};\n\nexport default UploadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {  decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst DownloadIPFS = props => {\n\n    const { drizzle, drizzleState, encData } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decMessage) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptPrivateKey(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage]);\n\n    useEffect(() => {\n        if (decryptedInfo) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptUriFile(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedInfo(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage, decryptedInfo]);\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setEncryptedInfo(fileAsText);\n        };\n    };\n\n\n\n    return (\n        <section>\n            <h2>Download a file from IPFS</h2>\n            <div>{encryptedInfo}</div>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    <div\n                        name=\"decrypredData\"\n                        className=\"u-full-width\"\n\n                    >{decryptedInfo}</div>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"u-full-width\">\n                    <label htmlFor=\"mURI\">Read the file and decrypt</label>\n                    <input\n                        type=\"file\"\n                        name=\"fileToDecrypt\"\n                        className=\"u-full-width\"\n                        onChange={onFileChange}\n                    />\n                    {errors.fileToDecrypt && <span>Use a valid input</span>}\n                </div>\n            </div>\n            <button onClick={() => setDecryptMessage(!decMessage)} >DECRYPT</button>\n\n<h2>Decrypted PK</h2>\n<div>{decryptedPK}</div>\n<h2>Decrypted file info</h2>\n<div>{decryptedInfo}</div>\n        </section>\n    );\n};\n\nexport default DownloadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Accordion } from 'react-bootstrap';\nimport { decryptPrivateKey, getPublicKeyViaMetamask, metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\n\nimport { BigNumber, ethers, utils } from 'ethers'\n\nconst BuyersBoard = props => {\n    const [dataKey, setDataKey] = useState(null);\n    const [totalAmountNft, setTotalAmountNft] = useState(0);\n    const [nftBuyersDetails, setNftBuyersDetails] = useState([]);\n    const [publicKey, setPubKey] = useState('');\n    const [chosenTokenId, setChosenTokenId] = useState(0);\n    const { drizzle, drizzleState, nftOwnersDetails } = props;\n    const contract = drizzle.contracts.EncNft;\n    const contractMarket = drizzle.contracts.MarketPlace;\n\n    const [showBoard, setShowBoard] = useState(false);\n    const [buyerIndex, setBuyerIndex] = useState(-1);\n    useEffect(() => {\n        getBuyers();\n    }, []);\n\n\n    const makeBet = async (owner) => {\n        setChosenTokenId(owner.idNft)\n        const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n        if (pk) {\n            setPubKey(pk)\n        }\n    }\n    const getBuyers = async () => {\n        let result = await contract.methods\n            .totalSupply()\n            .call({ from: drizzleState.accounts[0] });\n        if (result > 0) {\n            setTotalAmountNft(result)\n            const tokensArray = []\n            for (let index = 1; index <= result; index++) {\n                tokensArray.push({ idNft: index, owner: '', name: '', description: '', image: '' })\n            }\n            tokensArray.map(async token => {\n                try {\n                    const countBuyers = await contractMarket.methods.getCountBuyers(token.idNft).call({ from: drizzleState.accounts[0] })\n\n                    if (countBuyers > 0) {\n                        for (let index = 0; index < countBuyers; index++) {\n                            const buyersMakeBet = await contractMarket.methods.buyersBoard(token.idNft, index).call({ from: drizzleState.accounts[0] });\n                            if (buyersMakeBet) {\n                                setNftBuyersDetails(nftBuyersDetails => [...nftBuyersDetails, {\n                                    idToken: token.idNft, buyerAddress: buyersMakeBet[0], buyerPubKey: buyersMakeBet[1],\n                                    buyerBet: buyersMakeBet[2], goalPurchase: buyersMakeBet[3]\n                                }])\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 72 ~ getBuyers ~ error\", error)\n                }\n            })\n        }\n    };\n\n    const sellNft = async (buyer, token) => {\n        if (token.owner === drizzleState.accounts[0]) {\n            // enc-decrypt pryvateKey - enc via buyerPubKey\n            const ownerOfTokenInfo = await contract.methods.getTokenInfoLastOwner(token.idNft).call({ from: drizzleState.accounts[0] });\n\n            const lastEncryptedPrivateKey = ownerOfTokenInfo.encData\n\n            const decryptedPrivateKey = await decryptPrivateKey(lastEncryptedPrivateKey, drizzleState.accounts[0])\n\n            if (decryptedPrivateKey) {\n                const encData = await metamaskEncrypt(decryptedPrivateKey, buyer.buyerPubKey)\n                if (encData !== '') {\n                    const sellInfo = await contractMarket.methods.acceptRateAndTransferToken(token.idNft, buyer.buyerAddress, encData).send({ from: drizzleState.accounts[0], gasPrice: 10 * 10 ** 10, gasLimit: 600000 })\n\n                }\n            }\n\n\n        }\n    }\n\n    const getSellerActions = (buyer, token) => {\n        return (\n            token.owner === drizzleState.accounts[0] && token.approved ?\n                token.owner === drizzleState.accounts[0] && !token.approved ?\n                    'Need to approve to sell' :\n                    <button className=\"btn-sell\" onClick={() => sellNft(buyer, token)}>Sell NFT</button > :\n\n                ''\n        )\n    }\n    const CountBuyers = (token) => {\n        let totalSum = 0;\n        const totalBuyersOfToken = nftBuyersDetails.filter(item => item.idToken === token.idNft)\n\n        totalBuyersOfToken.map(buyer => totalSum += +utils.formatEther(buyer.buyerBet))\n        return (\n            <div className=\"info\">{totalBuyersOfToken.length} buyers,  Total sum bets: {totalSum} ETH </div>\n\n        )\n    }\n    const BuyersOfToken = (token) => {\n        // own address make color red\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th> Buyer address </th>\n                        <th> Buyer rate </th>\n                        <th> Why do I need it </th>\n                        <th> Action </th>\n                    </tr>\n                </thead>\n                <tbody>{\n                    nftBuyersDetails.filter(item => item.idToken === token.idNft).map((buyer, ind) => {\n                        return (buyer.buyerBet > 0 && <tr key={ind}>\n                            <td className={buyer.buyerAddress === drizzleState.accounts[0] ? 'owner-address' : null}> {buyer.buyerAddress} </td>\n                            <td>{utils.formatEther(buyer.buyerBet)}ETH</td>\n                            <td> {buyer.goalPurchase} </td>\n                            <td>{getSellerActions(buyer, token)} </td>\n                        </tr>)\n                    })\n                }</tbody>\n            </Table>)\n    }\n\n\n\n    return (\n        // if it exists, then we display its value\n        <>\n            <button className=\"btn-bet\" onClick={() => setShowBoard(!showBoard)}>{showBoard ? 'Hide Buyers Boards' : 'Show Buyers Boards'}</button>\n            {showBoard && <Accordion defaultActiveKey=\"0\" > {\n                nftOwnersDetails.map((token, index) =>\n                    <Accordion.Item eventKey={index} key={index} >\n                        <Accordion.Header className=\"ah\" onClick={() => setBuyerIndex(index)}> ID: {token.idNft} name: {token.name} {CountBuyers(token)}</Accordion.Header>\n                        <Accordion.Body className={buyerIndex === index ? \"active\" : \"inactive\"} >\n                            <div > {token.description} </div> {BuyersOfToken(token)}\n                        </Accordion.Body> </Accordion.Item >\n                )\n            }\n\n            </Accordion>}\n        </>\n    );\n};\n\nexport default BuyersBoard;","import React, { useState, useEffect } from \"react\";\nimport { useForm, useFormContext } from \"react-hook-form\";\nimport { BigNumber, ethers, utils } from 'ethers' \n\nconst BetForm = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const { drizzle, drizzleState, pk, address, idToken, showForm, isShowForm  } = props;\n    const contract = drizzle.contracts.MarketPlace;\n\n\n    const {register, handleSubmit, watch, errors, setFocus } = useForm();\n    const onSubmit = async (data) => {\n        // const stringUri = setUri(data);\n        const bnValue  = BigNumber.from(utils.parseUnits(data.valueBet, 18))\n        // console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.makeBet(idToken, pk, drizzleState.accounts[0], data.goalPurchase).send({ from: drizzleState.accounts[0], \n            value: bnValue, gasPrice: 10 * 10 ** 10,\n            gasLimit: 400000})\n            showForm(false)\n        if (resMint) {\n            setHashMint(resMint.transactionHash)\n        }\n    };\n\n  \n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    return (\n    <>\n {isShowForm && <section>\n            <div>Bet params</div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Id token</label>\n                        <input\n                            name=\"tokenId\"\n                            className=\"u-full-width\"\n                            value={idToken}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.tokenId && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"pk\">Public key of your account</label>\n                        <input\n                            name=\"pk\"\n                            className=\"u-full-width\"\n                            value={pk}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.pk && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"address\">Your account address</label>\n                        <input\n                            name=\"address\"\n                            className=\"u-full-width\"\n                            value={address}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.address && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"valueBet\">Your bet in ETH</label>\n                        <input\n                            name=\"valueBet\"                            \n                            className=\"u-full-width\"\n                            type=\"number\"\n                            step=\"0.000000000000001\" \n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.valueBet && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"goalPurchase\">Why do I need it? </label>\n                        <input\n                            name=\"goalPurchase\"\n                            className=\"u-full-width\"\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.goalPurchase && <span>Use a valid input</span>}\n                    </div>\n                </div>\n\n                <input className=\"button-primary\" type=\"submit\" value=\"Make Bet\" />\n            </form>\n            <div>\n                Hash mint transaction:  {hashMint}\n            </div>             \n        </section>}\n    </>\n      \n    );\n};\n\nexport default BetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Table } from 'react-bootstrap'; \nimport BuyersBoard from \"./BuyersBoard\";\nimport BetForm from \"./BetForm\";\nimport { getPublicKeyViaMetamask } from \"./metamask\"; \n\nconst MarketPlace = props => {\n  const [totalAmountNft, setTotalAmountNft] = useState(0);\n  const [nftOwnersDetails, setNftOwnersDetails] = useState([]);\n  const { drizzle, drizzleState } = props;\n  const contract = drizzle.contracts.EncNft;\n  const contractMarket = drizzle.contracts.MarketPlace;\n\n  const [publicKey, setPubKey] = useState('');\n  const [chosenTokenId, setChosenTokenId] = useState(0);\n  const [showBetForm, setShowBetForm] = useState(false);\n  const [showSellers, setShowSellers] = useState(false);\n  useEffect(() => {\n    if(drizzleState.accounts[0]) {\n      fillOwnersTokens();\n    }\n    \n  },[drizzleState.accounts[0]]);\n\n  const makeBet = async (owner) => {\n    setChosenTokenId(owner.idNft)\n    const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n    if (pk) {\n      setPubKey(pk)\n      setShowBetForm(true)\n    }\n  }\n\n  const transferNFT = async (owner) => {\n    // need to add seller description in UI\n    let result = await contractMarket.methods.moveTokenForSell(owner.idNft, `Advertise of token ${owner.idNft}`).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 30 ~ transferNFT ~ result\", result)\n  }\n\n  const approveNFT = async (owner) => {\n    let result = await contract.methods.approve(contractMarket.address, owner.idNft).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 51 ~ result ~ result\", result)\n  }\n\n  const fillOwnersTokens = async () => {\n    let result = await contract.methods\n      .totalSupply()\n      .call({ from: drizzleState.accounts[0] });\n    if (result > 0) {\n      setTotalAmountNft(result)\n      const ownersArray = []\n      for (let index = 1; index <= result; index++) {\n        ownersArray.push({ idNft: index, owner: '', approved: false, isTokenForSell: false, name: '', description: '', image: '' })\n      }\n      ownersArray.map(async owner => {\n        const ownerAddress = await contract.methods.ownerOf(owner.idNft).call({ from: drizzleState.accounts[0] });\n        if (ownerAddress) {\n          owner.owner = ownerAddress\n          const approvedAddress = await contract.methods.getApproved(owner.idNft).call({ from: drizzleState.accounts[0] });\n          const tokenInfo = await contract.methods.tokenURI(owner.idNft).call({ from: drizzleState.accounts[0] });\n         \n          if(approvedAddress) {\n            owner.approved = approvedAddress === contractMarket.address\n          }\n          if(tokenInfo) {\n            const tokenInfoJson = JSON.parse(tokenInfo)\n            owner = {...owner, ...tokenInfoJson};\n          }\n          setNftOwnersDetails(nftOwnersDetails => [...nftOwnersDetails, owner])\n        }\n      })\n    }\n\n  };\n\n  const getTxStatus = () => {\n    const { transactions, transactionStack } = drizzleState;\n    // const txHash = transactionStack[stackId];\n    // if (!txHash) return null; \n    // return `Transaction status: ${transactions[txHash] &&\n    //   transactions[txHash].status}`;\n  };\n\n  return (\n    // if it exists, then we display its value\n    <section>\n      <h2>MarketPlace</h2>\n      <button className=\"btn-sell\" onClick={() => setShowSellers(!showSellers)}>{showSellers ? 'Hide NFT Board' : 'Show NFT Board'}</button>\n      {showSellers && <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID NFT</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>URI</th>\n            <th>Owner address</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {nftOwnersDetails.length == totalAmountNft ? nftOwnersDetails.map((owner, ind) =>\n            <tr key={ind}>\n              <td>{owner.idNft}</td>\n              <td>{owner.name}</td>\n              <td>{owner.description}</td>\n              <td><a href={owner.image} target=\"_blank\">URL</a></td>\n              <td className={drizzleState.accounts[0] === owner.owner? 'owner-address' : null}> {owner.owner}</td>\n              <td>{drizzleState.accounts[0] === owner.owner ?\n              owner.approved ? \n                <button className=\"btn-for-sell\" onClick={() => transferNFT(owner)}>Move NFT for sell place</button> :\n                <button className=\"btn-approve\" onClick={() => approveNFT(owner)}>Approve NFT for sell</button> :\n                <button className=\"btn-bet\" onClick={() => makeBet(owner)}> Make BET</button>}</td>\n            </tr>\n          ) : <></>}\n        </tbody>\n      </Table>}\n\n      {<section>\n        {showBetForm && <BetForm\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          idToken={chosenTokenId}\n          pk={publicKey}\n          address={drizzleState.accounts[0]}\n          showForm={() => setShowBetForm}\n          isShowForm= {showBetForm}\n        />}\n      </section>}\n      <BuyersBoard\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        nftOwnersDetails={nftOwnersDetails}\n      />\n    </section>\n  );\n};\n\nexport default MarketPlace;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Table } from 'react-bootstrap';\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\nimport { create } from 'ipfs-http-client'\nimport SetDecrypt from \"./SetDecrypt\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\nconst OwnerAssets = props => {\n\n    const { drizzle, drizzleState} = props;\n    const [sellerSoldAmounts, setSellerSoldAmounts] = useState([]);\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [encData, setEncData] = useState('');\n    const [showDecryptModule, setShowDecryptModule] = useState(false);\n\n    const [typeData, setTypeData] = useState(0)\n    const [choosedToken, setChoosedToken] = useState(null)\n    const contract = drizzle.contracts.EncNft;\n\n    const contractMarket = drizzle.contracts.MarketPlace;\n    const typeFileNames = ['#text', '#image', '#file']\n    const cutParams = [{start: 5, end: -3}, {start: 6, end: -4}, {start: 5, end: -3}]\n    \n\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .getIdsByAddress(drizzleState.accounts[0])\n                .call({ from: drizzleState.accounts[0] });\n            console.log('result   ', result);\n            if (result && result.length) {\n\n                Promise.all(\n                    result.map(async (id) => {\n                        const soldBalance = await contractMarket.methods\n                            .getOwnerInfo(id, drizzleState.accounts[0])\n                            .call({ from: drizzleState.accounts[0] });\n\n                        const currentOwnerInfo = await contract.methods.getTokenInfoLastOwner(id).call({ from: drizzleState.accounts[0] });\n                        console.log(id, \"🚀 ~ file: OwnerAssets.js ~ line 42 ~ result.map ~  currentOwnerInfo\", currentOwnerInfo.encData, currentOwnerInfo.owner)\n\n                        const uriInfo = await contract.methods.tokenURI(id).call({ from: drizzleState.accounts[0] });\n\n                        const parsedUri = JSON.parse(uriInfo)\n                        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 48 ~ result.map ~ parsedUri\", parsedUri)\n                        setSellerSoldAmounts(sellerSoldAmounts => [...sellerSoldAmounts, { idToken: id, balance: soldBalance, currentOwner: currentOwnerInfo.owner, encPrivateKey: currentOwnerInfo.encData, ...parsedUri }])\n                    })\n                )\n            }\n            console.log('sellerSoldAmounts :>> ', sellerSoldAmounts);\n        }\n        countOfTokens()\n    }, [])\n\n    useEffect(() =>{\n        if(choosedToken) {\n            getTypeDataFromDescription(choosedToken.description)\n\n            const path = choosedToken.image.split('/')\n            const cidPath = path[path.length - 1]\n            console.log(\"🚀 ~ file: OwnerAssets.js ~ line 60 ~ useEffect ~ cidPath\", cidPath)\n            const getInfoFromIPFS = async (cid) => {\n                const result = await client.object.get(cid, { timeout: 30000 })\n                console.log('typeData :>> ', typeData);\n                console.log('cutParams[typeData].start, cutParams[typeData].end :>> ', cutParams[typeData].start, cutParams[typeData].end);\n                const cuttedString = new TextDecoder().decode(result.Data).slice(cutParams[typeData].start, cutParams[typeData].end);\n                //const cuttedString = string.slice(5)\n                //console.log(\"🚀 ~ file: OwnerAssets.js ~ line 66 ~ getInfoFromIPFS ~ cuttedString\", cuttedString)\n                setEncData(cuttedString)\n\n            }\n            getInfoFromIPFS(cidPath)\n        }\n        \n\n    }, [choosedToken])\n    \n\n    const withdrawSum = async (idToken) => {\n\n        const resultWithdraw = await contractMarket.methods.sellerWithdrawSum(idToken).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 57 ~ result ~ result\", resultWithdraw)\n    };\n\n    const getTypeDataFromDescription = (description) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 78 ~ getTypeDataFromDescription ~ description\", description)\n        typeFileNames.map((name, ind) => {\n\n            if (description.includes(name)) {\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 80 ~ typeFileNames.map ~ ind\", ind)\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 81 ~ typeFileNames.map ~ name\", name)\n\n                setTypeData(ind)\n            }\n        })\n    }\n\n    const decryptInfo = async (token) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 85 ~ decryptInfo ~ token\", token)\n        if (!choosedToken || choosedToken !== token || showDecryptModule) {\n            setChoosedToken(token)\n            getTypeDataFromDescription(token.description)\n            setShowDecryptModule(true)\n        }\n    }\n    useEffect(() => {\n \n        if (choosedToken && choosedToken.encPrivateKey !== encryptedPrivateKey)  {\n            setEncryptedPrivateKey(choosedToken.encPrivateKey)\n            getTypeDataFromDescription(choosedToken.description)\n\n            setShowDecryptModule(true)\n        } \n\n\n    }, [decryptInfo, choosedToken, showDecryptModule])\n\n\n    const compareAddresses = (add1, add2) => {\n        return add1 === add2\n    }\n\n    const callbackFromDecrypt = (flag) => {\n        setShowDecryptModule(flag)\n    }\n\n    // const showDecryptByTypeData = (type) => {\n    //     return (\n    //         <>\n    //             {type === 0 && <div name=\"decrypredData\"\n    //                 className=\"u-full-width\">{decryptedInfo}</div>}\n    //             {type === 1 && <img name=\"decrypredData\"\n    //                 className=\"u-full-width\" src={decryptedInfo} />}\n    //         </>\n    //     )\n    // }\n\n    return (\n        <section>\n            <h2>Your assets</h2>\n\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>ID NFT</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>Sum for withdraw</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        sellerSoldAmounts.map((token, i) =>\n                        (<tr key={i}>\n                            <td>{token.idToken}</td>\n                            <td>{token.name}</td>\n                            <td>{token.description}</td>\n                            <td>{token.balance}</td>\n                            <td>{token.balance > 0 ?\n                                <button className=\"btn-withdraw\" onClick={() => withdrawSum(token.idToken)}>Withdraw</button> :\n                                compareAddresses(token.currentOwner, drizzleState.accounts[0]) ?\n                                    <button className=\"btn-decrypt\" onClick={function () { return decryptInfo(token) }}>Decrypt data of the NFT </button> :\n                                    'You sold the token and withdraw all sum'\n                            }</td>\n                        </tr>))\n\n                    }\n\n                </tbody>\n            </Table>\n            {showDecryptModule && <SetDecrypt\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                encData={encData}\n                encPrivateKey={encryptedPrivateKey}\n                typeData={typeData}\n                showDialod={callbackFromDecrypt}\n            />}\n        </section>\n    );\n};\nexport default OwnerAssets;\n","import React, { useState, useEffect } from \"react\";\n\nconst Contacts = props => {\n    const { drizzle, drizzleState } = props;\n\n\n    return (\n        <section>\n            <h2>Contacts</h2>\n\n        </section>\n    );\n};\n\nexport default Contacts;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; \nimport UploadIPFS from \"./UploadIPFS\";\nimport DownloadIPFS from \"./DownloadIPFS\";\nimport MarketPlace from \"./MarketPlace\";\nimport OwnerAssets from \"./OwnerAssets\";\nimport Contacts from \"./Contacts\";\n\nconst App = props => {\n  const [drizzleReadinessState, setDrizzleReadinessState] = useState({\n    drizzleState: null,\n    loading: true\n  });\n  const { drizzle } = props;\n\n  useEffect(\n    () => {\n      const unsubscribe = drizzle.store.subscribe(() => {\n        // every time the store updates, grab the state from drizzle\n        const drizzleState = drizzle.store.getState();\n        // check to see if it's ready, if so, update local component state\n        if (drizzleState.drizzleStatus.initialized) {\n          setDrizzleReadinessState({\n            drizzleState: drizzleState,\n            loading: false\n          });\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    },\n    [drizzle.store, drizzleReadinessState]\n  ); \n  return drizzleReadinessState.loading ? (\n    <div align=\"center\">\n      <h4>\n        <a\n          href=\"https://metamask.io/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Please install Metamask extension and reload the page\n        </a>\n      </h4>\n      Set it on the rinkeby test network\n    </div>\n  ) : (\n    <Router>\n      <div>\n        <div className=\"title_logo\">\n          <img\n            src={\n              \"assets/enc-nft-logo.png\"\n            }\n          />\n          <h1>Encoded NFT</h1>\n        </div> \n        <br /> \n        <br />\n        <br />\n\n        <nav className=\"menu\">\n          <ul> \n            <li>\n              <Link className=\"link\" to=\"/\">Market Place</Link>\n            </li>\n            <li>\n              <Link className=\"link\" to=\"/assets\">Owner Assets</Link>\n            </li> \n            <li>\n              <Link className=\"link\" to=\"/upload-ipfs\">Upload a file to IPFS</Link>\n            </li> \n            <li>\n              <Link className=\"link\" to=\"/contacts\">Contacts</Link>\n            </li> \n          </ul>\n        </nav>\n\n        <hr />\n        <br />\n        <Switch>\n          <Route exact path=\"/\">\n            <MarketPlace\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/assets\">\n            <OwnerAssets\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n            </Route>           \n          <Route path=\"/upload-ipfs\">\n            <UploadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/download-ipfs\">\n            <DownloadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/contacts\">\n            <Contacts\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Web3 from \"web3\";\n\n// import drizzle functions and contract artifact\nimport { Drizzle } from \"drizzle\";\nimport MarketPlace from \"./contracts/MarketPlace.json\";\nimport EncNft from \"./contracts/EncNft.json\"\nconst web3 = new Web3(window.web3.currentProvider);\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [\n    {\n      contractName: 'EncNft',\n      web3Contract: new web3.eth.Contract(EncNft.abi, '0xd7d366cF18D57c6aFC62Fd16FDbBBab08066988F') \n    },\n    {\n      contractName: 'MarketPlace',\n      web3Contract: new web3.eth.Contract(MarketPlace.abi, '0x7680956dFC896f00bedD1Dc1285e1B1c56c327EE') \n    }    \n  ],\n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:8545\"),\n    customProvider: new Web3(window.web3.currentProvider),\n  },\n  // syncAlways:true,\n  polls: {\n    accounts: 2000,\n  },\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle}/>, document.getElementById('root'));\n"],"sourceRoot":""}