{"version":3,"sources":["metamask.js","cypher.js","SetDecrypt.js","MintNFT.js","UploadIPFS.js","DownloadIPFS.js","BuyersBoard.js","BetForm.js","MarketPlace.js","OwnerAssets.js","Contacts.js","App.js","index.js"],"names":["EthCrypto","require","getPublicKeyViaMetamask","_x","_getPublicKeyViaMetamask","apply","this","arguments","_callee","address","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","reject","window","ethereum","sendAsync","jsonrpc","method","params","error","encryptionpublickey","result","stop","metamaskEncryptData","_x2","_x3","_metamaskEncryptData","_callee2","message","pubKey","encrypted","encryptedMessage","_context2","console","log","encryptWithPublicKey","sent","cipher","stringify","metamaskEncrypt","_x4","_x5","_metamaskEncrypt","_callee3","enc","_context3","encrypt","data","web3","utils","toHex","JSON","handle","promise","then","undefined","catch","decryptPrivateKey","_x6","_x7","_decryptPrivateKey","_callee4","account","_yield$handle","_yield$handle2","decryptedMessage","decryptErr","_context4","request","Object","slicedToArray","concat","decryptUriFile","_x8","_x9","_decryptUriFile","_callee5","privateKey","parsedEncInfo","_context5","parse","decryptWithPrivateKey","getAccount","_getAccount","selectedAddress","encryptData","_encryptData","publicKey","pk","SetDecrypt","props","drizzle","drizzleState","encData","encPrivateKey","typeData","showDialod","_useState","useState","_useState2","setEncryptedInfo","_useState3","_useState4","decryptedPK","setDecryptedPK","_useState5","_useState6","decryptedInfo","setDecryptedInfo","_useState7","_useState8","decPk","setDecPk","_useState9","_useState10","setDecInfoShow","_useForm","useForm","register","handleSubmit","watch","errors","useEffect","_ref","asyncToGenerator","mark","dm","accounts","getDecryptMessage","_ref2","type","react_default","createElement","className","htmlFor","Fragment","name","src","onClick","MintNFT","stackId","hashMint","setHashMint","countTokens","setCountTokens","ipfsLink","encryptedKey","contract","contracts","EncNft","_countOfTokens","numResult","methods","totalSupply","call","from","countOfTokens","onSubmit","stringUri","resMint","setUri","mint","send","transactionHash","approveNft","res","approve","MarketPlace","gasPrice","Math","pow","gasLimit","getTxStatus","description","uri","objectSpread2","image","transactions","txHash","transactionStack","status","placeholder","ref","required","maxLength","value","client","create","options","label","UploadIPFS","fileUrl","updateFileUrl","clearData","setClearData","encryptedData","setEncryptedData","encryptedPrivateKey","setEncryptedPrivateKey","_useState11","_useState12","setCustomerAddress","_useState13","_useState14","cid","setCid","_useState15","_useState16","textFromIpfsFIle","setTextFromIpfsFIle","_useState17","_useState18","newPrivateKey","setNewPrivateKey","_useState19","_useState20","newPublicKey","setNewPublicKey","_useState21","_useState22","newAddress","setNewAddress","_useState23","_useState24","creatorAddress","setCreatorAddress","_useState25","_useState26","_useState27","_useState28","selectedOption","setSelectedOption","_useState29","_useState30","textArea","setTextArea","_onChange","_callee6","e","file","added","url","_context6","target","files","add","path","t0","encryptPrivateKeyForNFTFile","setValue","addressToEncrypt","dataToEncrypt","_ref4","sendEncryptInfoToIPFS","getInfoFromIPFS","_ref5","string","cuttedString","object","get","timeout","TextDecoder","decode","Data","slice","generateKeys","newIdentity","createIdentity","Form","Group","controlId","Select","aria-label","onChange","map","o","key","rows","event","open","id","fileReader","FileReader","readAsText","onload","fileAsText","onerror","fileToEncrypt","src_SetDecrypt","href","src_MintNFT","DownloadIPFS","encryptedInfo","Coupoken","decMessage","setDecryptMessage","fileToDecrypt","BuyersBoard","setTotalAmountNft","nftBuyersDetails","setNftBuyersDetails","nftOwnersDetails","contractMarket","buyerIndex","setBuyerIndex","getBuyers","tokensArray","index","push","idNft","owner","_ref3","token","countBuyers","_loop","_index","getCountBuyers","buyersMakeBet","buyersBoard","toConsumableArray","idToken","buyerAddress","buyerPubKey","buyerBet","goalPurchase","delegateYield","t1","sellNft","buyer","ownerOfTokenInfo","lastEncryptedPrivateKey","decryptedPrivateKey","getTokenInfoLastOwner","acceptRateAndTransferToken","BuyersOfToken","Table","striped","bordered","hover","filter","item","ind","formatEther","approved","getSellerActions","Accordion","defaultActiveKey","Item","eventKey","Header","Body","BetForm","setFocus","bnValue","BigNumber","parseUnits","valueBet","makeBet","disabled","tokenId","step","totalAmountNft","setNftOwnersDetails","setPubKey","chosenTokenId","setChosenTokenId","showBetForm","setShowBetForm","getCoupons","transferNFT","moveTokenForSell","approveNFT","ownersArray","isTokenForSell","ownerAddress","approvedAddress","ownerOf","getApproved","length","src_BetForm","src_BuyersBoard","OwnerAssets","sellerSoldAmounts","setSellerSoldAmounts","setEncData","showDecryptModule","setShowDecryptModule","setTypeData","choosedToken","setChoosedToken","typeFileNames","getIdsByAddress","all","soldBalance","currentOwnerInfo","uriInfo","parsedUri","getOwnerInfo","tokenURI","balance","currentOwner","split","cidPath","withdrawSum","resultWithdraw","sellerWithdrawSum","decryptInfo","includes","i","add1","add2","flag","Contacts","App","loading","drizzleReadinessState","setDrizzleReadinessState","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","align","rel","react_router_dom","to","react_router","exact","src_MarketPlace","src_OwnerAssets","src_UploadIPFS","src_DownloadIPFS","src_Contacts","Web3","currentProvider","contractName","web3Contract","eth","Contract","abi","block","customProvider","polls","Drizzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"s5ZAEIA,EAAYC,EAAQ,KACjB,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAuCC,GAAvC,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACI,IAAIC,QAAQ,SAACC,EAASC,GACzBC,OAAOC,SAASC,UACZ,CACIC,QAAS,MACTC,OAAQ,6BACRC,OAAQ,CAAChB,IAGb,SAAUiB,EAAOC,GACRD,EAGDP,EAAOO,GAFPR,EAAQS,EAAoBC,aAXzC,wBAAAf,EAAAgB,SAAArB,6BAoBA,SAAesB,EAAtBC,EAAAC,GAAA,OAAAC,EAAA5B,MAAAC,KAAAC,sDAAO,SAAA2B,EAAmCC,EAASC,GAA5C,IAAAC,EAAAC,EAAA,OAAA5B,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cACHyB,QAAQC,IAAIN,GADTI,EAAAxB,KAAA,EAEqBf,EAAU0C,qBAC9BN,EACAD,GAJD,cAEGE,EAFHE,EAAAI,KAMHH,QAAQC,IAAI,2EAAkEJ,GAExEC,EAAmBtC,EAAU4C,OAAOC,UACtCR,GATDE,EAAAvB,OAAA,SAcIsB,GAdJ,wBAAAC,EAAAV,SAAAK,6BAgBA,SAAeY,EAAtBC,EAAAC,GAAA,OAAAC,EAAA5C,MAAAC,KAAAC,sDAAO,SAAA2C,EAA+Bf,EAASC,GAAxC,IAAAe,EAAAb,EAAA,OAAA5B,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cACHyB,QAAQC,IAAI,wEAA+DL,GAC3EI,QAAQC,IAAIN,GAENgB,EAAME,kBACRjB,EACA,CAAEkB,KAAMnB,GACR,4BAEJK,QAAQC,IAAI,qEAA4DU,GAClEb,EAAmBiB,IAAKC,MAAMC,MAChCC,KAAKb,UACDM,IAGRX,QAAQC,IAAI,kFAAyEH,GAflFc,EAAApC,OAAA,SAmBIsB,GAnBJ,wBAAAc,EAAAvB,SAAAqB,6BAsBP,IAAIS,EAAS,SAACC,GACV,OAAOA,EACFC,KAAK,SAAAP,GAAI,MAAK,CAACA,OAAMQ,KACrBC,MAAM,SAAArC,GAAK,OAAIT,QAAQC,QAAQ,MAAC4C,EAAWpC,OAG7C,SAAesC,EAAtBC,EAAAC,GAAA,OAAAC,EAAA9D,MAAAC,KAAAC,sDAAO,SAAA6D,EAAiC9B,EAAkB+B,GAAnD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/D,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAE0C4C,EAAOvC,OAAOC,SAASsD,QAAQ,CACxEnD,OAAQ,cACRC,OAAQ,CAACa,EAAkB+B,MAJ5B,UAAAC,EAAAI,EAAA/B,KAAA4B,EAAAK,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAEIE,EAFJD,EAAA,KAEsBE,EAFtBF,EAAA,KAAAG,EAAA3D,KAAA,SAOeyB,QAAQd,MAAM+C,EAAWtC,SAPxCuC,EAAA3D,KAAA,wBASCyB,QAAQC,IAAR,qBAAAqC,OAAiCN,IATlCE,EAAA1D,OAAA,SAUQwD,GAVR,yBAAAE,EAAA7C,SAAAuC,6BAcA,SAAeW,EAAtBC,EAAAC,GAAA,OAAAC,EAAA7E,MAAAC,KAAAC,sDAAO,SAAA4E,EAA8B7C,EAAkB8C,GAAhD,IAAAC,EAAAlD,EAAA,OAAAzB,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cACHyB,QAAQC,IAAR,qBAAAqC,OAAiCxC,IAC3B+C,EAAgBrF,EAAU4C,OAAO2C,MAAMjD,GAF1CgD,EAAAvE,KAAA,EAGmBf,EAAUwF,sBAC5BJ,EAAYC,GAJb,cAGGlD,EAHHmD,EAAA3C,KAKHH,QAAQC,IAAI,wEAA+DN,GALxEmD,EAAAtE,OAAA,SAMImB,GANJ,wBAAAmD,EAAAzD,SAAAsD,6BC9EA,SAAeM,IAAtB,OAAAC,EAAArF,MAAAC,KAAAC,sDAAO,SAAAC,IAAA,OAAAE,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUK,OAAOC,SAASsE,gBAD1B,cAAA9E,EAAAG,OAAA,SAAAH,EAAA8B,MAAA,wBAAA9B,EAAAgB,SAAArB,6BASA,SAAeoF,EAAtBzF,EAAA4B,GAAA,OAAA8D,EAAAxF,MAAAC,KAAAC,sDAAO,SAAA2B,EAA2B4D,EAAWxC,GAAtC,IAAAyC,EAAA,OAAArF,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACcb,EAAwB4F,GADtC,cACGC,EADHxD,EAAAI,KAEHH,QAAQC,IAAI,0DAAiDsD,GAF1DxD,EAAAxB,KAAA,EAGU+B,EAAgBQ,EAAMyC,GAHhC,cAAAxD,EAAAvB,OAAA,SAAAuB,EAAAI,MAAA,wBAAAJ,EAAAV,SAAAK,6BCRP,IA+Ee8D,EA/EI,SAAAC,GAEiEA,EAAxEC,QAAR,IAAiBC,EAA+DF,EAA/DE,aAAcC,EAAiDH,EAAjDG,QAASC,EAAwCJ,EAAxCI,cAAeC,EAAyBL,EAAzBK,SAAUC,EAAeN,EAAfM,WACjEC,EAA0CC,mBAAS,IAAnDC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAsBG,GAAtBD,EAAA,GAAAA,EAAA,IACAE,EAAsCH,mBAAS,IAA/CI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAA0BX,oBAAS,GAAnCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAAOE,EAAPD,EAAA,GAAcE,EAAdF,EAAA,GACAG,EAAsCf,oBAAS,GAA/CgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAoBE,GAApBD,EAAA,GAAAA,EAAA,IACAE,EAAkDC,cAAlDD,EAAQE,SAARF,EAAkBG,aAAlBH,EAAgCI,MAAhCJ,EAAuCK,OAEvCC,oBAAU,WACNtB,EAAiBP,IAClB,CAACA,IAEJ6B,oBAAU,WACFX,GAAO,eAAAY,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACP,SAAA5H,IAAA,IAAA6H,EAAA,OAAA3H,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC0B,KAAlBsF,EADR,CAAAxF,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEyBiD,EAAkBqC,EAAeF,EAAamC,SAAS,IAFhF,OAEcD,EAFdxH,EAAA8B,KAGQH,QAAQC,IAAI,6EAAoE4F,GAChFtB,EAAesB,GACfX,GAAe,GALvB,wBAAA7G,EAAAgB,SAAArB,MADO,yBAAA0H,EAAA7H,MAAAC,KAAAC,YAAA,EASPgI,IAGL,CAACjB,EAAOjB,IAEX4B,oBAAU,WACFnB,GAAeV,GAAS,eAAAoC,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACxB,SAAAlG,IAAA,IAAAmG,EAAA,OAAA3H,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACqBgE,EAAeqB,EAASU,GAD7C,OACUuB,EADV9F,EAAAI,KAEIwE,EAAiBkB,GAFrB,wBAAA9F,EAAAV,SAAAK,MADwB,yBAAAsG,EAAAnI,MAAAC,KAAAC,YAAA,EAMxBgI,IAGL,CAACzB,EAAaV,IAcjB,IAA+BqC,EAY/B,OACIC,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,eACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,iBAAf,mBAhBeJ,EAiBQnC,EAf/BoC,EAAA/H,EAAAgI,cAAAD,EAAA/H,EAAAmI,SAAA,KACa,KAARL,GAAeC,EAAA/H,EAAAgI,cAAA,OAAKI,KAAK,gBACtBH,UAAU,gBAAgB1B,GACrB,KAARuB,GAAeC,EAAA/H,EAAAgI,cAAA,WAAKD,EAAA/H,EAAAgI,cAAA,OAAKI,KAAK,gBAC3BH,UAAU,eAAeI,IAAK9B,SAetCwB,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM1B,GAAUD,KAAjC,gBACAoB,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM1C,GAAW,KAAlC,4BC8CO2C,EA1HH,SAAAjD,GACZ,IAAAO,EAA8BC,mBAAS,MAAvCC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAO2C,EAAPzC,EAAA,GACAE,GADAF,EAAA,GACkCD,mBAAS,KAA3CI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACgCJ,mBAAS,KAAzCQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOoC,EAAPnC,EAAA,GAAiBoC,EAAjBpC,EAAA,GACAG,EAA4BX,mBAAS,IAArCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACsCZ,mBAAS,IAA/CgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAO8B,EAAP7B,EAAA,GAAoB8B,EAApB9B,EAAA,GACQvB,EAA4DD,EAA5DC,QAASC,EAAmDF,EAAnDE,aAAcqD,EAAqCvD,EAArCuD,SAAUC,EAA2BxD,EAA3BwD,aAAcnD,EAAaL,EAAbK,SACjDoD,EAAWxD,EAAQyD,UAAUC,OAGnCjC,EAAkDC,cAA1CC,EAARF,EAAQE,SAAUC,EAAlBH,EAAkBG,aAAqBE,GAAvCL,EAAgCI,MAAhCJ,EAAuCK,QACvCC,oBAAU,WAAM,SAAA4B,IAAA,OAAAA,EAAAjF,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACZ,SAAA5H,IAAA,IAAAoB,EAAAkI,EAAA,OAAApJ,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACyB2I,EAASK,QACzBC,cACAC,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAH5C,OACU1G,EADVf,EAAA8B,KAIQH,QAAQC,IAAI,8BAA+Bb,EAAQ0H,IAClD1H,IAAW0H,IACNQ,GAAalI,EACnBY,QAAQC,IAAI,wEAA+DqH,GAC3EP,EAAeO,GACftH,QAAQC,IAAI,mBAAoB6G,IATxC,wBAAAzI,EAAAgB,SAAArB,OADYH,MAAAC,KAAAC,YAAA,WAAAsJ,EAAAxJ,MAAAC,KAAAC,WAeZ4J,IACD,IACH,IAAMC,EAAQ,eAAAlC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlG,EAAOoB,GAAP,IAAA+G,EAAAC,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEPsJ,EAAYE,EAAOjH,GAEzBd,QAAQC,IAAI,mEAA0D4H,GAJzD9H,EAAAxB,KAAA,EAKS2I,EAASK,QAAQS,KAAKrE,EAAamC,SAAS,GAAIgB,EAAc,EAAGe,EAAWZ,GAAcgB,KAAK,CAAEP,KAAM/D,EAAamC,SAAS,KALtI,QAKPgC,EALO/H,EAAAI,QAOTH,QAAQC,IAAI,iEAAwD6H,GACpEjB,EAAYiB,EAAQI,kBARX,wBAAAnI,EAAAV,SAAAK,MAAH,gBAAA/B,GAAA,OAAA+H,EAAA7H,MAAAC,KAAAC,YAAA,GAWRoK,EAAU,eAAAnC,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlF,IAAA,IAAA0H,EAAA,OAAAlK,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cACfyB,QAAQC,IAAI,mBAAoB6G,GADjBlG,EAAArC,KAAA,EAGG2I,EAASK,QAAQc,QAAQ3E,EAAQyD,UAAUmB,YAAYrK,QAAS6I,GAAamB,KAAK,CAChGP,KAAM/D,EAAamC,SAAS,GAC5ByC,SAAU,EAAAC,KAAAC,IAAI,GAAM,IAAIC,SAAU,MALvB,QAGTN,EAHSxH,EAAAT,QAQXH,QAAQC,IAAI,+DAAsDmI,GAClEO,KATW,wBAAA/H,EAAAvB,SAAAqB,MAAH,yBAAAsF,EAAAnI,MAAAC,KAAAC,YAAA,GAYNgK,EAAS,SAAAjH,GAEXd,QAAQC,IAAI,gBAAiB6D,GACd,GAAZA,IACChD,EAAK8H,aAAe,UAET,GAAZ9E,IACChD,EAAK8H,aAAe,WAExB5I,QAAQC,IAAI,mDAA0Ca,GACtD,IAAM+H,EAAGzG,OAAA0G,EAAA,EAAA1G,QAAA0G,EAAA,EAAA1G,CAAA,GAAQtB,GAAR,IAAciI,MAAO/B,IAC9B,OAAO9F,KAAKb,UAAUwI,IAGpBF,EAAc,WAEhB,IAAQK,EAAmCrF,EAAnCqF,aAGFC,EAHqCtF,EAArBuF,iBAGUvC,GAGhC,OAAKsC,EAGL,uBAAA3G,OAA8B0G,EAAaC,IACvCD,EAAaC,GAAQE,QAJL,MAOxB,OACIjD,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,oCACAD,EAAA/H,EAAAgI,cAAA,QAAMyB,SAAUtC,EAAasC,IACzB1B,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,QACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,OACLH,UAAU,eACVgD,YAAY,WACZC,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAOe,MAAQL,EAAA/H,EAAAgI,cAAA,mCAGxBD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,0BACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,cACLH,UAAU,eACVgD,YAAY,cACZC,IAAKhE,EAAS,CAAEiE,UAAU,EAAOC,UAAW,QAE/C/D,EAAOoD,aAAe1C,EAAA/H,EAAAgI,cAAA,mCAI/BD,EAAA/H,EAAAgI,cAAA,SAAOC,UAAU,iBAAiBH,KAAK,SAASuD,MAAM,UAE1DtD,EAAA/H,EAAAgI,cAAA,sCAC6BS,GAK7BV,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM0B,MAAvB,uDC9GVsB,EAASC,iBAAO,sCAChBC,EAAU,CACZ,CAAEH,MAAO,EAAGI,MAAO,QACnB,CAAEJ,MAAO,EAAGI,MAAO,SACnB,CAAEJ,MAAO,EAAGI,MAAO,SACnB,CAAEJ,MAAO,EAAGI,MAAO,UA8PRC,EA3PI,SAAApG,GACf,IAAAO,EAAiCC,mBAAQ,IAAzCC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAO8F,EAAP5F,EAAA,GAAgB6F,EAAhB7F,EAAA,GACAE,EAA8BH,mBAAS,MAAvCI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACkCJ,mBAAS,KAA3CQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOwF,EAAPvF,EAAA,GAAkBwF,EAAlBxF,EAAA,GACAG,EAA0CX,mBAAS,IAAnDY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAAOsF,EAAPrF,EAAA,GAAsBsF,EAAtBtF,EAAA,GACAG,EAAsDf,mBAAS,IAA/DgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAOoF,EAAPnF,EAAA,GAA4BoF,EAA5BpF,EAAA,GACAqF,EAA8CrG,mBAAS,IAAvDsG,EAAAnI,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,GAAwBE,GAAxBD,EAAA,GAAAA,EAAA,IACQ7G,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aACjB8G,EAAsBxG,mBAAS,IAA/ByG,EAAAtI,OAAAC,EAAA,EAAAD,CAAAqI,EAAA,GAAOE,EAAPD,EAAA,GAAYE,EAAZF,EAAA,GACAG,EAAgD5G,mBAAS,IAAzD6G,EAAA1I,OAAAC,EAAA,EAAAD,CAAAyI,EAAA,GAAOE,EAAPD,EAAA,GAAyBE,EAAzBF,EAAA,GACAG,EAA0ChH,mBAAS,IAAnDiH,EAAA9I,OAAAC,EAAA,EAAAD,CAAA6I,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAAwCpH,mBAAS,IAAjDqH,EAAAlJ,OAAAC,EAAA,EAAAD,CAAAiJ,EAAA,GAAOE,EAAPD,EAAA,GAAqBE,GAArBF,EAAA,GACAG,GAAoCxH,mBAAS,IAA7CyH,GAAAtJ,OAAAC,EAAA,EAAAD,CAAAqJ,GAAA,GAAOE,GAAPD,GAAA,GAAmBE,GAAnBF,GAAA,GACAG,GAA4C5H,mBAAS,IAArD6H,GAAA1J,OAAAC,EAAA,EAAAD,CAAAyJ,GAAA,GAAOE,GAAPD,GAAA,GAAuBE,GAAvBF,GAAA,GACAG,GAAkDhI,mBAAS,GAA3DiI,GAAA9J,OAAAC,EAAA,EAAAD,CAAA6J,GAAA,GACAE,IADAD,GAAA,GAAAA,GAAA,GAC4CjI,mBAAS0F,EAAQ,GAAGH,QAAhE4C,GAAAhK,OAAAC,EAAA,EAAAD,CAAA+J,GAAA,GAAOE,GAAPD,GAAA,GAAuBE,GAAvBF,GAAA,GAEAG,GAAgCtI,mBAAS,IAAzCuI,GAAApK,OAAAC,EAAA,EAAAD,CAAAmK,GAAA,GAAOE,GAAPD,GAAA,GAAiBE,GAAjBF,GAAA,GAEArH,GAAkDC,cAA1CC,GAARF,GAAQE,SAAUC,GAAlBH,GAAkBG,aAAqBE,IAAvCL,GAAgCI,MAAhCJ,GAAuCK,QAnBf,SAAAmH,KAAA,OAAAA,GAAAvK,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAoBxB,SAAAgH,EAAwBC,GAAxB,IAAAC,EAAAC,EAAAC,EAAA,OAAA9O,EAAAC,EAAAC,KAAA,SAAA6O,GAAA,cAAAA,EAAA3O,KAAA2O,EAAA1O,MAAA,cACUuO,EAAOD,EAAEK,OAAOC,MAAM,GADhCF,EAAA3O,KAAA,EAAA2O,EAAA1O,KAAA,EAG4BkL,EAAO2D,IAAIN,GAHvC,OAGcC,EAHdE,EAAA9M,KAIc6M,EAJd,+BAAA1K,OAImDyK,EAAMM,MACjDtD,EAAciD,GALtBC,EAAA1O,KAAA,gBAAA0O,EAAA3O,KAAA,EAAA2O,EAAAK,GAAAL,EAAA,SAOQjN,QAAQC,IAAI,yBAAZgN,EAAAK,IAPR,yBAAAL,EAAA5N,SAAAuN,EAAA,kBApBwB/O,MAAAC,KAAAC,WA+BxB,IAKMwP,GAA2B,eAAA7H,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAA5H,IAAA,IAAA4F,EAAA,OAAA1F,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEV6E,EAAY2I,GAAgBZ,GAFlB,OAGhB,MADVvH,EAF0BvF,EAAA8B,OAI5BkK,EAAuBzG,GAJK,wBAAAvF,EAAAgB,SAAArB,MAAH,yBAAA0H,EAAA7H,MAAAC,KAAAC,YAAA,GAS3ByP,GAAQ,eAAAxH,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlG,EAAM8J,GAAN,IAAA5F,EAAA,OAAA1F,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cACbyB,QAAQC,IAAI,iBAAkB+J,GAC9BQ,EAAmBhB,EAAMiE,kBAFZ1N,EAAAxB,KAAA,EAISe,EAAoBkK,EAAMkE,eAAiB1D,GAAayC,GAAUlB,GAJ3E,OAKG,MADV3H,EAJO7D,EAAAI,OAMTgK,EAAiBvG,GANR,wBAAA7D,EAAAV,SAAAK,MAAH,gBAAAH,GAAA,OAAAyG,EAAAnI,MAAAC,KAAAC,YAAA,GAqBd0H,oBAASrD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAC,SAAAlF,IAAA,IAAAzC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACgB0E,IADhB,QACAhF,EADA2C,EAAAT,OAGF6L,GAAkB/N,GAHhB,wBAAA2C,EAAAvB,SAAAqB,MAMP,CAACuC,EAAY+I,KAEhBvG,oBAAU,WACFyE,GAAiB6B,IAAgB,eAAA4B,EAAAvL,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACjC,SAAAhE,IAAA,IAAAmL,EAAAC,EAAA,OAAA9O,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAEwBkL,EAAO2D,IAAIlD,GAFnC,OAEU6C,EAFV7K,EAAA/B,KAGIyK,EAAOmC,EAAMM,MACPL,EAJV,+BAAA1K,OAI+CyK,EAAMM,MACjDtD,EAAciD,GALlB,wBAAA9K,EAAA7C,SAAAuC,MADiC,yBAAA+L,EAAA9P,MAAAC,KAAAC,YAAA,EASjC6P,IAIL,CAAC1D,EAAe6B,KAGnB,IAwBM8B,GAAe,eAAAC,EAAA1L,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAjD,IAAA,IAAAvD,EAAA2O,EAAAC,EAAA,OAAA9P,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,WAChBuL,EADgB,CAAAhH,EAAAvE,KAAA,eAAAuE,EAAAvE,KAAA,EAEKkL,EAAOwE,OAAOC,IAAIvD,EAAK,CAAEwD,QAAS,MAFvC,OAEV/O,EAFU0D,EAAA3C,KAGV4N,GAAS,IAAIK,aAAcC,OAAOjP,EAAOkP,MAAMC,MAAM,GAAI,GACzDP,EAAeD,EAAOQ,MAAM,GAClCvD,EAAoBgD,GALJ,wBAAAlL,EAAAzD,SAAAsD,MAAH,yBAAAmL,EAAAjQ,MAAAC,KAAAC,YAAA,GASfyQ,GAAe,WACjB,IAAMC,EHvIHjR,UAAUkR,iBGwIbtD,EAAiBqD,EAAY7L,YAC7B4I,GAAgBiD,EAAYnL,WAC5BsI,GAAc6C,EAAYxQ,UA4B9B,OACIiI,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,0BACAD,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,yDAEAD,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM+H,OAAvB,uCACAtI,EAAA/H,EAAAgI,cAAA,uCACAD,EAAA/H,EAAAgI,cAAA,kBAAUgF,GACVjF,EAAA/H,EAAAgI,cAAA,sBAAcoF,GACdrF,EAAA/H,EAAAgI,cAAA,mBAAWwF,IACXzF,EAAA/H,EAAAgI,cAAA,6BAAqB4F,IAErB7F,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM8G,OAAvB,gDACArH,EAAA/H,EAAAgI,cAAA,oCACAD,EAAA/H,EAAAgI,cAAA,WAAMiE,GACNlE,EAAA/H,EAAAgI,cAAA,WACAD,EAAA/H,EAAAgI,cAAA,kEAEAD,EAAA/H,EAAAgI,cAAA,QAAMyB,SAAUtC,GAhJX,SAAAxE,GACbd,QAAQC,IAAI,sDAA6Ca,GACzD0M,GAAS1M,MA+IGoF,EAAA/H,EAAAgI,cAACwI,EAAA,EAAKC,MAAN,CAAYxI,UAAU,OAAOyI,UAAU,6BACnC3I,EAAA/H,EAAAgI,cAACwI,EAAA,EAAKG,OAAN,CAAaC,aAAW,gCAAgCvF,MAAO6C,GAC3D2C,SAAU,SAAAnC,GAAC,OAjCbrD,EAiC8BqD,EAAEK,OAAO1D,WAAO8C,GAhC7C9C,GADF,IAACA,IAkCGG,EAAQsF,IAAI,SAAAC,GAAC,OACVhJ,EAAA/H,EAAAgI,cAAA,UAAQgJ,IAAKD,EAAE1F,MAAOA,MAAO0F,EAAE1F,OAAQ0F,EAAEtF,WAIjC,MAAnByC,GAAyBnG,EAAA/H,EAAAgI,cAAAD,EAAA/H,EAAAmI,SAAA,KAAEJ,EAAA/H,EAAAgI,cAACwI,EAAA,EAAKC,MAAN,CAAYxI,UAAU,OAAOyI,UAAU,gCAC/D3I,EAAA/H,EAAAgI,cAAA,iDACAD,EAAA/H,EAAAgI,cAAA,YAAUiJ,KAAM,EAAG5F,MAAOiD,GAAUuC,SArC3B,SAACK,GACtBA,GAASA,EAAMnC,OAAO1D,QACtBkD,GAAY2C,EAAMnC,OAAO1D,OACzBS,EAAaoF,EAAMnC,OAAOmC,YAqCS,MAAnBhD,IAA0BnG,EAAA/H,EAAAgI,cAAA,SAAOF,KAAK,SAASQ,QAAS,kBAAM7H,OAAO0Q,KAAK,+BAAgC,WAAW9F,MAAM,cAG/HtD,EAAA/H,EAAAgI,cAAAD,EAAA/H,EAAAmI,SAAA,KAAEJ,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACbF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,uBACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,gBACLH,UAAU,eACVgD,YAAY,cACZC,IAAKhE,GAAS,CAAEiE,UAAU,EAAOC,UAAW,QAE/C/D,GAAOkI,eAAiBxH,EAAA/H,EAAAgI,cAAA,mCAG7BD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,UACAH,EAAA/H,EAAAgI,cAAA,SACIF,KAAK,OACLsJ,GAAG,QACHhJ,KAAK,gBACLH,UAAU,eACV4I,SAzHf,SAACK,GAClBrP,QAAQC,IAAI,oBAAqBoP,EAAMnC,OAAOC,OAC9C,IAAIL,EAAOuC,EAAMnC,OAAOC,MAAM,GAC9BnN,QAAQC,IAAI,sBAAuBoM,IAC/B,IAAImD,EAAa,IAAIC,WACrBD,EAAWE,WAAW5C,GACtB0C,EAAWG,OAAS,SAACN,GACjB,IAAIO,EAAaP,EAAMnC,OAAO9N,OAC9BY,QAAQC,IAAI,4EAAmE2P,GAC/E3F,EAAa2F,IAEjBJ,EAAWK,QAAU,SAAC3Q,GAAD,OAAWc,QAAQd,MAAM,UAAWA,OAgHhCsG,GAAOsK,eAAiB5J,EAAA/H,EAAAgI,cAAA,oCAKzCD,EAAA/H,EAAAgI,cAAA,SAAOC,UAAU,iBAAiBH,KAAK,SAASuD,MAAM,YAM1DtD,EAAA/H,EAAAgI,cAAC4J,EAAD,CACIrM,QAASA,EACTC,aAAcA,EACdC,QAASsG,EACTrG,cAAeuG,EACftG,SAAUuI,MAGlBnG,EAAA/H,EAAAgI,cAAA,SACIF,KAAK,OACL+I,SA3OY,SAAArR,GAAA,OAAAgP,GAAA9O,MAAAC,KAAAC,cA6OhBmI,EAAA/H,EAAAgI,cAAA,KAAG6J,KAAMlG,GAAUA,GACnB5D,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAMoH,OAAvB,sBACA3H,EAAA/H,EAAAgI,cAAA,WAAM4E,GACN7E,EAAA/H,EAAAgI,cAAC8J,EAAD,CACIvM,QAASA,EACTC,aAAcA,EACdqD,SAAU8C,EACV7C,aAAcmD,EACdtG,SAAUuI,OCpKX6D,EA/FM,SAAAzM,GAE0BA,EAAnCC,QAAR,IAAiBC,EAA0BF,EAA1BE,aAAcC,EAAYH,EAAZG,QAC/BI,EAA0CC,mBAAS,IAAnDC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAOmM,EAAPjM,EAAA,GAAsBC,EAAtBD,EAAA,GAEAE,GADqBT,EAAawD,UAA1BiJ,SAC8BnM,mBAAS,KAA/CI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAAwCX,oBAAS,GAAjDY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAAOyL,EAAPxL,EAAA,GAAmByL,EAAnBzL,EAAA,GACAM,EAAkDC,cAAXI,GAAvCL,EAAQE,SAARF,EAAkBG,aAAlBH,EAAgCI,MAAhCJ,EAAuCK,QAEvCC,oBAAU,WACNtB,EAAiBP,IAClB,CAACA,IAEJ6B,oBAAU,WACF4K,GAAY,eAAA3K,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACZ,SAAA5H,IAAA,IAAA6H,EAAA,OAAA3H,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC0B,KAAlB4R,EADR,CAAA9R,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEyBiD,EAAkB2O,EAAe,8CAF1D,OAEctK,EAFdxH,EAAA8B,KAGQH,QAAQC,IAAI,6EAAoE4F,GAChFtB,EAAesB,GAJvB,wBAAAxH,EAAAgB,SAAArB,MADY,yBAAA0H,EAAA7H,MAAAC,KAAAC,YAAA,EASZgI,IAGL,CAACsK,IAEJ5K,oBAAU,WACFf,GAAe,eAAAsB,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACf,SAAAlG,IAAA,IAAAmG,EAAA,OAAA3H,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,UAC0B,KAAlB4R,EADR,CAAApQ,EAAAxB,KAAA,eAAAwB,EAAAxB,KAAA,EAEyBgE,EAAe4N,EAAe,8CAFvD,OAEctK,EAFd9F,EAAAI,KAGQH,QAAQC,IAAI,6EAAoE4F,GAChFlB,EAAiBkB,GAJzB,wBAAA9F,EAAAV,SAAAK,MADe,yBAAAsG,EAAAnI,MAAAC,KAAAC,YAAA,EASfgI,IAGL,CAACsK,EAAY3L,IAgBhB,OACIwB,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,uCACAD,EAAA/H,EAAAgI,cAAA,WAAMgK,GACNjK,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,eACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,iBAAf,kBACAH,EAAA/H,EAAAgI,cAAA,OACII,KAAK,gBACLH,UAAU,gBAEZ1B,KAIVwB,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,6BACAH,EAAA/H,EAAAgI,cAAA,SACIF,KAAK,OACLM,KAAK,gBACLH,UAAU,eACV4I,SApCC,SAACK,GAClB,IAAIvC,EAAOuC,EAAMnC,OAAOC,MAAM,GAE1BqC,EAAa,IAAIC,WACrBD,EAAWE,WAAW5C,GAEtB0C,EAAWG,OAAS,SAACN,GACjB,IAAIO,EAAaP,EAAMnC,OAAO9N,OAC9B+E,EAAiByL,OA8BRpK,EAAO+K,eAAiBrK,EAAA/H,EAAAgI,cAAA,mCAGjCD,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM6J,GAAmBD,KAA1C,WAEZnK,EAAA/H,EAAAgI,cAAA,0BACAD,EAAA/H,EAAAgI,cAAA,WAAM7B,GACN4B,EAAA/H,EAAAgI,cAAA,iCACAD,EAAA/H,EAAAgI,cAAA,WAAMzB,iDC6CS8L,EArIK,SAAA/M,GAChB,IAAAO,EAA8BC,mBAAS,MAAvCC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GACAI,GADAF,EAAA,GAAAA,EAAA,GAC4CD,mBAAS,IAArDI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAAuBqM,GAAvBpM,EAAA,GAAAA,EAAA,IACAG,EAAgDP,mBAAS,IAAzDQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOkM,EAAPjM,EAAA,GAAyBkM,EAAzBlM,EAAA,GACAG,EAA+BX,mBAAS,IAAxCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GAC0CZ,mBAAS,IAAnDgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GACQtB,GADRuB,EAAA,GAAAA,EAAA,GACoDxB,EAA5CC,SAASC,EAAmCF,EAAnCE,aAAciN,EAAqBnN,EAArBmN,iBACzB1J,EAAWxD,EAAQyD,UAAUC,OAC7ByJ,EAAiBnN,EAAQyD,UAAUmB,YACzCgC,EAAsCrG,oBAAS,GAA/CsG,EAAAnI,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,GACAG,GADAF,EAAA,GAAAA,EAAA,GACoCtG,oBAAU,IAA9CyG,EAAAtI,OAAAC,EAAA,EAAAD,CAAAqI,EAAA,GAAOqG,EAAPpG,EAAA,GAAmBqG,EAAnBrG,EAAA,GACAjF,oBAAU,WACNuL,KACD,IAGH,IAQMA,EAAS,eAAAhL,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlF,IAAA,IAAAtB,EAAA6R,EAAAC,EAAA,OAAAhT,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACK2I,EAASK,QACvBC,cACAC,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAH1B,OAId,IAHI1G,EADU8C,EAAA/B,MAID,EAAG,CAGZ,IAFAsQ,EAAkBrR,GACZ6R,EAAc,GACXC,EAAQ,EAAGA,GAAS9R,EAAQ8R,IACjCD,EAAYE,KAAK,CAAEC,MAAOF,EAAOG,MAAO,GAAI9K,KAAM,GAAIqC,YAAa,GAAIG,MAAO,KAElFkI,EAAYhC,IAAZ,eAAAqC,EAAAlP,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAgB,SAAAlG,EAAM6R,GAAN,IAAAC,EAAAC,EAAAC,EAAA,OAAAxT,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAAtC,KAAA,EAAAsC,EAAArC,KAAA,EAEkBsS,EAAetJ,QAAQoK,eAAeJ,EAAMH,OAAO3J,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAFxG,aAEF0L,EAFE5Q,EAAAT,MAIU,GAJV,CAAAS,EAAArC,KAAA,SAAAkT,EAAAvT,EAAAC,EAAAyH,KAAA,SAAA6L,EAKKP,GALL,IAAAU,EAAA,OAAA1T,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EAM4BsS,EAAetJ,QAAQsK,YAAYN,EAAMH,MAAOF,GAAOzJ,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KANtH,QAMM8L,EANN7R,EAAAI,OAQIwQ,EAAoB,SAAAD,GAAgB,SAAApO,OAAAF,OAAA0P,EAAA,EAAA1P,CAAQsO,GAAR,CAA0B,CAC1DqB,QAASR,EAAMH,MAAOY,aAAcJ,EAAc,GAAIK,YAAaL,EAAc,GACjFM,SAAUN,EAAc,GAAIO,aAAcP,EAAc,QAVhE,wBAAA7R,EAAAV,SAAAoS,KAKKP,EAAQ,EALb,YAKgBA,EAAQM,GALxB,CAAA5Q,EAAArC,KAAA,gBAAAqC,EAAAwR,cAAAX,EAKKP,GALL,eAKqCA,IALrCtQ,EAAArC,KAAA,gBAAAqC,EAAArC,KAAA,iBAAAqC,EAAAtC,KAAA,GAAAsC,EAAAyR,GAAAzR,EAAA,SAeRZ,QAAQC,IAAI,oEAAZW,EAAAyR,IAfQ,yBAAAzR,EAAAvB,SAAAK,EAAA,kBAAhB,gBAAAH,GAAA,OAAA+R,EAAAzT,MAAAC,KAAAC,YAAA,IAVU,wBAAAmE,EAAA7C,SAAAqB,MAAH,yBAAAsF,EAAAnI,MAAAC,KAAAC,YAAA,GA+BTuU,EAAO,eAAA3E,EAAAvL,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAhE,EAAO2Q,EAAOhB,GAAd,IAAAiB,EAAAC,EAAAC,EAAA9O,EAAA,OAAA1F,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,UACRgT,EAAMF,QAAU1N,EAAamC,SAAS,GAD9B,CAAAhD,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,EAGuB2I,EAASK,QAAQoL,sBAAsBpB,EAAMH,OAAO3J,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAH9G,cAGF0M,EAHE1P,EAAA3C,KAKFsS,EAA0BD,EAAiB5O,QALzCd,EAAAvE,KAAA,EAO0BiD,EAAkBiR,EAAyB9O,EAAamC,SAAS,IAP3F,YAOF4M,EAPE5P,EAAA3C,MAAA,CAAA2C,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,GAUkB+B,EAAgBoS,EAAqBH,EAAMN,aAV7D,WAWY,MADVrO,EAVFd,EAAA3C,MAAA,CAAA2C,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,GAYuBsS,EAAetJ,QAAQqL,2BAA2BrB,EAAMH,MAAOmB,EAAMP,aAAcpO,GAASqE,KAAK,CAAEP,KAAM/D,EAAamC,SAAS,GAAIyC,SAAU,GAAAC,KAAAC,IAAK,GAAM,IAAIC,SAAU,MAZ7L,QAAA5F,EAAA3C,KAAA,yBAAA2C,EAAAzD,SAAAuC,MAAH,gBAAApC,EAAAe,GAAA,OAAAoN,EAAA9P,MAAAC,KAAAC,YAAA,GA+BP8U,EAAgB,SAACtB,GAGnB,OACIrL,EAAA/H,EAAAgI,cAAC2M,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB/M,EAAA/H,EAAAgI,cAAA,aACID,EAAA/H,EAAAgI,cAAA,UACID,EAAA/H,EAAAgI,cAAA,6BACAD,EAAA/H,EAAAgI,cAAA,0BACAD,EAAA/H,EAAAgI,cAAA,gCACAD,EAAA/H,EAAAgI,cAAA,wBAGRD,EAAA/H,EAAAgI,cAAA,aACIuK,EAAiBwC,OAAO,SAAAC,GAAI,OAAIA,EAAKpB,UAAYR,EAAMH,QAAOnC,IAAI,SAACsD,EAAOa,GACtE,OAAQb,EAAML,SAAW,GAAKhM,EAAA/H,EAAAgI,cAAA,MAAIgJ,IAAKiE,GACnClN,EAAA/H,EAAAgI,cAAA,MAAIC,UAAWmM,EAAMP,eAAiBrO,EAAamC,SAAS,GAAK,gBAAkB,MAAnF,IAA2FyM,EAAMP,aAAjG,KACA9L,EAAA/H,EAAAgI,cAAA,UAAKnF,IAAMqS,YAAYd,EAAML,UAA7B,OACAhM,EAAA/H,EAAAgI,cAAA,cAAMoM,EAAMJ,aAAZ,KACAjM,EAAA/H,EAAAgI,cAAA,UA7BC,SAACoM,EAAOhB,GAC7B,OACIA,EAAMF,QAAU1N,EAAamC,SAAS,IAAMyL,EAAM+B,SAC9C/B,EAAMF,QAAU1N,EAAamC,SAAS,IAAOyL,EAAM+B,SAE/CpN,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM6L,EAAQC,EAAOhB,KAAtC,YADA,0BAGJ,GAsBiBgC,CAAiBhB,EAAOhB,GAA7B,WASxB,OAEIrL,EAAA/H,EAAAgI,cAAAD,EAAA/H,EAAAmI,SAAA,KACIJ,EAAA/H,EAAAgI,cAAA,6BACAD,EAAA/H,EAAAgI,cAACqN,EAAA,EAAD,CAAWC,iBAAiB,KAA5B,IACI7C,EAAiB3B,IAAI,SAACsC,EAAOL,GAAR,OACjBhL,EAAA/H,EAAAgI,cAACqN,EAAA,EAAUE,KAAX,CAAgBC,SAAUzC,EAAO/B,IAAK+B,GAClChL,EAAA/H,EAAAgI,cAACqN,EAAA,EAAUI,OAAX,CAAkBnN,QAAS,kBAAMsK,EAAcG,KAA/C,YAAiEK,EAAMH,MAAvE,IAA+EG,EAAMhL,KAArF,KACAL,EAAA/H,EAAAgI,cAACqN,EAAA,EAAUK,KAAX,CAAgBzN,UAAW0K,IAAeI,EAAQ,SAAW,YACzDhL,EAAA/H,EAAAgI,cAAA,eAAQoL,EAAM3I,YAAd,KADJ,IACuCiK,EAActB,IAHzD,mBCPLuC,EAnHC,SAAArQ,GACZ,IAAAO,EAA8BC,mBAAS,MAAvCC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GACAI,GADAF,EAAA,GAAAA,EAAA,GACkCD,mBAAS,KAA3CI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GACgCJ,mBAAS,KAAzCQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOoC,EAAPnC,EAAA,GAAiBoC,EAAjBpC,EAAA,GACAG,EAA4BX,mBAAS,IAArCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GACQlB,GADRmB,EAAA,GAAAA,EAAA,GACyDpB,EAAjDC,SAASC,EAAwCF,EAAxCE,aAAcJ,EAA0BE,EAA1BF,GAAItF,EAAsBwF,EAAtBxF,QAAS8T,EAAatO,EAAbsO,QACtC7K,EAAWxD,EAAQyD,UAAUmB,YAGnCnD,EAA2DC,cAApDC,EAAPF,EAAOE,SAAUC,EAAjBH,EAAiBG,aAAqBE,GAAtCL,EAA+BI,MAA/BJ,EAAsCK,QAChCoC,GADNzC,EAA8C4O,SAChC,eAAArO,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAA5H,EAAO8C,GAAP,IAAAkT,EAAAlM,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEPyV,EAAWC,IAAUvM,KAAK1G,IAAMkT,WAAWpT,EAAKqT,SAAU,KAFnD9V,EAAAE,KAAA,EAIS2I,EAASK,QAAQ6M,QAAQrC,EAASxO,EAAII,EAAamC,SAAS,GAAIhF,EAAKqR,cAAclK,KAAK,CAAEP,KAAM/D,EAAamC,SAAS,GACxI0D,MAAOwK,EAASzL,SAAU,GAAAC,KAAAC,IAAK,GAAM,IACrCC,SAAU,MAND,QAIPZ,EAJOzJ,EAAA8B,OAQT0G,EAAYiB,EAAQI,iBARX,wBAAA7J,EAAAgB,SAAArB,MAAH,gBAAAL,GAAA,OAAA+H,EAAA7H,MAAAC,KAAAC,YAAA,IA4Bd,OACImI,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,yBACAD,EAAA/H,EAAAgI,cAAA,QAAMyB,SAAUtC,EAAasC,IACzB1B,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,QAAf,YACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,UACLH,UAAU,eACVoD,MAAOuI,EACPsC,UAAU,EACVhL,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAO8O,SAAWpO,EAAA/H,EAAAgI,cAAA,mCAG3BD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,MAAf,8BACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,KACLH,UAAU,eACVoD,MAAOjG,EACP8Q,UAAU,EACVhL,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAOjC,IAAM2C,EAAA/H,EAAAgI,cAAA,mCAGtBD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,WAAf,wBACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,UACLH,UAAU,eACVoD,MAAOvL,EACPoW,UAAU,EACVhL,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAOvH,SAAWiI,EAAA/H,EAAAgI,cAAA,mCAG3BD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,YAAf,YACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,WACLH,UAAU,eACVH,KAAK,SACLsO,KAAK,oBACLlL,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAO2O,UAAYjO,EAAA/H,EAAAgI,cAAA,mCAG5BD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,OACXF,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,gBACXF,EAAA/H,EAAAgI,cAAA,SAAOE,QAAQ,gBAAf,sBACAH,EAAA/H,EAAAgI,cAAA,SACII,KAAK,eACLH,UAAU,eACViD,IAAKhE,EAAS,CAAEiE,UAAU,EAAMC,UAAW,OAE9C/D,EAAO2M,cAAgBjM,EAAA/H,EAAAgI,cAAA,mCAIhCD,EAAA/H,EAAAgI,cAAA,SAAOC,UAAU,iBAAiBH,KAAK,SAASuD,MAAM,cAE1DtD,EAAA/H,EAAAgI,cAAA,sCAC6BS,KCe1B0B,EAzHK,SAAA7E,GAClB,IAAAO,EAA8BC,mBAAS,MAAvCC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GACAI,GADAF,EAAA,GAAAA,EAAA,GAC4CD,mBAAS,IAArDI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAAOoQ,EAAPnQ,EAAA,GAAuBoM,EAAvBpM,EAAA,GACAG,EAAgDP,mBAAS,IAAzDQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAAOoM,EAAPnM,EAAA,GAAyBgQ,EAAzBhQ,EAAA,GACQf,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aACXuD,EAAWxD,EAAQyD,UAAUC,OAC7ByJ,EAAiBnN,EAAQyD,UAAUmB,YAEzC1D,EAA+BX,mBAAS,IAAxCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAAOtB,EAAPuB,EAAA,GAAkB6P,EAAlB7P,EAAA,GACAG,EAA0Cf,mBAAS,GAAnDgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAO2P,EAAP1P,EAAA,GAAsB2P,EAAtB3P,EAAA,GACAqF,EAAsCrG,oBAAS,GAA/CsG,EAAAnI,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,GAAOuK,EAAPtK,EAAA,GAAoBuK,EAApBvK,EAAA,GACA9E,oBAAU,WACRsP,KACC,IAEH,IAAMX,EAAO,eAAA1O,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAA5H,EAAOqT,GAAP,IAAA9N,EAAA,OAAArF,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACdqW,EAAiBvD,EAAMD,OADT/S,EAAAE,KAAA,EAEGb,EAAwBiG,EAAamC,SAAS,IAFjD,QAERvC,EAFQlF,EAAA8B,QAIZuU,EAAUnR,GACVuR,GAAe,IALH,wBAAAzW,EAAAgB,SAAArB,MAAH,gBAAAL,GAAA,OAAA+H,EAAA7H,MAAAC,KAAAC,YAAA,GASPiX,EAAW,eAAAhP,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlG,EAAO2R,GAAP,IAAAjS,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACCsS,EAAetJ,QAAQ0N,iBAAiB5D,EAAMD,MAA9C,sBAAA9O,OAA2E+O,EAAMD,QAASnJ,KAAK,CAChHP,KAAM/D,EAAamC,SAAS,GAC5B4C,SAAU,OAHM,OACdtJ,EADcW,EAAAI,KAKlBH,QAAQC,IAAI,uEAA8Db,GALxD,wBAAAW,EAAAV,SAAAK,MAAH,gBAAAH,GAAA,OAAAyG,EAAAnI,MAAAC,KAAAC,YAAA,GAQXmX,EAAU,eAAA5D,EAAAlP,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlF,EAAO2Q,GAAP,IAAAjS,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACE2I,EAASK,QAAQc,QAAQwI,EAAe5S,QAASoT,EAAMD,OAAOnJ,KAAK,CACpFP,KAAM/D,EAAamC,SAAS,GAC5B4C,SAAU,OAHK,OACbtJ,EADawB,EAAAT,KAKjBH,QAAQC,IAAI,kEAAyDb,GALpD,wBAAAwB,EAAAvB,SAAAqB,MAAH,gBAAAlB,GAAA,OAAA8R,EAAAzT,MAAAC,KAAAC,YAAA,GAQVgX,EAAU,eAAApH,EAAAvL,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAjD,IAAA,IAAAvD,EAAA+V,EAAAjE,EAAA,OAAAhT,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cAAAuE,EAAAvE,KAAA,EACE2I,EAASK,QACzBC,cACAC,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAHrB,OAIjB,IAHI1G,EADa0D,EAAA3C,MAIJ,EAAG,CAGd,IAFAsQ,EAAkBrR,GACZ+V,EAAc,GACXjE,EAAQ,EAAGA,GAAS9R,EAAQ8R,IACnCiE,EAAYhE,KAAK,CAAEC,MAAOF,EAAOG,MAAO,GAAIiC,UAAU,EAAO8B,gBAAgB,IAE/ED,EAAYlG,IAAZ,eAAAnB,EAAA1L,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAgB,SAAAhE,EAAMyP,GAAN,IAAAgE,EAAAC,EAAA,OAAApX,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACa2I,EAASK,QAAQgO,QAAQlE,EAAMD,OAAO3J,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KADtF,YACRuP,EADQnT,EAAA/B,MAAA,CAAA+B,EAAA3D,KAAA,gBAGZ8S,EAAMA,MAAQgE,EAHFnT,EAAA3D,KAAA,EAIkB2I,EAASK,QAAQiO,YAAYnE,EAAMD,OAAO3J,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAJ/F,QAINwP,EAJMpT,EAAA/B,QAOVkR,EAAMiC,SAAWgC,IAAoBzE,EAAe5S,SAEtDwW,EAAoB,SAAA7D,GAAgB,SAAAtO,OAAAF,OAAA0P,EAAA,EAAA1P,CAAQwO,GAAR,CAA0BS,MATlD,yBAAAnP,EAAA7C,SAAAuC,MAAhB,gBAAArB,GAAA,OAAAuN,EAAAjQ,MAAAC,KAAAC,YAAA,IAVe,wBAAA+E,EAAAzD,SAAAsD,MAAH,yBAAAgL,EAAA9P,MAAAC,KAAAC,YAAA,GAkChB,OAEEmI,EAAA/H,EAAAgI,cAAA,eACED,EAAA/H,EAAAgI,cAAA,yBAGAD,EAAA/H,EAAAgI,cAAC2M,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B/M,EAAA/H,EAAAgI,cAAA,aACED,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAAA,oBACAD,EAAA/H,EAAAgI,cAAA,2BACAD,EAAA/H,EAAAgI,cAAA,sBAGJD,EAAA/H,EAAAgI,cAAA,aACGyK,EAAiB6E,QAAUjB,EAAiB5D,EAAiB3B,IAAI,SAACoC,EAAO+B,GAAR,OAChElN,EAAA/H,EAAAgI,cAAA,MAAIgJ,IAAKiE,GACPlN,EAAA/H,EAAAgI,cAAA,UAAKkL,EAAMD,OACXlL,EAAA/H,EAAAgI,cAAA,MAAIC,UAAWzC,EAAamC,SAAS,KAAOuL,EAAMA,MAAO,gBAAkB,MAA3E,IAAmFA,EAAMA,OACzFnL,EAAA/H,EAAAgI,cAAA,UAAKxC,EAAamC,SAAS,KAAOuL,EAAMA,MACxCA,EAAMiC,SACJpN,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAMuO,EAAY3D,KAAnC,2BACAnL,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAMyO,EAAW7D,KAAlC,wBACAnL,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAM2N,EAAQ/C,KAA/B,iBAEFnL,EAAA/H,EAAAgI,cAAAD,EAAA/H,EAAAmI,SAAA,QAIPJ,EAAA/H,EAAAgI,cAAA,eACE0O,GAAe3O,EAAA/H,EAAAgI,cAACuP,EAAD,CACdhS,QAASA,EACTC,aAAcA,EACdoO,QAAS4C,EACTpR,GAAID,EACJrF,QAAS0F,EAAamC,SAAS,MAGnCI,EAAA/H,EAAAgI,cAACwP,EAAD,CACEjS,QAASA,EACTC,aAAcA,EACdiN,iBAAkBA,MCpHpBnH,EAASC,iBAAO,sCAmLPkM,EAjLK,SAAAnS,GAEhB,IAAQC,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,aACjBK,EAAkDC,mBAAS,IAA3DC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAO6R,EAAP3R,EAAA,GAA0B4R,EAA1B5R,EAAA,GACAE,EAAsDH,mBAAS,IAA/DI,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAAOgG,EAAP/F,EAAA,GAA4BgG,EAA5BhG,EAAA,GACAG,EAA0CP,mBAAS,IAAnDQ,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GACAI,GADAH,EAAA,GAAAA,EAAA,GAC8BR,mBAAS,KAAvCY,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAAOhB,EAAPiB,EAAA,GAAgBkR,EAAhBlR,EAAA,GACAG,EAAkDf,oBAAS,GAA3DgB,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAOgR,EAAP/Q,EAAA,GAA0BgR,EAA1BhR,EAAA,GAEAqF,EAAgCrG,mBAAS,GAAzCsG,EAAAnI,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,GAAOxG,EAAPyG,EAAA,GAAiB2L,EAAjB3L,EAAA,GACAE,EAAwCxG,mBAAS,MAAjDyG,EAAAtI,OAAAC,EAAA,EAAAD,CAAAqI,EAAA,GAAO0L,EAAPzL,EAAA,GAAqB0L,EAArB1L,EAAA,GACMxD,EAAWxD,EAAQyD,UAAUC,OAE7ByJ,EAAiBnN,EAAQyD,UAAUmB,YACnC+N,EAAgB,CAAC,QAAS,SAAU,OAI1C5Q,oBAAU,WAAM,SAAA4B,IAAA,OAAAA,EAAAjF,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KACZ,SAAAlG,IAAA,IAAAN,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACyB2I,EAASK,QACzB+O,gBAAgB3S,EAAamC,SAAS,IACtC2B,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAH5C,OACU1G,EADVW,EAAAI,KAIIH,QAAQC,IAAI,YAAab,GACrBA,GAAUA,EAAOqW,QAEjBhX,QAAQ8X,IACJnX,EAAO6P,IAAP,eAAAvJ,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAW,SAAA5H,EAAOuR,GAAP,IAAAiH,EAAAC,EAAAC,EAAAC,EAAA,OAAAzY,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmBsS,EAAetJ,QACpCqP,aAAarH,EAAI5L,EAAamC,SAAS,IACvC2B,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KAHjC,cACD0Q,EADCnY,EAAA8B,KAAA9B,EAAAE,KAAA,EAKwB2I,EAASK,QAAQoL,sBAAsBpD,GAAI9H,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KALtG,cAKD2Q,EALCpY,EAAA8B,KAMPH,QAAQC,IAAIsP,EAAI,iFAAwEkH,EAAiB7S,QAAS6S,EAAiBpF,OAN5HhT,EAAAE,KAAA,EAQe2I,EAASK,QAAQsP,SAAStH,GAAI9H,KAAK,CAAEC,KAAM/D,EAAamC,SAAS,KARhF,OAQD4Q,EARCrY,EAAA8B,KAUDwW,EAAYzV,KAAK6B,MAAM2T,GAC7B1W,QAAQC,IAAI,yEAAgE0W,GAC5Eb,EAAqB,SAAAD,GAAiB,SAAAvT,OAAAF,OAAA0P,EAAA,EAAA1P,CAAQyT,GAAR,CAAAzT,OAAA0G,EAAA,EAAA1G,CAAA,CAA6B2P,QAASxC,EAAIuH,QAASN,EAAaO,aAAcN,EAAiBpF,MAAOxN,cAAe4S,EAAiB7S,SAAY+S,OAZjL,yBAAAtY,EAAAgB,SAAArB,MAAX,gBAAAL,GAAA,OAAA+H,EAAA7H,MAAAC,KAAAC,YAAA,KAgBRiC,QAAQC,IAAI,yBAA0B4V,GAxB1C,wBAAA9V,EAAAV,SAAAK,OADY7B,MAAAC,KAAAC,YAAA,WAAAsJ,EAAAxJ,MAAAC,KAAAC,WA2BZ4J,IACD,IAEHlC,oBAAU,WACN,GAAG0Q,EAAc,CACb,IAAM9I,EAAO8I,EAAapN,MAAMiO,MAAM,KAChCC,EAAU5J,EAAKA,EAAKoI,OAAS,GACnCzV,QAAQC,IAAI,sEAA6DgX,GACpD,eAAAjR,EAAA5D,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAlF,EAAOiK,GAAP,IAAAvL,EAAA2O,EAAAC,EAAA,OAAA9P,EAAAC,EAAAC,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACCkL,EAAOwE,OAAOC,IAAIvD,EAAK,CAAEwD,QAAS,MADnC,OACd/O,EADcwB,EAAAT,KAEd4N,GAAS,IAAIK,aAAcC,OAAOjP,EAAOkP,MAAMC,MAAM,GAAI,GACzDP,EAAeD,EAAOQ,MAAM,GAClCvO,QAAQC,IAAI,iFAAwE+N,GACpF+H,EAAW/H,GALS,wBAAApN,EAAAvB,SAAAqB,MAAH,gBAAAnB,GAAA,OAAAyG,EAAAnI,MAAAC,KAAAC,YAAA,EAQrB8P,CAAgBoJ,KAIrB,CAACd,IAGJ,IAAMe,EAAW,eAAA5F,EAAAlP,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAhE,EAAOmQ,GAAP,IAAAoF,EAAA,OAAAjZ,EAAAC,EAAAC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAEasS,EAAetJ,QAAQ6P,kBAAkBrF,GAAS9J,KAAK,CAChFP,KAAM/D,EAAamC,SAAS,GAC5ByC,SAAU,EAAAC,KAAAC,IAAI,GAAM,IAAIC,SAAU,MAJtB,OAEVyO,EAFUjV,EAAA/B,KAMhBH,QAAQC,IAAI,kEAAyDkX,GANrD,wBAAAjV,EAAA7C,SAAAuC,MAAH,gBAAApC,GAAA,OAAA8R,EAAAzT,MAAAC,KAAAC,YAAA,GAsBXsZ,EAAW,eAAA1J,EAAAvL,OAAAuD,EAAA,EAAAvD,CAAAlE,EAAAC,EAAAyH,KAAG,SAAAjD,EAAO4O,GAAP,OAAArT,EAAAC,EAAAC,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,OAChByB,QAAQC,IAAI,sEAA6DsR,GACpE4E,GAAgBA,IAAiB5E,IAASyE,IAC3CI,EAAgB7E,GAChB0E,GAAqB,IAJT,wBAAAnT,EAAAzD,SAAAsD,MAAH,gBAAApC,GAAA,OAAAoN,EAAA9P,MAAAC,KAAAC,YAAA,GAOjB0H,oBAAU,WApByB,IAACmD,EAsB5BuN,GAAgBA,EAAatS,gBAAkBuG,IAC/CC,EAAuB8L,EAAatS,eAvBR+E,EAwBDuN,EAAavN,YAvB5C5I,QAAQC,IAAI,2FAAkF2I,GAC9FyN,EAAcpH,IAAI,SAAC1I,EAAM6M,GAEjBxK,EAAY0O,SAAS/Q,KACrBvG,QAAQC,IAAI,0EAAiEmT,GAC7EpT,QAAQC,IAAI,2EAAkEsG,GAE9E2P,EAAY9C,MAkBhB6C,GAAqB,GACrBjW,QAAQC,IAAI,gBAAiB6D,GAC7B9D,QAAQC,IAAI,4BAA6BmK,KAI9C,CAACiN,EAAalB,EAAcH,IAsB/B,OACI9P,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,yBACAD,EAAA/H,EAAAgI,cAAA,0BAEAD,EAAA/H,EAAAgI,cAAC2M,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB/M,EAAA/H,EAAAgI,cAAA,aACID,EAAA/H,EAAAgI,cAAA,UACID,EAAA/H,EAAAgI,cAAA,oBACAD,EAAA/H,EAAAgI,cAAA,kBACAD,EAAA/H,EAAAgI,cAAA,yBACAD,EAAA/H,EAAAgI,cAAA,iBACAD,EAAA/H,EAAAgI,cAAA,sBAGRD,EAAA/H,EAAAgI,cAAA,aAEQ0P,EAAkB5G,IAAI,SAACsC,EAAOgG,GAAR,OACrBrR,EAAA/H,EAAAgI,cAAA,MAAIgJ,IAAKoI,GACNrR,EAAA/H,EAAAgI,cAAA,UAAKoL,EAAMQ,SACX7L,EAAA/H,EAAAgI,cAAA,UAAKoL,EAAMhL,MACXL,EAAA/H,EAAAgI,cAAA,UAAKoL,EAAM3I,aACX1C,EAAA/H,EAAAgI,cAAA,UAAKoL,EAAMuF,SACX5Q,EAAA/H,EAAAgI,cAAA,UAAKoL,EAAMuF,QAAU,EACjB5Q,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,kBAAMyQ,EAAY3F,EAAMQ,WAAzC,aA3CFyF,EA4CmBjG,EAAMwF,aA5CnBU,EA4CiC9T,EAAamC,SAAS,GA3C5E0R,IAASC,EA4CYvR,EAAA/H,EAAAgI,cAAA,UAAQM,QAAS,WAAc,OAAO4Q,EAAY9F,KAAlD,+BACA,wBA9CP,IAACiG,EAAMC,MAsDvBzB,GAAqB9P,EAAA/H,EAAAgI,cAAC4J,EAAD,CAClBrM,QAASA,EACTC,aAAcA,EACdC,QAASA,EACTC,cAAeuG,EACftG,SAAUA,EACVC,WAxDgB,SAAC2T,GACzBzB,EAAqByB,QC/GdC,EAZE,SAAAlU,GACqBA,EAA1BC,QAA0BD,EAAjBE,aAGjB,OACIuC,EAAA/H,EAAAgI,cAAA,eACID,EAAA/H,EAAAgI,cAAA,wBC8GGyR,GA9GH,SAAAnU,GACV,IAAAO,EAA0DC,mBAAS,CACjEN,aAAc,KACdkU,SAAS,IAFX3T,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAAO8T,EAAP5T,EAAA,GAA8B6T,EAA9B7T,EAAA,GAIQR,EAAYD,EAAZC,QAqBR,OAnBA+B,oBACE,WACE,IAAMuS,EAActU,EAAQuU,MAAMC,UAAU,WAE1C,IAAMvU,EAAeD,EAAQuU,MAAME,WAE/BxU,EAAayU,cAAcC,aAC7BN,EAAyB,CACvBpU,aAAcA,EACdkU,SAAS,MAIf,OAAO,WACLG,MAGJ,CAACtU,EAAQuU,MAAOH,IAEXA,EAAsBD,QAC3B3R,EAAA/H,EAAAgI,cAAA,OAAKmS,MAAM,UACTpS,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAAA,KACE6J,KAAK,uBACL9C,OAAO,SACPqL,IAAI,uBAHN,0DAFJ,sCAaArS,EAAA/H,EAAAgI,cAACqS,EAAA,EAAD,KACEtS,EAAA/H,EAAAgI,cAAA,WACED,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,cACbF,EAAA/H,EAAAgI,cAAA,OACEK,IACE,kEAGJN,EAAA/H,EAAAgI,cAAA,yBAEFD,EAAA/H,EAAAgI,cAAA,WACAD,EAAA/H,EAAAgI,cAAA,WACAD,EAAA/H,EAAAgI,cAAA,WAEAD,EAAA/H,EAAAgI,cAAA,OAAKC,UAAU,QACbF,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAACqS,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAEFvS,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAACqS,EAAA,EAAD,CAAMC,GAAG,WAAT,iBAEFvS,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAACqS,EAAA,EAAD,CAAMC,GAAG,gBAAT,0BAEFvS,EAAA/H,EAAAgI,cAAA,UACED,EAAA/H,EAAAgI,cAACqS,EAAA,EAAD,CAAMC,GAAG,aAAT,eAKNvS,EAAA/H,EAAAgI,cAAA,WACAD,EAAA/H,EAAAgI,cAAA,WACAD,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,KACExS,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,CAAOC,OAAK,EAACtL,KAAK,KAChBnH,EAAA/H,EAAAgI,cAACyS,EAAD,CACElV,QAASA,EACTC,aAAcmU,EAAsBnU,gBAGxCuC,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,CAAOrL,KAAK,WACVnH,EAAA/H,EAAAgI,cAAC0S,EAAD,CACEnV,QAASA,EACTC,aAAcmU,EAAsBnU,gBAGxCuC,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,CAAOrL,KAAK,gBACVnH,EAAA/H,EAAAgI,cAAC2S,EAAD,CACEpV,QAASA,EACTC,aAAcmU,EAAsBnU,gBAGxCuC,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,CAAOrL,KAAK,kBACVnH,EAAA/H,EAAAgI,cAAC4S,EAAD,CACErV,QAASA,EACTC,aAAcmU,EAAsBnU,gBAGxCuC,EAAA/H,EAAAgI,cAACuS,EAAA,EAAD,CAAOrL,KAAK,aACVnH,EAAA/H,EAAAgI,cAAC6S,EAAD,CACEtV,QAASA,EACTC,aAAcmU,EAAsBnU,kDCnG5C5C,GAAO,IAAIkY,IAAKra,OAAOmC,KAAKmY,iBAG5BvP,GAAU,CACdxC,UAAW,CACT,CACEgS,aAAc,SACdC,aAAc,IAAIrY,GAAKsY,IAAIC,SAASlS,GAAOmS,IAAK,+CAElD,CACEJ,aAAc,cACdC,aAAc,IAAIrY,GAAKsY,IAAIC,SAAShR,GAAYiR,IAAK,gDAGzDxY,KAAM,CACJyY,OAAO,EAEPC,eAAgB,IAAIR,IAAKra,OAAOmC,KAAKmY,kBAGvCQ,MAAO,CACL5T,SAAU,MAKRpC,GAAU,IAAIiW,WAAQhQ,IAE5BiQ,IAASC,OAAO3T,EAAA/H,EAAAgI,cAAC2T,GAAD,CAAKpW,QAASA,KAAYqW,SAASC,eAAe","file":"static/js/main.0e930691.chunk.js","sourcesContent":["import { encrypt } from 'eth-sig-util'\nimport web3 from 'web3'\nvar EthCrypto = require('eth-crypto');\nexport async function getPublicKeyViaMetamask(address) {\n    return new Promise((resolve, reject) => {\n        window.ethereum.sendAsync(\n            {\n                jsonrpc: '2.0',\n                method: 'eth_getEncryptionPublicKey',\n                params: [address],\n                // from: address,\n            },\n            function (error, encryptionpublickey) {\n                if (!error) {\n                    resolve(encryptionpublickey.result)\n                } else {\n                    reject(error)\n                }\n            }\n        )\n    })\n}\n\nexport async function metamaskEncryptData(message, pubKey) {\n    console.log(message)\n    const encrypted = await EthCrypto.encryptWithPublicKey(\n        pubKey, // publicKey\n        message // message\n    );\n    console.log(\"🚀 ~ file: metamask.js ~ line 30 ~ metamaskEncrypt ~ encrypted\", encrypted)\n\n    const encryptedMessage = EthCrypto.cipher.stringify(\n        encrypted\n    )\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\nexport async function metamaskEncrypt(message, pubKey) {\n    console.log(\"🚀 ~ file: metamask.js ~ line 41 ~ metamaskEncrypt ~ pubKey\", pubKey)\n    console.log(message)\n\n    const enc = encrypt(\n        pubKey,\n        { data: message },\n        'x25519-xsalsa20-poly1305'\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 31 ~ metamaskEncrypt ~ enc\", enc)\n    const encryptedMessage = web3.utils.toHex(\n        JSON.stringify(\n            enc\n        )\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 54 ~ metamaskEncrypt ~ encryptedMessage\", encryptedMessage)\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\n\nvar handle = (promise) => {\n    return promise\n        .then(data => ([data, undefined]))\n        .catch(error => Promise.resolve([undefined, error]));\n}\n\nexport async function decryptPrivateKey(encryptedMessage, account) {\n    //console.log(`encryptedMessage: ${encryptedMessage}`)\n    const [decryptedMessage, decryptErr] = await handle(window.ethereum.request({\n        method: 'eth_decrypt',\n        params: [encryptedMessage, account],\n    }));\n\n    if (decryptErr) { console.error(decryptErr.message) }\n    else {\n        console.log(`decryptedMessage: ${decryptedMessage}`)\n        return decryptedMessage\n    }\n}\n\nexport async function decryptUriFile(encryptedMessage, privateKey) {\n    console.log(`encryptedMessage: ${encryptedMessage}`)\n    const parsedEncInfo = EthCrypto.cipher.parse(encryptedMessage)\n    const message = await EthCrypto.decryptWithPrivateKey(\n        privateKey, parsedEncInfo)\n    console.log(\"🚀 ~ file: metamask.js ~ line 85 ~ decryptMessage ~ message\", message)\n    return message;\n}\n","import EthCrypto from 'eth-crypto';\nimport { metamaskEncrypt, getPublicKeyViaMetamask } from './metamask';\n\nexport async function getAccount() {\n    return await window.ethereum.selectedAddress\n}\n\nexport function getNewAccount() {\n    return EthCrypto.createIdentity();\n}\n\n\nexport async function encryptData(publicKey, data) {\n    const pk = await getPublicKeyViaMetamask(publicKey)\n    console.log(\"🚀 ~ file: cypher.js ~ line 19 ~ encrypt ~ pk\", pk)\n    return await metamaskEncrypt(data, pk)\n}\n\nexport async function decrypt(cMessage) {\n    const cyperObj = EthCrypto.cipher.parse(cMessage);\n    return await EthCrypto.decryptWithPrivateKey(\n        'bdb335a3c6dceda42eb92e6479f326d68d86bdf5237c41ff1eedf961813d2eb4', // privateKey\n        cyperObj // encrypted-data\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst SetDecrypt = props => {\n\n    const { drizzle, drizzleState, encData, encPrivateKey, typeData, showDialod } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decPk, setDecPk] = useState(false);\n    const [decInfoShow, setDecInfoShow] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decPk) {\n            async function getDecryptMessage() {\n                if (encPrivateKey !== '') {\n                    const dm = await decryptPrivateKey(encPrivateKey, drizzleState.accounts[0]);\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                    setDecInfoShow(true)\n                }\n            }\n            getDecryptMessage()\n\n        }\n    }, [decPk, encPrivateKey]);\n\n    useEffect(() => {\n        if (decryptedPK && encData) {\n            async function getDecryptMessage() {\n                const dm = await decryptUriFile(encData, decryptedPK);\n                setDecryptedInfo(dm)\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decryptedPK, encData]);\n\n    // const onFileChange = (event) => {\n    //     let file = event.target.files[0];\n\n    //     let fileReader = new FileReader();\n    //     fileReader.readAsText(file);\n\n    //     fileReader.onload = (event) => {\n    //         let fileAsText = event.target.result;\n    //         setEncryptedInfo(fileAsText);\n    //     };\n    // };\n\n    const showDecryptByTypeData = (type) => {\n        return (\n            <>\n                {type == '0' && <div name=\"decrypredData\"\n                    className=\"u-full-width\">{decryptedInfo}</div>}\n                {type == '1' && <div><img name=\"decrypredData\"\n                    className=\"u-full-width\" src={decryptedInfo} />\n                </div>}\n            </>\n        )\n    }\n\n    return (\n        <section>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    {showDecryptByTypeData(typeData)}\n\n                </div>\n            </div>\n            <button onClick={() => setDecPk(!decPk)} >Decrypt Data</button>\n            <button onClick={() => showDialod(false)} >close</button>\n        </section>\n    );\n};\nexport default SetDecrypt;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst MintNFT = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const [countTokens, setCountTokens] = useState(0);\n    const { drizzle, drizzleState, ipfsLink, encryptedKey, typeData } = props;\n    const contract = drizzle.contracts.EncNft;\n\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .totalSupply()\n                .call({ from: drizzleState.accounts[0] });\n                console.log('result !== countTokens :>> ', result, countTokens);\n            if (+result !== countTokens) {\n                const numResult = +result \n                console.log(\"🚀 ~ file: MintNFT.js ~ line 28 ~ countOfTokens ~ numResult\", numResult)\n                setCountTokens(numResult)\n                console.log('countTokens :>> ', countTokens);\n            }\n            \n\n        }\n        countOfTokens()\n    }, [])\n    const onSubmit = async (data) => {\n\n        const stringUri = setUri(data);\n       \n        console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.mint(drizzleState.accounts[0], countTokens + 1, stringUri, encryptedKey).send({ from: drizzleState.accounts[0] })\n        if (resMint) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 21 ~ onSubmit ~ resMint\", resMint)\n            setHashMint(resMint.transactionHash)\n        }\n    };\n    const approveNft = async () => {\n        console.log('countTokens :>> ', countTokens);\n        // countTokens ???\n        const res = await contract.methods.approve(drizzle.contracts.MarketPlace.address, countTokens).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        if (res) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 45 ~ approveNft ~ res\", res)\n            getTxStatus()\n        }\n    }\n        const setUri = data => {\n        \n            console.log('typeData :>> ', typeData);\n            if(typeData == 0) {\n                data.description += ' #text'\n            }\n            if(typeData == 1) {\n                data.description += ' #image'\n            }\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 56 ~ data\", data)\n            const uri = { ...data, image: ipfsLink }\n            return JSON.stringify(uri)\n        }; \n\n        const getTxStatus = () => {\n            // get the transaction states from the drizzle state\n            const { transactions, transactionStack } = drizzleState;\n\n            // get the transaction hash using our saved `stackId`\n            const txHash = transactionStack[stackId];\n\n            // if transaction hash does not exist, don't display anything\n            if (!txHash) return null;\n\n            // otherwise, return the transaction status\n            return `Transaction status: ${transactions[txHash] &&\n                transactions[txHash].status}`;\n        };\n\n        return (\n            <section>\n                <div>Mint new NFT to owner</div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Name</label>\n                            <input\n                                name=\"name\"\n                                className=\"u-full-width\"\n                                placeholder=\"Test NFT\"\n                                ref={register({ required: true, maxLength: 42 })}\n                            />\n                            {errors.name && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Description of the NFT</label>\n                            <input\n                                name=\"description\"\n                                className=\"u-full-width\"\n                                placeholder=\"string data\"\n                                ref={register({ required: false, maxLength: 8000 })}\n                            />\n                            {errors.description && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n\n                    <input className=\"button-primary\" type=\"submit\" value=\"Mint\" />\n                </form>\n                <div>\n                    Hash mint transaction:  {hashMint}\n                </div>\n                {/* <TransferNFT drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    ipfsLink={ipfsLink} /> */}\n                <button onClick={() => approveNft()}>Approve to MarketPlace contract</button>\n            </section>\n        );\n    };\n\n    export default MintNFT;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { encrypt, encryptData, getAccount, getNewAccount } from \"./cypher\";\nimport SetDecrypt from \"./SetDecrypt\";\nimport { create } from 'ipfs-http-client'\nimport { metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\nimport MintNFT from \"./MintNFT\";\nimport imageToBase64 from 'image-to-base64/browser';\n\nimport { Dropdown, FloatingLabel, Form, FormControl, InputGroup, SplitButton, Button } from \"react-bootstrap\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\nconst options = [\n    { value: 0, label: 'text' },\n    { value: 1, label: 'image' },\n    { value: 2, label: 'video' },\n    { value: 3, label: 'audio' }\n]\n\nconst UploadIPFS = props => {\n    const [fileUrl, updateFileUrl] = useState(``)\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [encryptedData, setEncryptedData] = useState('');\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [customerAddress, setCustomerAddress] = useState('');\n    const { drizzle, drizzleState } = props;\n    const [cid, setCid] = useState('')\n    const [textFromIpfsFIle, setTextFromIpfsFIle] = useState('')\n    const [newPrivateKey, setNewPrivateKey] = useState('')\n    const [newPublicKey, setNewPublicKey] = useState('')\n    const [newAddress, setNewAddress] = useState('')\n    const [creatorAddress, setCreatorAddress] = useState('')\n    const [typeDataToEncrypt, setTypeDataToEncrypt] = useState(0)\n    const [selectedOption, setSelectedOption] = useState(options[0].value);\n\n    const [textArea, setTextArea] = useState('')\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    async function onChange(e) {\n        const file = e.target.files[0]\n        try {\n            const added = await client.add(file)\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            updateFileUrl(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n\n    const onSubmit = data => {\n        console.log(\"🚀 ~ file: UploadIPFS.js ~ line 48 ~ data\", data)\n        setValue(data);\n    };\n\n    const encryptPrivateKeyForNFTFile = async () => {\n\n        const encData = await encryptData(creatorAddress, newPrivateKey)\n        if (encData !== '') {\n            setEncryptedPrivateKey(encData)\n        }\n\n    };\n\n    const setValue = async value => {\n        console.log('clearData :>> ', clearData);\n        setCustomerAddress(value.addressToEncrypt)\n\n        const encData = await metamaskEncryptData(value.dataToEncrypt || clearData || textArea, newPublicKey)\n        if (encData !== '') {\n            setEncryptedData(encData)\n        }\n    };\n\n    const downloadToFile = (content, filename, contentType) => {\n        const a = document.createElement('a');\n        const file = new Blob([content], { type: contentType });\n\n        a.href = URL.createObjectURL(file);\n        a.download = filename;\n        a.click();\n\n        URL.revokeObjectURL(a.href);\n    };\n\n    useEffect(async () => {\n        const address = await getAccount()\n        if (address) {\n            setCreatorAddress(address)\n        }\n\n    }, [getAccount, setCreatorAddress])\n\n    useEffect(() => {\n        if (encryptedData && creatorAddress) {\n            async function sendEncryptInfoToIPFS() {\n                // downloadToFile(encryptedData, `${customerAddress}.txt`, 'text/plain');\n                const added = await client.add(encryptedData)\n                setCid(added.path)\n                const url = `https://ipfs.infura.io/ipfs/${added.path}`\n                updateFileUrl(url)\n            }\n\n            sendEncryptInfoToIPFS();\n        }\n\n\n    }, [encryptedData, creatorAddress])\n\n\n    const onFileChange = (event) => {\n        console.log('event.target :>> ', event.target.files);\n        let file = event.target.files[0];\n        console.log('selectedOption :>> ', selectedOption); \n            let fileReader = new FileReader();\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                let fileAsText = event.target.result;\n                console.log(\"🚀 ~ file: UploadIPFS.js ~ line 120 ~ onFileChange ~ fileAsText\", fileAsText)\n                setClearData(fileAsText);\n            };\n            fileReader.onerror = (error) => console.error('Error: ', error); \n        \n    };\n\n    const getPath = () => {\n        var inputName = document.getElementById('file1');\n        var imgPath;\n\n        imgPath = inputName.value;\n        alert(imgPath);\n        return imgPath;\n    }\n\n    const getInfoFromIPFS = async () => {\n        if (fileUrl) {\n            const result = await client.object.get(cid, { timeout: 30000 })\n            const string = new TextDecoder().decode(result.Data).slice(0, -3);\n            const cuttedString = string.slice(5)\n            setTextFromIpfsFIle(cuttedString)\n        }\n    }\n\n    const generateKeys = () => {\n        const newIdentity = getNewAccount()\n        setNewPrivateKey(newIdentity.privateKey)\n        setNewPublicKey(newIdentity.publicKey)\n        setNewAddress(newIdentity.address)\n    }\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    const handleChange = (value, selectOptionSetter) => {\n        selectOptionSetter(value)\n        // handle other stuff like persisting to store etc\n    }\n    const handleTextAreaChange = (event) => {\n        if (event && event.target.value) {\n            setTextArea(event.target.value)\n            setClearData(event.target.event);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>IPFS Example</h1>\n            <section>\n                <h2>Encryption private key via owner public key</h2>\n\n                <button onClick={() => generateKeys()}>Generate keys for encryption a file</button>\n                <div>Private, public, address</div>\n                <div>pk: {newPrivateKey}</div>\n                <div>pubkey: {newPublicKey}</div>\n                <div>add: {newAddress}</div>\n                <div>Creator address{creatorAddress}</div>\n\n                <button onClick={() => encryptPrivateKeyForNFTFile()}>Encrypt private key via new owner public key</button>\n                <div>Encrypted private key</div>\n                <div>{encryptedPrivateKey}</div>\n                <br></br>\n                <h2>Encrypt a file via generated public key for NFT URI </h2>\n\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlSelect\">\n                        <Form.Select aria-label=\"Floating label select example\" value={selectedOption}\n                            onChange={e => handleChange(e.target.value, setSelectedOption)}>\n                            {options.map(o => (\n                                <option key={o.value} value={o.value}>{o.label}</option>\n                            ))}\n                        </Form.Select>\n                    </Form.Group>\n                    {selectedOption === '1' ? <><Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                        <label>Paste base64 string of the image</label>\n                        <textarea rows={8} value={textArea} onChange={handleTextAreaChange} />\n                    </Form.Group>\n                        {\n                            selectedOption === '1' && <input type=\"button\" onClick={() => window.open(\"https://www.base64-image.de/\", \"_blank\")} value=\"toBase64\" />\n                        }\n                    </> :\n                        <><div className=\"row\">\n                            <div className=\"u-full-width\">\n                                <label htmlFor=\"mURI\">Data for encryption</label>\n                                <input\n                                    name=\"dataToEncrypt\"\n                                    className=\"u-full-width\"\n                                    placeholder=\"string data\"\n                                    ref={register({ required: false, maxLength: 80000 })}\n                                />\n                                {errors.dataToEncrypt && <span>Use a valid input</span>}\n                            </div>\n                        </div>\n                            <div className=\"row\">\n                                <div className=\"u-full-width\">\n                                    <label htmlFor=\"mURI\">Upload</label>\n                                    <input\n                                        type=\"file\"\n                                        id=\"file1\"\n                                        name=\"fileToEncrypt\"\n                                        className=\"u-full-width\"\n                                        onChange={onFileChange}\n                                    />\n                                    {errors.fileToEncrypt && <span>Use a valid input</span>}\n                                </div>\n                            </div>\n                        </>\n                    }\n                    <input className=\"button-primary\" type=\"submit\" value=\"Submit\" />\n                </form>\n                {/*  <div>{getTxStatus()}</div> */}\n                {/* <UriBlock /> */}\n                {/* <div>{encryptedData}</div> */}\n\n                <SetDecrypt\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    encData={encryptedData}\n                    encPrivateKey={encryptedPrivateKey}\n                    typeData={selectedOption}\n                />\n            </section>\n            <input\n                type=\"file\"\n                onChange={onChange}\n            />\n            <a href={fileUrl}>{fileUrl}</a>\n            <button onClick={() => getInfoFromIPFS()}>Get Info from IPFS</button>\n            <div>{textFromIpfsFIle}</div>\n            <MintNFT\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                ipfsLink={fileUrl}\n                encryptedKey={encryptedPrivateKey}\n                typeData={selectedOption}\n            />\n        </div>\n    );\n};\n\nexport default UploadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {  decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst DownloadIPFS = props => {\n\n    const { drizzle, drizzleState, encData } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decMessage) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptPrivateKey(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage]);\n\n    useEffect(() => {\n        if (decryptedInfo) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptUriFile(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedInfo(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage, decryptedInfo]);\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setEncryptedInfo(fileAsText);\n        };\n    };\n\n\n\n    return (\n        <section>\n            <h2>Download a file from IPFS</h2>\n            <div>{encryptedInfo}</div>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    <div\n                        name=\"decrypredData\"\n                        className=\"u-full-width\"\n\n                    >{decryptedInfo}</div>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"u-full-width\">\n                    <label htmlFor=\"mURI\">Read the file and decrypt</label>\n                    <input\n                        type=\"file\"\n                        name=\"fileToDecrypt\"\n                        className=\"u-full-width\"\n                        onChange={onFileChange}\n                    />\n                    {errors.fileToDecrypt && <span>Use a valid input</span>}\n                </div>\n            </div>\n            <button onClick={() => setDecryptMessage(!decMessage)} >DECRYPT</button>\n\n<h2>Decrypted PK</h2>\n<div>{decryptedPK}</div>\n<h2>Decrypted file info</h2>\n<div>{decryptedInfo}</div>\n        </section>\n    );\n};\n\nexport default DownloadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Accordion } from 'react-bootstrap';\nimport { decryptPrivateKey, getPublicKeyViaMetamask, metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\n\nimport { BigNumber, ethers, utils } from 'ethers'\n\nconst BuyersBoard = props => {\n    const [dataKey, setDataKey] = useState(null);\n    const [totalAmountNft, setTotalAmountNft] = useState(0);\n    const [nftBuyersDetails, setNftBuyersDetails] = useState([]);\n    const [publicKey, setPubKey] = useState('');\n    const [chosenTokenId, setChosenTokenId] = useState(0);\n    const { drizzle, drizzleState, nftOwnersDetails } = props;\n    const contract = drizzle.contracts.EncNft;\n    const contractMarket = drizzle.contracts.MarketPlace;\n    const [showBetForm, setShowBetForm] = useState(false);\n    const [buyerIndex, setBuyerIndex] = useState(-1);\n    useEffect(() => {\n        getBuyers();\n    }, []);\n\n\n    const makeBet = async (owner) => {\n        setChosenTokenId(owner.idNft)\n        const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n        if (pk) {\n            setPubKey(pk)\n            setShowBetForm(true)\n        }\n    }\n    const getBuyers = async () => {\n        let result = await contract.methods\n            .totalSupply()\n            .call({ from: drizzleState.accounts[0] });\n        if (result > 0) {\n            setTotalAmountNft(result)\n            const tokensArray = []\n            for (let index = 1; index <= result; index++) {\n                tokensArray.push({ idNft: index, owner: '', name: '', description: '', image: '' })\n            }\n            tokensArray.map(async token => {\n                try {\n                    const countBuyers = await contractMarket.methods.getCountBuyers(token.idNft).call({ from: drizzleState.accounts[0] })\n\n                    if (countBuyers > 0) {\n                        for (let index = 0; index < countBuyers; index++) {\n                            const buyersMakeBet = await contractMarket.methods.buyersBoard(token.idNft, index).call({ from: drizzleState.accounts[0] });\n                            if (buyersMakeBet) {\n                                setNftBuyersDetails(nftBuyersDetails => [...nftBuyersDetails, {\n                                    idToken: token.idNft, buyerAddress: buyersMakeBet[0], buyerPubKey: buyersMakeBet[1],\n                                    buyerBet: buyersMakeBet[2], goalPurchase: buyersMakeBet[3]\n                                }])\n                            }\n                        }                    }\n                } catch (error) {\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 72 ~ getBuyers ~ error\", error)\n                }\n            })\n        }\n    };\n\n    const sellNft = async (buyer, token) => {\n        if (token.owner === drizzleState.accounts[0]) {\n            // enc-decrypt pryvateKey - enc via buyerPubKey\n            const ownerOfTokenInfo = await contract.methods.getTokenInfoLastOwner(token.idNft).call({ from: drizzleState.accounts[0] });\n\n            const lastEncryptedPrivateKey = ownerOfTokenInfo.encData\n\n            const decryptedPrivateKey = await decryptPrivateKey(lastEncryptedPrivateKey, drizzleState.accounts[0])\n\n            if (decryptedPrivateKey) {\n                const encData = await metamaskEncrypt(decryptedPrivateKey, buyer.buyerPubKey)\n                if (encData !== '') {\n                    const sellInfo = await contractMarket.methods.acceptRateAndTransferToken(token.idNft, buyer.buyerAddress, encData).send({ from: drizzleState.accounts[0], gasPrice: 10 * 10 ** 10, gasLimit: 600000 })\n\n                }\n            }\n\n\n        }\n    }\n\n    const getSellerActions = (buyer, token) => {\n        return (\n            token.owner === drizzleState.accounts[0] && token.approved ?\n                token.owner === drizzleState.accounts[0] && !token.approved ?\n                    'Need to approve to sell' :\n                    <button onClick={() => sellNft(buyer, token)}>Sell NFT</button > :\n\n                ''\n        )\n    }\n    const BuyersOfToken = (token) => {\n        // own address make color red\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th> Buyer address </th>\n                        <th> Buyer rate </th>\n                        <th> Why do I need it </th>\n                        <th> Action </th>\n                    </tr>\n                </thead>\n                <tbody>{\n                    nftBuyersDetails.filter(item => item.idToken === token.idNft).map((buyer, ind) => {\n                        return (buyer.buyerBet > 0 && <tr key={ind}>\n                            <td className={buyer.buyerAddress === drizzleState.accounts[0] ? 'owner-address' : null}> {buyer.buyerAddress} </td>\n                            <td>{utils.formatEther(buyer.buyerBet)}ETH</td>\n                            <td> {buyer.goalPurchase} </td>\n                            <td>{getSellerActions(buyer, token)} </td>\n                        </tr>)\n                    })\n                }</tbody>\n            </Table>)\n    }\n\n\n\n    return (\n        // if it exists, then we display its value\n        <>\n            <h2 > Buyers Boards </h2>\n            <Accordion defaultActiveKey=\"0\" > {\n                nftOwnersDetails.map((token, index) =>\n                    <Accordion.Item eventKey={index} key={index} >\n                        <Accordion.Header onClick={() => setBuyerIndex(index)}> ID NFT: {token.idNft} {token.name} </Accordion.Header>\n                        <Accordion.Body className={buyerIndex === index ? \"active\" : \"inactive\"} >\n                            <div > {token.description} </div> {BuyersOfToken(token)}\n                        </Accordion.Body> </Accordion.Item >\n                )\n            }\n\n            </Accordion>\n        </>\n    );\n};\n\nexport default BuyersBoard;","import React, { useState, useEffect } from \"react\";\nimport { useForm, useFormContext } from \"react-hook-form\";\nimport { BigNumber, ethers, utils } from 'ethers' \n\nconst BetForm = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const { drizzle, drizzleState, pk, address, idToken  } = props;\n    const contract = drizzle.contracts.MarketPlace;\n\n\n    const {register, handleSubmit, watch, errors, setFocus } = useForm();\n    const onSubmit = async (data) => {\n        // const stringUri = setUri(data);\n        const bnValue  = BigNumber.from(utils.parseUnits(data.valueBet, 18))\n        // console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.makeBet(idToken, pk, drizzleState.accounts[0], data.goalPurchase).send({ from: drizzleState.accounts[0], \n            value: bnValue, gasPrice: 10 * 10 ** 10,\n            gasLimit: 400000})\n        if (resMint) {\n            setHashMint(resMint.transactionHash)\n        }\n    };\n\n  \n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    return (\n        <section>\n            <div>Bet params</div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Id token</label>\n                        <input\n                            name=\"tokenId\"\n                            className=\"u-full-width\"\n                            value={idToken}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.tokenId && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"pk\">Public key of your account</label>\n                        <input\n                            name=\"pk\"\n                            className=\"u-full-width\"\n                            value={pk}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.pk && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"address\">Your account address</label>\n                        <input\n                            name=\"address\"\n                            className=\"u-full-width\"\n                            value={address}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.address && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"valueBet\">Your bet</label>\n                        <input\n                            name=\"valueBet\"                            \n                            className=\"u-full-width\"\n                            type=\"number\"\n                            step=\"0.000000000000001\" \n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.valueBet && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"goalPurchase\">Why do I need it? </label>\n                        <input\n                            name=\"goalPurchase\"\n                            className=\"u-full-width\"\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.goalPurchase && <span>Use a valid input</span>}\n                    </div>\n                </div>\n\n                <input className=\"button-primary\" type=\"submit\" value=\"Make Bet\" />\n            </form>\n            <div>\n                Hash mint transaction:  {hashMint}\n            </div>             \n        </section>\n    );\n};\n\nexport default BetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Table } from 'react-bootstrap'; \nimport * as _ from \"lodash\"; \nimport BuyersBoard from \"./BuyersBoard\";\nimport BetForm from \"./BetForm\";\nimport { getPublicKeyViaMetamask } from \"./metamask\"; \n\nconst MarketPlace = props => {\n  const [dataKey, setDataKey] = useState(null);\n  const [totalAmountNft, setTotalAmountNft] = useState(0);\n  const [nftOwnersDetails, setNftOwnersDetails] = useState([]);\n  const { drizzle, drizzleState } = props;\n  const contract = drizzle.contracts.EncNft;\n  const contractMarket = drizzle.contracts.MarketPlace;\n\n  const [publicKey, setPubKey] = useState('');\n  const [chosenTokenId, setChosenTokenId] = useState(0);\n  const [showBetForm, setShowBetForm] = useState(false);\n  useEffect(() => {\n    getCoupons();\n  }, []);\n\n  const makeBet = async (owner) => {\n    setChosenTokenId(owner.idNft)\n    const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n    if (pk) {\n      setPubKey(pk)\n      setShowBetForm(true)\n    }\n  }\n\n  const transferNFT = async (owner) => {\n    let result = await contractMarket.methods.moveTokenForSell(owner.idNft, `Advertise of token ${owner.idNft}`).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 30 ~ transferNFT ~ result\", result)\n  }\n\n  const approveNFT = async (owner) => {\n    let result = await contract.methods.approve(contractMarket.address, owner.idNft).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 51 ~ result ~ result\", result)\n  }\n\n  const getCoupons = async () => {\n    let result = await contract.methods\n      .totalSupply()\n      .call({ from: drizzleState.accounts[0] });\n    if (result > 0) {\n      setTotalAmountNft(result)\n      const ownersArray = []\n      for (let index = 1; index <= result; index++) {\n        ownersArray.push({ idNft: index, owner: '', approved: false, isTokenForSell: false })\n      }\n      ownersArray.map(async owner => {\n        const ownerAddress = await contract.methods.ownerOf(owner.idNft).call({ from: drizzleState.accounts[0] });\n        if (ownerAddress) {\n          owner.owner = ownerAddress\n          const approvedAddress = await contract.methods.getApproved(owner.idNft).call({ from: drizzleState.accounts[0] });\n          \n          if(approvedAddress) {\n            owner.approved = approvedAddress === contractMarket.address\n          }\n          setNftOwnersDetails(nftOwnersDetails => [...nftOwnersDetails, owner])\n        }\n      })\n    }\n\n  };\n\n  const getTxStatus = () => {\n    const { transactions, transactionStack } = drizzleState;\n    // const txHash = transactionStack[stackId];\n    // if (!txHash) return null; \n    // return `Transaction status: ${transactions[txHash] &&\n    //   transactions[txHash].status}`;\n  };\n\n  return (\n    // if it exists, then we display its value\n    <section>\n      <h2>MarketPlace</h2>\n\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID NFT</th>\n            <th>Owner address</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {nftOwnersDetails.length == totalAmountNft ? nftOwnersDetails.map((owner, ind) =>\n            <tr key={ind}>\n              <td>{owner.idNft}</td>\n              <td className={drizzleState.accounts[0] === owner.owner? 'owner-address' : null}> {owner.owner}</td>\n              <td>{drizzleState.accounts[0] === owner.owner ?\n              owner.approved ? \n                <button onClick={() => transferNFT(owner)}>Move NFT for sell place</button> :\n                <button onClick={() => approveNFT(owner)}>Approve NFT for sell</button> :\n                <button onClick={() => makeBet(owner)}> Make BET</button>}</td>\n            </tr>\n          ) : <></>}\n        </tbody>\n      </Table>\n\n      {<section>\n        {showBetForm && <BetForm\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          idToken={chosenTokenId}\n          pk={publicKey}\n          address={drizzleState.accounts[0]}\n        />}\n      </section>}\n      <BuyersBoard\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        nftOwnersDetails={nftOwnersDetails}\n      />\n    </section>\n  );\n};\n\nexport default MarketPlace;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Table } from 'react-bootstrap';\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\nimport { create } from 'ipfs-http-client'\nimport SetDecrypt from \"./SetDecrypt\";\nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\nconst OwnerAssets = props => {\n\n    const { drizzle, drizzleState} = props;\n    const [sellerSoldAmounts, setSellerSoldAmounts] = useState([]);\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [encData, setEncData] = useState('');\n    const [showDecryptModule, setShowDecryptModule] = useState(false);\n\n    const [typeData, setTypeData] = useState(0)\n    const [choosedToken, setChoosedToken] = useState(null)\n    const contract = drizzle.contracts.EncNft;\n\n    const contractMarket = drizzle.contracts.MarketPlace;\n    const typeFileNames = ['#text', '#image', '#qr']\n\n    \n\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .getIdsByAddress(drizzleState.accounts[0])\n                .call({ from: drizzleState.accounts[0] });\n            console.log('result   ', result);\n            if (result && result.length) {\n\n                Promise.all(\n                    result.map(async (id) => {\n                        const soldBalance = await contractMarket.methods\n                            .getOwnerInfo(id, drizzleState.accounts[0])\n                            .call({ from: drizzleState.accounts[0] });\n\n                        const currentOwnerInfo = await contract.methods.getTokenInfoLastOwner(id).call({ from: drizzleState.accounts[0] });\n                        console.log(id, \"🚀 ~ file: OwnerAssets.js ~ line 42 ~ result.map ~  currentOwnerInfo\", currentOwnerInfo.encData, currentOwnerInfo.owner)\n\n                        const uriInfo = await contract.methods.tokenURI(id).call({ from: drizzleState.accounts[0] });\n\n                        const parsedUri = JSON.parse(uriInfo)\n                        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 48 ~ result.map ~ parsedUri\", parsedUri)\n                        setSellerSoldAmounts(sellerSoldAmounts => [...sellerSoldAmounts, { idToken: id, balance: soldBalance, currentOwner: currentOwnerInfo.owner, encPrivateKey: currentOwnerInfo.encData, ...parsedUri }])\n                    })\n                )\n            }\n            console.log('sellerSoldAmounts :>> ', sellerSoldAmounts);\n        }\n        countOfTokens()\n    }, [])\n\n    useEffect(() =>{\n        if(choosedToken) {\n            const path = choosedToken.image.split('/')\n            const cidPath = path[path.length - 1]\n            console.log(\"🚀 ~ file: OwnerAssets.js ~ line 60 ~ useEffect ~ cidPath\", cidPath)\n            const getInfoFromIPFS = async (cid) => {\n                const result = await client.object.get(cid, { timeout: 30000 })\n                const string = new TextDecoder().decode(result.Data).slice(0, -4);\n                const cuttedString = string.slice(6)\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 66 ~ getInfoFromIPFS ~ cuttedString\", cuttedString)\n                setEncData(cuttedString)\n\n            }\n            getInfoFromIPFS(cidPath)\n        }\n        \n\n    }, [choosedToken])\n    \n\n    const withdrawSum = async (idToken) => {\n\n        const resultWithdraw = await contractMarket.methods.sellerWithdrawSum(idToken).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 57 ~ result ~ result\", resultWithdraw)\n    };\n\n    const getTypeDataFromDescription = (description) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 78 ~ getTypeDataFromDescription ~ description\", description)\n        typeFileNames.map((name, ind) => {\n\n            if (description.includes(name)) {\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 80 ~ typeFileNames.map ~ ind\", ind)\n                console.log(\"🚀 ~ file: OwnerAssets.js ~ line 81 ~ typeFileNames.map ~ name\", name)\n\n                setTypeData(ind)\n            }\n        })\n    }\n\n    const decryptInfo = async (token) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 85 ~ decryptInfo ~ token\", token)\n        if (!choosedToken || choosedToken !== token || showDecryptModule) {\n            setChoosedToken(token)\n            setShowDecryptModule(true)\n        }\n    }\n    useEffect(() => {\n \n        if (choosedToken && choosedToken.encPrivateKey !== encryptedPrivateKey)  {\n            setEncryptedPrivateKey(choosedToken.encPrivateKey)\n            getTypeDataFromDescription(choosedToken.description)\n\n            setShowDecryptModule(true)\n            console.log('typeData :>> ', typeData);\n            console.log('encryptedPrivateKey  :>> ', encryptedPrivateKey);\n        } \n\n\n    }, [decryptInfo, choosedToken, showDecryptModule])\n\n\n    const compareAddresses = (add1, add2) => {\n        return add1 === add2\n    }\n\n    const callbackFromDecrypt = (flag) => {\n        setShowDecryptModule(flag)\n    }\n\n    // const showDecryptByTypeData = (type) => {\n    //     return (\n    //         <>\n    //             {type === 0 && <div name=\"decrypredData\"\n    //                 className=\"u-full-width\">{decryptedInfo}</div>}\n    //             {type === 1 && <img name=\"decrypredData\"\n    //                 className=\"u-full-width\" src={decryptedInfo} />}\n    //         </>\n    //     )\n    // }\n\n    return (\n        <section>\n            <h2>Your assets</h2>\n            <h3>Sold tokens </h3>\n\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>ID NFT</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>Sum</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        sellerSoldAmounts.map((token, i) =>\n                        (<tr key={i}>\n                            <td>{token.idToken}</td>\n                            <td>{token.name}</td>\n                            <td>{token.description}</td>\n                            <td>{token.balance}</td>\n                            <td>{token.balance > 0 ?\n                                <button onClick={() => withdrawSum(token.idToken)}>Withdraw</button> :\n                                compareAddresses(token.currentOwner, drizzleState.accounts[0]) ?\n                                    <button onClick={function () { return decryptInfo(token) }}>Decrypt the file to see it </button> :\n                                    'You sold the token'\n                            }</td>\n                        </tr>))\n\n                    }\n\n                </tbody>\n            </Table>\n            {showDecryptModule && <SetDecrypt\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                encData={encData}\n                encPrivateKey={encryptedPrivateKey}\n                typeData={typeData}\n                showDialod={callbackFromDecrypt}\n            />}\n        </section>\n    );\n};\nexport default OwnerAssets;\n","import React, { useState, useEffect } from \"react\";\n\nconst Contacts = props => {\n    const { drizzle, drizzleState } = props;\n\n\n    return (\n        <section>\n            <h2>Contacts</h2>\n\n        </section>\n    );\n};\n\nexport default Contacts;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; \nimport UploadIPFS from \"./UploadIPFS\";\nimport DownloadIPFS from \"./DownloadIPFS\";\nimport MarketPlace from \"./MarketPlace\";\nimport OwnerAssets from \"./OwnerAssets\";\nimport Contacts from \"./Contacts\";\n\nconst App = props => {\n  const [drizzleReadinessState, setDrizzleReadinessState] = useState({\n    drizzleState: null,\n    loading: true\n  });\n  const { drizzle } = props;\n\n  useEffect(\n    () => {\n      const unsubscribe = drizzle.store.subscribe(() => {\n        // every time the store updates, grab the state from drizzle\n        const drizzleState = drizzle.store.getState();\n        // check to see if it's ready, if so, update local component state\n        if (drizzleState.drizzleStatus.initialized) {\n          setDrizzleReadinessState({\n            drizzleState: drizzleState,\n            loading: false\n          });\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    },\n    [drizzle.store, drizzleReadinessState]\n  ); \n  return drizzleReadinessState.loading ? (\n    <div align=\"center\">\n      <h4>\n        <a\n          href=\"https://metamask.io/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Please install Metamask extension and reload the page\n        </a>\n      </h4>\n      Set it on the rinkeby test network\n    </div>\n  ) : (\n    <Router>\n      <div>\n        <div className=\"title_logo\">\n          <img\n            src={\n              \"https://www.devoleum.com/47fa9787d0791533e573aed32e8147a9.png\"\n            }\n          />\n          <h1>Secret NFT</h1>\n        </div> \n        <br /> \n        <br />\n        <br />\n\n        <nav className=\"menu\">\n          <ul> \n            <li>\n              <Link to=\"/\">Market Place</Link>\n            </li>\n            <li>\n              <Link to=\"/assets\">Owner Assets</Link>\n            </li> \n            <li>\n              <Link to=\"/upload-ipfs\">Upload a file to IPFS</Link>\n            </li> \n            <li>\n              <Link to=\"/contacts\">Contacts</Link>\n            </li> \n          </ul>\n        </nav>\n\n        <hr />\n        <br />\n        <Switch>\n          <Route exact path=\"/\">\n            <MarketPlace\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/assets\">\n            <OwnerAssets\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n            </Route>           \n          <Route path=\"/upload-ipfs\">\n            <UploadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/download-ipfs\">\n            <DownloadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/contacts\">\n            <Contacts\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Web3 from \"web3\";\n\n// import drizzle functions and contract artifact\nimport { Drizzle } from \"drizzle\";\nimport MarketPlace from \"./contracts/MarketPlace.json\";\nimport EncNft from \"./contracts/EncNft.json\"\nconst web3 = new Web3(window.web3.currentProvider);\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [\n    {\n      contractName: 'EncNft',\n      web3Contract: new web3.eth.Contract(EncNft.abi, '0x8C151518F690a51aC559eB2eA5A4A6e7AFA75F82') \n    },\n    {\n      contractName: 'MarketPlace',\n      web3Contract: new web3.eth.Contract(MarketPlace.abi, '0xD91f649c4301F9840D2442D3D412C8c014CB0F2A') \n    }    \n  ],\n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:8545\"),\n    customProvider: new Web3(window.web3.currentProvider),\n  },\n  // syncAlways:true,\n  polls: {\n    accounts: 2000,\n  },\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle}/>, document.getElementById('root'));\n"],"sourceRoot":""}