{"version":3,"sources":["metamask.js","cypher.js","SetDecrypt.js","MintNFT.js","UploadIPFS.js","DownloadIPFS.js","BetForm.js","BuyersBoard.js","MarketPlace.js","OwnerAssets.js","App.js","index.js"],"names":["EthCrypto","require","getPublicKeyViaMetamask","_x","_getPublicKeyViaMetamask","apply","this","arguments","_callee","address","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","reject","window","ethereum","sendAsync","jsonrpc","method","params","error","encryptionpublickey","result","stop","metamaskEncryptData","_x2","_x3","_metamaskEncryptData","_callee2","message","pubKey","encrypted","encryptedMessage","_context2","console","log","encryptWithPublicKey","sent","cipher","stringify","metamaskEncrypt","_x4","_x5","_metamaskEncrypt","_callee3","enc","_context3","encrypt","data","web3","utils","toHex","JSON","handle","promise","then","undefined","catch","decryptPrivateKey","_x6","_x7","_decryptPrivateKey","_callee4","account","_yield$handle","_yield$handle2","decryptedMessage","decryptErr","_context4","concat","request","Object","slicedToArray","decryptUriFile","_x8","_x9","_decryptUriFile","_callee5","privateKey","parsedEncInfo","_context5","parse","decryptWithPrivateKey","getAccount","_getAccount","selectedAddress","encryptData","_encryptData","publicKey","pk","SetDecrypt","props","drizzle","drizzleState","encData","encPrivateKey","_useState","useState","_useState2","encryptedInfo","setEncryptedInfo","_useState3","contracts","Coupoken","_useState4","decryptedPK","setDecryptedPK","_useState5","_useState6","decryptedInfo","setDecryptedInfo","_useState7","_useState8","decMessage","setDecryptMessage","_useState9","_useState10","decPk","setDecPk","_useForm","useForm","errors","register","handleSubmit","watch","useEffect","_ref","asyncToGenerator","mark","dm","accounts","getDecryptMessage","_ref2","react_default","createElement","className","htmlFor","name","type","onChange","event","file","target","files","fileReader","FileReader","readAsText","onload","fileAsText","fileToDecrypt","onClick","MintNFT","stackId","hashMint","setHashMint","countTokens","setCountTokens","ipfsLink","encryptedKey","contract","EncNft","_countOfTokens","numResult","methods","totalSupply","call","from","countOfTokens","onSubmit","stringUri","resMint","setUri","mint","send","transactionHash","approveNft","res","approve","MarketPlace","gasPrice","Math","pow","gasLimit","getTxStatus","uri","objectSpread2","image","transactions","txHash","transactionStack","status","placeholder","ref","required","maxLength","description","value","client","create","UploadIPFS","fileUrl","updateFileUrl","clearData","setClearData","encryptedData","setEncryptedData","encryptedPrivateKey","setEncryptedPrivateKey","_useState11","_useState12","setCustomerAddress","_useState13","_useState14","cid","setCid","_useState15","_useState16","textFromIpfsFIle","setTextFromIpfsFIle","_useState17","_useState18","newPrivateKey","setNewPrivateKey","_useState19","_useState20","newPublicKey","setNewPublicKey","_useState21","_useState22","newAddress","setNewAddress","_useState23","_useState24","creatorAddress","setCreatorAddress","_onChange","_callee6","e","added","url","_context6","add","path","t0","encryptPrivateKeyForNFTFile","setValue","addressToEncrypt","dataToEncrypt","_ref4","sendEncryptInfoToIPFS","getInfoFromIPFS","_ref5","string","cuttedString","object","get","timeout","TextDecoder","decode","Data","slice","generateKeys","newIdentity","createIdentity","fileToEncrypt","src_SetDecrypt","href","src_MintNFT","DownloadIPFS","BetForm","idToken","setFocus","bnValue","BigNumber","parseUnits","valueBet","makeBet","goalPurchase","disabled","tokenId","step","BuyersBoard","setTotalAmountNft","nftBuyersDetails","setNftBuyersDetails","nftOwnersDetails","contractMarket","buyerIndex","setBuyerIndex","getBuyers","tokensArray","index","push","idNft","owner","map","_ref3","token","countBuyers","_loop","_index","ownerOf","tokenURI","getCountBuyers","buyersMakeBet","buyersBoard","toConsumableArray","buyerAddress","buyerPubKey","buyerBet","delegateYield","t1","sellNft","buyer","ownerOfTokenInfo","lastEncryptedPrivateKey","decryptedPrivateKey","sellInfo","getTokenInfoLastOwner","acceptRateAndTransferToken","BuyersOfToken","Table","striped","bordered","hover","filter","item","formatEther","approved","getSellerActions","Fragment","Accordion","defaultActiveKey","Item","eventKey","Header","Body","totalAmountNft","setNftOwnersDetails","setPubKey","chosenTokenId","setChosenTokenId","showBetForm","setShowBetForm","getCoupons","transferNFT","moveTokenForSell","approveNFT","ownersArray","isTokenForSell","ownerAddress","approvedAddress","getApproved","length","src_BetForm","src_BuyersBoard","OwnerAssets","sellerSoldAmounts","setSellerSoldAmounts","getIdsByAddress","all","id","soldBalance","currentOwnerInfo","uriInfo","parsedUri","getOwnerInfo","balance","currentOwner","withdrawSum","resultWithdraw","sellerWithdrawSum","decryptInfo","cutTextFromIpfsFIle","dm1","i","key","add1","add2","compareAddresses","App","loading","drizzleReadinessState","setDrizzleReadinessState","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","align","rel","react_router_dom","src","to","react_router","exact","src_MarketPlace","src_OwnerAssets","src_UploadIPFS","src_DownloadIPFS","Web3","currentProvider","options","contractName","web3Contract","eth","Contract","abi","block","customProvider","polls","Drizzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dea3a5a1.chunk.js","sourcesContent":["import { encrypt } from 'eth-sig-util'\nimport web3 from 'web3'\nvar EthCrypto = require('eth-crypto');\nexport async function getPublicKeyViaMetamask(address) {\n    return new Promise((resolve, reject) => {\n        window.ethereum.sendAsync(\n            {\n                jsonrpc: '2.0',\n                method: 'eth_getEncryptionPublicKey',\n                params: [address],\n                // from: address,\n            },\n            function (error, encryptionpublickey) {\n                if (!error) {\n                    resolve(encryptionpublickey.result)\n                } else {\n                    reject(error)\n                }\n            }\n        )\n    })\n}\n\nexport async function metamaskEncryptData(message, pubKey) {\n    console.log(message)\n    const encrypted = await EthCrypto.encryptWithPublicKey(\n        pubKey, // publicKey\n        message // message\n    );\n    console.log(\"🚀 ~ file: metamask.js ~ line 30 ~ metamaskEncrypt ~ encrypted\", encrypted)\n\n    const encryptedMessage = EthCrypto.cipher.stringify(\n        encrypted\n    )\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\nexport async function metamaskEncrypt(message, pubKey) {\n    console.log(\"🚀 ~ file: metamask.js ~ line 41 ~ metamaskEncrypt ~ pubKey\", pubKey)\n    console.log(message)\n\n    const enc = encrypt(\n        pubKey,\n        { data: message },\n        'x25519-xsalsa20-poly1305'\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 31 ~ metamaskEncrypt ~ enc\", enc)\n    const encryptedMessage = web3.utils.toHex(\n        JSON.stringify(\n            enc\n        )\n    )\n    console.log(\"🚀 ~ file: metamask.js ~ line 54 ~ metamaskEncrypt ~ encryptedMessage\", encryptedMessage)\n    // const enc = await ethcrypto.encryptWithPublicKey(pubKey, message)\n    // console.log(\"🚀 ~ file: metamask.js ~ line 36 ~ metamaskEncrypt ~ enc\", enc)\n    // const encryptedMessage = ethcrypto.cipher.stringify(enc);\n    return encryptedMessage\n}\n\nvar handle = (promise) => {\n    return promise\n        .then(data => ([data, undefined]))\n        .catch(error => Promise.resolve([undefined, error]));\n}\n\nexport async function decryptPrivateKey(encryptedMessage, account) {\n    console.log(`encryptedMessage: ${encryptedMessage}`)\n    const [decryptedMessage, decryptErr] = await handle(window.ethereum.request({\n        method: 'eth_decrypt',\n        params: [encryptedMessage, account],\n    }));\n\n    if (decryptErr) { console.error(decryptErr.message) }\n    else {\n        console.log(`decryptedMessage: ${decryptedMessage}`)\n        return decryptedMessage\n    }\n}\n\nexport async function decryptUriFile(encryptedMessage, privateKey) {\n    console.log(`encryptedMessage: ${encryptedMessage}`)\n    const parsedEncInfo = EthCrypto.cipher.parse(encryptedMessage)\n    const message = await EthCrypto.decryptWithPrivateKey(\n        privateKey, parsedEncInfo)\n    console.log(\"🚀 ~ file: metamask.js ~ line 85 ~ decryptMessage ~ message\", message)\n    return message;\n}\n","import EthCrypto from 'eth-crypto';\nimport { metamaskEncrypt, getPublicKeyViaMetamask } from './metamask';\n\nexport async function getAccount() {\n    return await window.ethereum.selectedAddress\n}\n\nexport function getNewAccount() {\n    return EthCrypto.createIdentity();\n}\n\n\nexport async function encryptData(publicKey, data) {\n    const pk = await getPublicKeyViaMetamask(publicKey)\n    console.log(\"🚀 ~ file: cypher.js ~ line 19 ~ encrypt ~ pk\", pk)\n    return await metamaskEncrypt(data, pk)\n}\n\nexport async function decrypt(cMessage) {\n    const cyperObj = EthCrypto.cipher.parse(cMessage);\n    return await EthCrypto.decryptWithPrivateKey(\n        'bdb335a3c6dceda42eb92e6479f326d68d86bdf5237c41ff1eedf961813d2eb4', // privateKey\n        cyperObj // encrypted-data\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst SetDecrypt = props => {\n\n    const { drizzle, drizzleState, encData, encPrivateKey } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const [decPk, setDecPk] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        console.log('decPk :>> ', decPk);\n        console.log('encPrivateKey :>> ', encPrivateKey);\n        if (decPk) {\n            async function getDecryptMessage() {\n                if (encPrivateKey !== '') {\n                    const dm = await decryptPrivateKey(encPrivateKey, drizzleState.accounts[0]);\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decPk, encPrivateKey]);\n\n    useEffect(() => {\n        console.log('decryptedPK && encData :>> ', decryptedPK, encData);\n        if (decryptedPK && encData) {\n            async function getDecryptMessage() { \n                    const dm = await decryptUriFile(encData, decryptedPK);\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedInfo(dm) \n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decryptedPK, encData]);\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setEncryptedInfo(fileAsText);\n        };\n    };\n\n\n\n    return (\n        <section>\n            <h2>Download a file from IPFS</h2>\n            <div>{encryptedInfo}</div>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    <div\n                        name=\"decrypredData\"\n                        className=\"u-full-width\"\n\n                    >{decryptedInfo}</div>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"u-full-width\">\n                    <label htmlFor=\"mURI\">Read the file and decrypt</label>\n                    <input\n                        type=\"file\"\n                        name=\"fileToDecrypt\"\n                        className=\"u-full-width\"\n                        onChange={onFileChange}\n                    />\n                    {errors.fileToDecrypt && <span>Use a valid input</span>}\n                </div>\n            </div>\n            <button onClick={() => setDecPk(!decPk)} >DECRYPT PK</button>\n            <button onClick={() => setDecryptMessage(!decMessage)} >DECRYPT FILE</button>\n\n<h2>Decrypted PK</h2>\n<div>{decryptedPK}</div>\n<h2>Decrypted file info</h2>\n<div>{decryptedInfo}</div>\n        </section>\n    );\n};\nexport default SetDecrypt;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst MintNFT = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const [countTokens, setCountTokens] = useState(0);\n    const { drizzle, drizzleState, ipfsLink, encryptedKey } = props;\n    const contract = drizzle.contracts.EncNft;\n\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .totalSupply()\n                .call({ from: drizzleState.accounts[0] });\n                console.log('result !== countTokens :>> ', result, countTokens);\n            if (+result !== countTokens) {\n                const numResult = +result \n                console.log(\"🚀 ~ file: MintNFT.js ~ line 28 ~ countOfTokens ~ numResult\", numResult)\n                setCountTokens(numResult)\n                console.log('countTokens :>> ', countTokens);\n            }\n            \n\n        }\n        countOfTokens()\n    }, [])\n    const onSubmit = async (data) => {\n\n        const stringUri = setUri(data);\n        console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.mint(drizzleState.accounts[0], countTokens + 1, stringUri, encryptedKey).send({ from: drizzleState.accounts[0] })\n        if (resMint) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 21 ~ onSubmit ~ resMint\", resMint)\n            setHashMint(resMint.transactionHash)\n        }\n    };\n    const approveNft = async () => {\n        console.log('countTokens :>> ', countTokens);\n        // countTokens ???\n        const res = await contract.methods.approve(drizzle.contracts.MarketPlace.address, countTokens).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        if (res) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 45 ~ approveNft ~ res\", res)\n            getTxStatus()\n        }\n    }\n        const setUri = data => {\n            const uri = { ...data, image: ipfsLink }\n            return JSON.stringify(uri)\n        }; \n\n        const getTxStatus = () => {\n            // get the transaction states from the drizzle state\n            const { transactions, transactionStack } = drizzleState;\n\n            // get the transaction hash using our saved `stackId`\n            const txHash = transactionStack[stackId];\n\n            // if transaction hash does not exist, don't display anything\n            if (!txHash) return null;\n\n            // otherwise, return the transaction status\n            return `Transaction status: ${transactions[txHash] &&\n                transactions[txHash].status}`;\n        };\n\n        return (\n            <section>\n                <div>Mint new NFT to owner</div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Name</label>\n                            <input\n                                name=\"name\"\n                                className=\"u-full-width\"\n                                placeholder=\"Test NFT\"\n                                ref={register({ required: true, maxLength: 42 })}\n                            />\n                            {errors.name && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mNft\">Description of the NFT</label>\n                            <input\n                                name=\"description\"\n                                className=\"u-full-width\"\n                                placeholder=\"string data\"\n                                ref={register({ required: false, maxLength: 8000 })}\n                            />\n                            {errors.description && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n\n                    <input className=\"button-primary\" type=\"submit\" value=\"Mint\" />\n                </form>\n                <div>\n                    Hash mint transaction:  {hashMint}\n                </div>\n                {/* <TransferNFT drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    ipfsLink={ipfsLink} /> */}\n                <button onClick={() => approveNft()}>Approve to MarketPlace contract</button>\n            </section>\n        );\n    };\n\n    export default MintNFT;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\"; \nimport { encrypt, encryptData, getAccount, getNewAccount } from \"./cypher\";\nimport SetDecrypt from \"./SetDecrypt\";\nimport { create } from 'ipfs-http-client'\nimport { metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\nimport MintNFT from \"./MintNFT\"; \nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\n\nconst UploadIPFS = props => {\n    const [fileUrl, updateFileUrl] = useState(``)\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [encryptedData, setEncryptedData] = useState('');\n    const [encryptedPrivateKey, setEncryptedPrivateKey] = useState('');\n    const [customerAddress, setCustomerAddress] = useState('');\n    const { drizzle, drizzleState } = props;\n    const [cid, setCid] = useState('')\n    const [textFromIpfsFIle, setTextFromIpfsFIle] = useState('')\n    const [newPrivateKey, setNewPrivateKey] = useState('')\n    const [newPublicKey, setNewPublicKey] = useState('')\n    const [newAddress, setNewAddress] = useState('')\n    const [creatorAddress, setCreatorAddress] = useState('')\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    async function onChange(e) {\n        const file = e.target.files[0]\n        try {\n            const added = await client.add(file)\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            updateFileUrl(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n\n\n    const onSubmit = data => {\n        setValue(data);\n    };\n\n    // const onSubmitMint = async (data) => {\n    //     console.log('data :>> ', data);\n        \n\n    // }\n\n    const encryptPrivateKeyForNFTFile = async () => {\n        \n        const encData = await encryptData(creatorAddress, newPrivateKey )\n        if (encData !== '') {\n            setEncryptedPrivateKey(encData)\n        }\n\n    };\n\n    const setValue = async value => {\n        console.log('value.address-to-encrypt :>> ', value.addressToEncrypt, value.dataToEncrypt);\n        setCustomerAddress(value.addressToEncrypt)\n        // const encData = await encryptData(value.addressToEncrypt, value.dataToEncrypt || clearData || 'HELLO')\n        // if (encData !== '') {\n        //     setEncryptedData(encData)\n        // }\n        console.log('newPublicKey :>> ', newPublicKey);\n        console.log('clearData :>> ', clearData);\n\n        const encData = await metamaskEncryptData(value.dataToEncrypt || clearData, newPublicKey)\n        if (encData !== '') {\n            setEncryptedData(encData)\n        }\n    };\n\n    const downloadToFile = (content, filename, contentType) => {\n        const a = document.createElement('a');\n        const file = new Blob([content], { type: contentType });\n\n        a.href = URL.createObjectURL(file);\n        a.download = filename;\n        a.click();\n\n        URL.revokeObjectURL(a.href);\n    };\n\n    useEffect(async () => {\n        const address = await getAccount()\n        if(address) {\n            setCreatorAddress(address)\n        }\n        \n    }, [getAccount, setCreatorAddress ])\n\n    useEffect(() => {\n        if (encryptedData && creatorAddress) {\n            async function sendEncryptInfoToIPFS() {\n                // downloadToFile(encryptedData, `${customerAddress}.txt`, 'text/plain');\n                const added = await client.add(encryptedData)\n                setCid(added.path)\n                const url = `https://ipfs.infura.io/ipfs/${added.path}`\n                updateFileUrl(url)\n            }\n\n            sendEncryptInfoToIPFS();\n        }\n\n\n    }, [encryptedData, creatorAddress])\n\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setClearData(fileAsText);\n        };\n    };\n\n    const getInfoFromIPFS = async () => {\n        if (fileUrl) {\n            const result = await client.object.get(cid, { timeout: 30000 })\n            const string = new TextDecoder().decode(result.Data).slice(0, -3);\n            const cuttedString = string.slice(5)\n            setTextFromIpfsFIle(cuttedString)\n        }\n    }\n\n    const generateKeys = () => {\n        const newIdentity = getNewAccount()\n        setNewPrivateKey(newIdentity.privateKey)\n        setNewPublicKey(newIdentity.publicKey)\n        setNewAddress(newIdentity.address)\n    }\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n    return (\n        <div className=\"App\">\n            <h1>IPFS Example</h1>\n            <section>\n                <h2>Encryption private key via owner public key</h2>\n\n                <button onClick={()=>generateKeys()}>Generate keys for encryption a file</button>\n                <div>Private, public, address</div>\n                <div>pk: {newPrivateKey}</div>\n                <div>pubkey: {newPublicKey}</div>\n                <div>add: {newAddress}</div>\n                <div>Creator address{creatorAddress}</div>\n\n                <button onClick={()=>encryptPrivateKeyForNFTFile()}>Encrypt private key via new owner public key</button>\n                <div>Encrypted private key</div>\n                <div>{encryptedPrivateKey}</div>\n                <br></br>\n<h2>Encrypt a file via generated public key for NFT URI </h2>\n\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mURI\">Data for encryption</label>\n                            <input\n                                name=\"dataToEncrypt\"\n                                className=\"u-full-width\"\n                                placeholder=\"string data\"\n                                ref={register({ required: false, maxLength: 8000 })}\n                            />\n                            {errors.dataToEncrypt && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"u-full-width\">\n                            <label htmlFor=\"mURI\">Upload</label>\n                            <input\n                                type=\"file\"\n                                name=\"fileToEncrypt\"\n                                className=\"u-full-width\"\n                                onChange={onFileChange}\n                            />\n                            {errors.fileToEncrypt && <span>Use a valid input</span>}\n                        </div>\n                    </div>\n                    <input className=\"button-primary\" type=\"submit\" value=\"Submit\" />\n                </form>\n               {/*  <div>{getTxStatus()}</div> */}\n                {/* <UriBlock /> */}\n                <div>{encryptedData}</div>\n\n               \n                <SetDecrypt\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    encData={encryptedData}\n                    encPrivateKey={encryptedPrivateKey}\n                />\n            </section>\n            <input\n                type=\"file\"\n                onChange={onChange}\n            />\n            <a href={fileUrl}>{fileUrl}</a>\n            <button onClick={() => getInfoFromIPFS()}>Get Info from IPFS</button>\n            <div>{textFromIpfsFIle}</div>\n            <MintNFT \n            drizzle={drizzle}\n            drizzleState={drizzleState}\n            ipfsLink={fileUrl}\n            encryptedKey={encryptedPrivateKey}\n            />\n            \n        </div>\n    );\n};\n\nexport default UploadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {  decryptPrivateKey, decryptUriFile } from \"./metamask\";\n\nconst DownloadIPFS = props => {\n\n    const { drizzle, drizzleState, encData } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        if (decMessage) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptPrivateKey(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedPK(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage]);\n\n    useEffect(() => {\n        if (decryptedInfo) {\n            async function getDecryptMessage() {\n                if (encryptedInfo !== '') {\n                    const dm = await decryptUriFile(encryptedInfo, '0x4D1E260E63e9331C4552991874dA4FBF4Aa6A3df');\n                    console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n                    setDecryptedInfo(dm)\n                }\n\n            }\n            getDecryptMessage()\n\n        }\n    }, [decMessage, decryptedInfo]);\n\n    const onFileChange = (event) => {\n        let file = event.target.files[0];\n\n        let fileReader = new FileReader();\n        fileReader.readAsText(file);\n\n        fileReader.onload = (event) => {\n            let fileAsText = event.target.result;\n            setEncryptedInfo(fileAsText);\n        };\n    };\n\n\n\n    return (\n        <section>\n            <h2>Download a file from IPFS</h2>\n            <div>{encryptedInfo}</div>\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    <label htmlFor=\"decrypredData\">Encrypted Data</label>\n                    <div\n                        name=\"decrypredData\"\n                        className=\"u-full-width\"\n\n                    >{decryptedInfo}</div>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"u-full-width\">\n                    <label htmlFor=\"mURI\">Read the file and decrypt</label>\n                    <input\n                        type=\"file\"\n                        name=\"fileToDecrypt\"\n                        className=\"u-full-width\"\n                        onChange={onFileChange}\n                    />\n                    {errors.fileToDecrypt && <span>Use a valid input</span>}\n                </div>\n            </div>\n            <button onClick={() => setDecryptMessage(!decMessage)} >DECRYPT</button>\n\n<h2>Decrypted PK</h2>\n<div>{decryptedPK}</div>\n<h2>Decrypted file info</h2>\n<div>{decryptedInfo}</div>\n        </section>\n    );\n};\n\nexport default DownloadIPFS;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm, useFormContext } from \"react-hook-form\";\nimport { BigNumber, ethers, utils } from 'ethers' \n\nconst BetForm = props => {\n    const [stackId, setStackID] = useState(null);\n    const [clearData, setClearData] = useState('');\n    const [hashMint, setHashMint] = useState('');\n    const [pubKey, setPubKey] = useState('');\n    const { drizzle, drizzleState, pk, address, idToken  } = props;\n    const contract = drizzle.contracts.MarketPlace;\n\n\n    const {register, handleSubmit, watch, errors, setFocus } = useForm();\n    const onSubmit = async (data) => {\n    console.log(\"🚀 ~ file: BetForm.js ~ line 19 ~ onSubmit ~ data\", data)\n        // const stringUri = setUri(data);\n        const bnValue  = BigNumber.from(utils.parseUnits(data.valueBet, 18))\n        console.log(\"🚀 ~ file: BetForm.js ~ line 24 ~ onSubmit ~ bnValue\", bnValue)\n        // console.log(\"🚀 ~ file: MintNFT.js ~ line 19 ~ onSubmit ~ stringUri\", stringUri)\n        const resMint = await contract.methods.makeBet(idToken, pk, drizzleState.accounts[0], data.goalPurchase).send({ from: drizzleState.accounts[0], \n            value: bnValue, gasPrice: 10 * 10 ** 10,\n            gasLimit: 400000})\n        if (resMint) {\n            console.log(\"🚀 ~ file: MintNFT.js ~ line 21 ~ onSubmit ~ resMint\", resMint)\n            setHashMint(resMint.transactionHash)\n        }\n    };\n\n    const setUri = data => {\n        // const uri = { ...data, image: ipfsLink }\n        // return JSON.stringify(uri)\n    };\n\n    useEffect(() => {\n        // setFocus(\"firstName\");\n      }, [setFocus]);\n    useEffect(() => {\n        // const getName = async () => {\n        //     const name = await contract.methods.name.call()\n        //     if(name) {\n        //         setEncryptedData(name)\n        //     }\n        // }\n        // getName()\n\n    }, [contract])\n\n\n\n    const getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] &&\n            transactions[txHash].status}`;\n    };\n\n    return (\n        <section>\n            <div>Bet params</div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"mNft\">Id token</label>\n                        <input\n                            name=\"tokenId\"\n                            className=\"u-full-width\"\n                            value={idToken}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.tokenId && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"pk\">Public key of your account</label>\n                        <input\n                            name=\"pk\"\n                            className=\"u-full-width\"\n                            value={pk}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.pk && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"address\">Your account address</label>\n                        <input\n                            name=\"address\"\n                            className=\"u-full-width\"\n                            value={address}\n                            disabled={true}\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.address && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"valueBet\">Your bet</label>\n                        <input\n                            name=\"valueBet\"                            \n                            className=\"u-full-width\"\n                            type=\"number\"\n                            step=\"0.000000000000001\" \n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.valueBet && <span>Use a valid input</span>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"u-full-width\">\n                        <label htmlFor=\"goalPurchase\">Why do I need it? </label>\n                        <input\n                            name=\"goalPurchase\"\n                            className=\"u-full-width\"\n                            ref={register({ required: true, maxLength: 82 })}\n                        />\n                        {errors.goalPurchase && <span>Use a valid input</span>}\n                    </div>\n                </div>\n\n                <input className=\"button-primary\" type=\"submit\" value=\"Make Bet\" />\n            </form>\n            <div>\n                Hash mint transaction:  {hashMint}\n            </div>             \n        </section>\n    );\n};\n\nexport default BetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Accordion } from 'react-bootstrap';\nimport { decryptPrivateKey, getPublicKeyViaMetamask, metamaskEncrypt, metamaskEncryptData } from \"./metamask\";\nimport BetForm from \"./BetForm\";\nimport { BigNumber, ethers, utils } from 'ethers'\nimport { encryptData } from \"./cypher\";\n\nconst BuyersBoard = props => {\n    const [dataKey, setDataKey] = useState(null);\n    const [totalAmountNft, setTotalAmountNft] = useState(0);\n    const [nftBuyersDetails, setNftBuyersDetails] = useState([]);\n    const [publicKey, setPubKey] = useState('');\n    const [chosenTokenId, setChosenTokenId] = useState(0);\n    const { drizzle, drizzleState, nftOwnersDetails } = props;\n    const contract = drizzle.contracts.EncNft;\n    const contractMarket = drizzle.contracts.MarketPlace;\n    const [showBetForm, setShowBetForm] = useState(false);\n    const [buyerIndex, setBuyerIndex] = useState(-1);\n    useEffect(() => {\n        getBuyers();\n    }, []);\n\n\n    const makeBet = async (owner) => {\n        setChosenTokenId(owner.idNft)\n        const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n        console.log(\"🚀 ~ file: BuyersBoard.js ~ line 29 ~ makeBet ~ pk\", pk)\n        if (pk) {\n            setPubKey(pk)\n            setShowBetForm(true)\n        }\n    }\n    const getBuyers = async () => {\n        let result = await contract.methods\n            .totalSupply()\n            .call({ from: drizzleState.accounts[0] });\n        if (result > 0) {\n            setTotalAmountNft(result)\n            const tokensArray = []\n            for (let index = 1; index <= result; index++) {\n                tokensArray.push({ idNft: index, owner: '', name: '', description: '', image: '' })\n            }\n            console.log('tokensArray   :>> ', tokensArray);\n            tokensArray.map(async token => {\n                const ownerAddress = await contract.methods.ownerOf(token.idNft).call({ from: drizzleState.accounts[0] });\n                const tokenUri = await contract.methods.tokenURI(token.idNft).call({ from: drizzleState.accounts[0] });\n\n\n\n                // if (tokenUri && ownerAddress) {\n                //     token.owner = ownerAddress\n                //     console.log(\"🚀 ~ file: BuyersBoard.js ~ line 56 ~ getBuyers ~ tokenUri\", tokenUri)\n                //     const uri = JSON.parse(tokenUri);\n                //     token.name = uri.name;\n                //     token.description = uri.description;\n                //     token.image = uri.image;\n                //     console.log('token :>> ', token);\n                //     nftOwnersDetails.length > 0 ? setNftOwnersDetails(nftOwnersDetails => [...nftOwnersDetails, token]) :\n                //         setNftOwnersDetails([token])\n                //     console.log('####nftOwnersDetails :>> ', nftOwnersDetails);\n                // }\n                try {\n                    const countBuyers = await contractMarket.methods.getCountBuyers(token.idNft).call({ from: drizzleState.accounts[0] })\n\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 66 ~ getBuyers ~ countBuyers\", countBuyers)\n                    if (countBuyers > 0) {\n                        for (let index = 0; index < countBuyers; index++) {\n                            const buyersMakeBet = await contractMarket.methods.buyersBoard(token.idNft, index).call({ from: drizzleState.accounts[0] });\n                            if (buyersMakeBet) {\n                                console.log(\"🚀 ~ file: BuyersBoard.js ~ line 55 ~ getBuyers ~ buyersMakeBet\", buyersMakeBet)\n                                setNftBuyersDetails(nftBuyersDetails => [...nftBuyersDetails, {idToken: token.idNft, buyerAddress: buyersMakeBet[0], buyerPubKey: buyersMakeBet[1],\n                                     buyerBet: buyersMakeBet[2], goalPurchase: buyersMakeBet[3] }])\n                                console.log('nftBuyersDetails  :>> ', nftBuyersDetails);\n                            }\n                            \n                        }\n                      \n                    }\n                } catch (error) {\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 72 ~ getBuyers ~ error\", error)\n\n                }\n\n            })\n        }\n    };\n\n    const sellNft = async (buyer, token) => {\n    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 85 ~ sellNft ~ buyer\", buyer)\n        if (token.owner === drizzleState.accounts[0]) {\n            // enc-decrypt pryvateKey - enc via buyerPubKey\n            const ownerOfTokenInfo = await contract.methods.getTokenInfoLastOwner(token.idNft).call({ from: drizzleState.accounts[0] });\n            console.log(\"🚀 ~ file: BuyersBoard.js ~ line 78 ~ sellNft ~ ownerOfTokenInfo\", ownerOfTokenInfo)\n            const lastEncryptedPrivateKey = ownerOfTokenInfo.encData\n            console.log(\"🚀 ~ file: BuyersBoard.js ~ line 79 ~ sellNft ~ lastEncryptedPrivateKey\", lastEncryptedPrivateKey)\n            const decryptedPrivateKey = await decryptPrivateKey(lastEncryptedPrivateKey, drizzleState.accounts[0])\n            console.log(\"🚀 ~ file: BuyersBoard.js ~ line 81 ~ sellNft ~ encryptedPrivateKey\", decryptedPrivateKey)\n            console.log('buyer.buyerPubKey  :>> ', buyer.buyerPubKey, buyer);\n            if (decryptedPrivateKey) {\n                const encData = await metamaskEncrypt(  decryptedPrivateKey, buyer.buyerPubKey)\n                if (encData !== '') {\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 85 ~ sellNft ~ encData\", encData)\n                    const sellInfo = await contractMarket.methods.acceptRateAndTransferToken(token.idNft, buyer.buyerAddress, encData).send({ from: drizzleState.accounts[0], gasPrice: 10 * 10 ** 10, gasLimit: 600000 })\n                    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 65 ~ sellNft ~ sellInfo\", sellInfo)\n                }\n            }\n\n\n        }\n    }\n\nconst getSellerActions = (buyer, token) => { \n    return (\n        token.owner === drizzleState.accounts[0] && token.approved ?  \n        token.owner === drizzleState.accounts[0] && !token.approved ? \n        'Need to approve to sell':   \n        <button onClick={() => sellNft(buyer, token)}>Sell NFT</button > :\n        \n        ''\n    )\n}\n    const BuyersOfToken = (token) => {\n        // own address make color red\n\n        return (< Table striped bordered hover >\n            <thead >\n                <th > Buyer address </th>\n                <th > Buyer rate </th>\n                <th > Why do I need it </th>\n                <th > Action </th>\n            </thead >\n            <tbody > {\n                nftBuyersDetails.filter(item => item.idToken === token.idNft).map(buyer => {\n                    return (buyer.buyerBet > 0 && < tr >\n                        <th className={buyer.buyerAddress === drizzleState.accounts[0]? 'owner-address': null}> {buyer.buyerAddress} </th> <th>{utils.formatEther(buyer.buyerBet)}ETH</th>\n                        <th> {buyer.goalPurchase} </th>\n                        <th>{getSellerActions(buyer, token)} </th>\n                    </tr >)\n                })\n            } </tbody>\n        </Table>)\n    }\n\n\n\n    return (\n        // if it exists, then we display its value\n        <>\n            <h2 > Buyers Board </h2>\n            <Accordion defaultActiveKey=\"0\" > {\n                nftOwnersDetails.map((token, index) =>\n                    <Accordion.Item eventKey={index} >\n                        <Accordion.Header onClick={() => setBuyerIndex(index)}> ID NFT: {token.idNft} {token.name} </Accordion.Header>\n                        <Accordion.Body className={buyerIndex === index ? \"active\" : \"inactive\"} >\n                            <div > {token.description} </div> {BuyersOfToken(token)}\n                        </Accordion.Body> </Accordion.Item >\n                )\n            }\n\n            </Accordion>\n        </>\n    );\n};\n\nexport default BuyersBoard;","import React, { useState, useEffect } from \"react\";\nimport { Table } from 'react-bootstrap'; \nimport * as _ from \"lodash\"; \nimport BuyersBoard from \"./BuyersBoard\";\nimport BetForm from \"./BetForm\";\nimport { getPublicKeyViaMetamask } from \"./metamask\";\n\nconst MarketPlace = props => {\n  const [dataKey, setDataKey] = useState(null);\n  const [totalAmountNft, setTotalAmountNft] = useState(0);\n  const [nftOwnersDetails, setNftOwnersDetails] = useState([]);\n  const { drizzle, drizzleState } = props;\n  const contract = drizzle.contracts.EncNft;\n  const contractMarket = drizzle.contracts.MarketPlace;\n\n  const [publicKey, setPubKey] = useState('');\n  const [chosenTokenId, setChosenTokenId] = useState(0);\n  const [showBetForm, setShowBetForm] = useState(false);\n  useEffect(() => {\n    getCoupons();\n  }, []);\n\n  const makeBet = async (owner) => {\n    setChosenTokenId(owner.idNft)\n    const pk = await getPublicKeyViaMetamask(drizzleState.accounts[0])\n    console.log(\"🚀 ~ file: BuyersBoard.js ~ line 29 ~ makeBet ~ pk\", pk)\n    if (pk) {\n      setPubKey(pk)\n      setShowBetForm(true)\n    }\n  }\n\n  const transferNFT = async (owner) => {\n    let result = await contractMarket.methods.moveTokenForSell(owner.idNft, `Advertise of token ${owner.idNft}`).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 30 ~ transferNFT ~ result\", result)\n\n\n  }\n\n  const approveNFT = async (owner) => {\n    let result = await contract.methods.approve(contractMarket.address, owner.idNft).send({\n      from: drizzleState.accounts[0],\n      gasLimit: 150000\n    })\n    console.log(\"🚀 ~ file: MarketPlace.js ~ line 51 ~ result ~ result\", result)\n  }\n\n  const getCoupons = async () => {\n    let result = await contract.methods\n      .totalSupply()\n      .call({ from: drizzleState.accounts[0] });\n    if (result > 0) {\n      setTotalAmountNft(result)\n      const ownersArray = []\n      for (let index = 1; index <= result; index++) {\n        ownersArray.push({ idNft: index, owner: '', approved: false, isTokenForSell: false })\n      }\n      ownersArray.map(async owner => {\n        const ownerAddress = await contract.methods.ownerOf(owner.idNft).call({ from: drizzleState.accounts[0] });\n        if (ownerAddress) {\n          owner.owner = ownerAddress\n          console.log(\"🚀 ~ file: MarketPlace.js ~ line 34 ~ getCoupons ~ ownerAddress\", ownerAddress)\n          const approvedAddress = await contract.methods.getApproved(owner.idNft).call({ from: drizzleState.accounts[0] });\n          console.log(\"🚀 ~ file: MarketPlace.js ~ line 59 ~ getCoupons ~ approvedAddress\", approvedAddress)\n          if(approvedAddress) {\n            console.log('contractMarket.address :>> ', contractMarket.address);\n            owner.approved = approvedAddress === contractMarket.address\n          }\n          \n\n          setNftOwnersDetails(nftOwnersDetails => [...nftOwnersDetails, owner])\n          console.log('# ###nftOwnersDetails :>> ', nftOwnersDetails);\n        }\n      })\n    }\n\n  };\n\n  useEffect(() => {\n    console.log('totalAmountNft  :>> ', totalAmountNft);\n    console.log('nftOwnersDetails.length :>> ', nftOwnersDetails.length);\n    console.log('nftOwnersDetails.length === totalAmountNft :>> ', nftOwnersDetails.length === totalAmountNft);\n    if (nftOwnersDetails.length == totalAmountNft) {\n      console.log(' @@@@totalAmountNft  :>> ', totalAmountNft);\n    }\n  }, [nftOwnersDetails.length])\n  const getTxStatus = () => {\n    const { transactions, transactionStack } = drizzleState;\n    // const txHash = transactionStack[stackId];\n    // if (!txHash) return null; \n    // return `Transaction status: ${transactions[txHash] &&\n    //   transactions[txHash].status}`;\n  };\n\n  return (\n    // if it exists, then we display its value\n    <section>\n      <h2>MarketPlace</h2>\n\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID NFT</th>\n            <th>Owner address</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {nftOwnersDetails.length == totalAmountNft ? nftOwnersDetails.map(owner =>\n            <tr>\n              <td>{owner.idNft}</td>\n              <td className={drizzleState.accounts[0] === owner.owner? 'owner-address' : null}> {owner.owner}</td>\n              <td>{drizzleState.accounts[0] === owner.owner ?\n              owner.approved ? \n                <button onClick={() => transferNFT(owner)}>Move NFT for sell place</button> :\n                <button onClick={() => approveNFT(owner)}>Approve NFT for sell</button> :\n                <button onClick={() => makeBet(owner)}> Make BET</button>}</td>\n            </tr>\n          ) : <></>}\n        </tbody>\n      </Table>\n\n      {<section>\n        {showBetForm && <BetForm\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          idToken={chosenTokenId}\n          pk={publicKey}\n          address={drizzleState.accounts[0]}\n        />}\n      </section>}\n      <BuyersBoard\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        nftOwnersDetails={nftOwnersDetails}\n      />\n    </section>\n  );\n};\n\nexport default MarketPlace;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Table } from 'react-bootstrap';\nimport { decryptPrivateKey, decryptUriFile } from \"./metamask\";\nimport { create } from 'ipfs-http-client'\nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\nconst OwnerAssets = props => {\n\n    const { drizzle, drizzleState, encData, encPrivateKey } = props;\n    const [encryptedInfo, setEncryptedInfo] = useState('');\n    const { Coupoken } = drizzleState.contracts;\n    const [decryptedPK, setDecryptedPK] = useState('');\n    const [decryptedInfo, setDecryptedInfo] = useState('');\n    const [decMessage, setDecryptMessage] = useState(false);\n    const [countTokens, setCountTokens] = useState(0);\n    const [countSellers, setCountSellers] = useState([]);\n    const [sellerSoldAmounts, setSellerSoldAmounts] = useState([]);\n    const [textFromIpfsFIle, setTextFromIpfsFIle] = useState('')\n    const [decPk, setDecPk] = useState(false);\n    const { register, handleSubmit, watch, errors } = useForm();\n    const contract = drizzle.contracts.EncNft;\n    const contractMarket = drizzle.contracts.MarketPlace;\n\n    useEffect(() => {\n        setEncryptedInfo(encData);\n    }, [encData]);\n\n    useEffect(() => {\n        async function countOfTokens() {\n            const result = await contract.methods\n                .getIdsByAddress(drizzleState.accounts[0])\n                .call({ from: drizzleState.accounts[0] });\n            console.log('result   ', result);\n            if (result && result.length) {\n\n                Promise.all(\n                    result.map(async (id) => {\n                        const soldBalance = await contractMarket.methods\n                            .getOwnerInfo(id, drizzleState.accounts[0])\n                            .call({ from: drizzleState.accounts[0] });\n\n                        const currentOwnerInfo = await contract.methods.getTokenInfoLastOwner(id).call({ from: drizzleState.accounts[0] });\n                        console.log(id, \"🚀 ~ file: OwnerAssets.js ~ line 42 ~ result.map ~  currentOwnerInfo\", currentOwnerInfo.encData, currentOwnerInfo.owner)\n\n                        const uriInfo = await contract.methods.tokenURI(id).call({ from: drizzleState.accounts[0] });\n\n                        const parsedUri = JSON.parse(uriInfo)\n                        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 48 ~ result.map ~ parsedUri\", parsedUri)\n                        setSellerSoldAmounts(sellerSoldAmounts => [...sellerSoldAmounts, { idToken: id, balance: soldBalance, currentOwner: currentOwnerInfo.owner, encPrivateKey: currentOwnerInfo.encData, ...parsedUri }])\n                    })\n                )\n            }\n            console.log('sellerSoldAmounts :>> ', sellerSoldAmounts);\n\n        }\n        countOfTokens()\n    }, [])\n\n    const getInfoFromIPFS = async (cid) => {\n        const result = await client.object.get(cid, { timeout: 30000 })\n        const string = new TextDecoder().decode(result.Data).slice(0, -3);\n        const cuttedString = string.slice(5)\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 66 ~ getInfoFromIPFS ~ cuttedString\", cuttedString)\n        return cuttedString\n    }\n\n    const withdrawSum = async (idToken) => {\n\n        const resultWithdraw = await contractMarket.methods.sellerWithdrawSum(idToken).send({\n            from: drizzleState.accounts[0],\n            gasPrice: 5 * 10 ** 10, gasLimit: 400000\n        })\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 57 ~ result ~ result\", resultWithdraw)\n    };\n\n    const decryptInfo = async (token) => {\n        console.log(\"🚀 ~ file: OwnerAssets.js ~ line 71 ~ decryptInfo ~ token\", token)\n        const dm = await decryptPrivateKey(token.encPrivateKey, drizzleState.accounts[0]);\n        console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm)\n        if (dm) {\n            console.log('token.image.slice(28) :>> ', token.image.slice(28));\n            const cutTextFromIpfsFIle = await getInfoFromIPFS(token.image.slice(28))\n            console.log(\"🚀 ~ file: OwnerAssets.js ~ line 86 ~ decryptInfo ~ cutTextFromIpfsFIle\", cutTextFromIpfsFIle)\n            if (cutTextFromIpfsFIle) {\n                const dm1 = await decryptUriFile(cutTextFromIpfsFIle, dm);\n                console.log(\"🚀 ~ file: SetDecrypt.js ~ line 20 ~ decryptMessage ~ decMessage\", dm1)\n                setDecryptedInfo(dm1)\n            }\n        }\n\n    }\n\n    const compareAddresses = (add1, add2) => {\n        console.log('add1 === add2 :>> ', add1, add2);\n        const res = add1 === add2\n        console.log(\"🚀 ~ file:  OwnerAssets.js ~ line 68 ~ compareAddresses ~ res\", res)\n        return res\n    }\n\n    return (\n        <section>\n            <h2>Your assets</h2>\n            <h3>Sold tokens </h3>\n\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>ID NFT</th>\n                        <th>Sum</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sellerSoldAmounts.map((token, i) =>\n                    (<tr key={i}>\n                        <td>{token.idToken}</td>\n                        <td>{token.balance}</td>\n                        <td>{token.balance > 0 ? <button onClick={() => withdrawSum(token.idToken)}>Withdraw</button> ?\n                            compareAddresses(token.currentOwner, drizzleState.accounts[0]) :\n                            'You sold the token' :\n                            <button onClick={() => decryptInfo(token)}>Decrypt the file to see it </button>\n                        }</td>\n                    </tr>)\n                    )\n                    }\n\n                </tbody>\n            </Table>\n\n            <div>Decrypted: {decryptedInfo}</div>\n        </section>\n    );\n};\nexport default OwnerAssets;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; \nimport UploadIPFS from \"./UploadIPFS\";\nimport DownloadIPFS from \"./DownloadIPFS\";\nimport MarketPlace from \"./MarketPlace\";\nimport OwnerAssets from \"./OwnerAssets\";\n\nconst App = props => {\n  const [drizzleReadinessState, setDrizzleReadinessState] = useState({\n    drizzleState: null,\n    loading: true\n  });\n  const { drizzle } = props;\n\n  useEffect(\n    () => {\n      const unsubscribe = drizzle.store.subscribe(() => {\n        // every time the store updates, grab the state from drizzle\n        const drizzleState = drizzle.store.getState();\n        // check to see if it's ready, if so, update local component state\n        if (drizzleState.drizzleStatus.initialized) {\n          setDrizzleReadinessState({\n            drizzleState: drizzleState,\n            loading: false\n          });\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    },\n    [drizzle.store, drizzleReadinessState]\n  ); \n  return drizzleReadinessState.loading ? (\n    <div align=\"center\">\n      <h4>\n        <a\n          href=\"https://metamask.io/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Please install Metamask extension and reload the page\n        </a>\n      </h4>\n      Set it on the rinkeby test network\n    </div>\n  ) : (\n    <Router>\n      <div>\n        <div className=\"title_logo\">\n          <img\n            src={\n              \"https://www.devoleum.com/47fa9787d0791533e573aed32e8147a9.png\"\n            }\n          />\n          <h1>Secret NFT</h1>\n        </div> \n        <br /> \n        <br />\n        <br />\n\n        <nav className=\"menu\">\n          <ul> \n            <li>\n              <Link to=\"/\">Market Place</Link>\n            </li>\n            <li>\n              <Link to=\"/assets\">Owner Assets</Link>\n            </li> \n            <li>\n              <Link to=\"/upload-ipfs\">Upload a file to IPFS</Link>\n            </li> \n          </ul>\n        </nav>\n\n        <hr />\n        <br />\n        <Switch>\n          <Route exact path=\"/\">\n            <MarketPlace\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/assets\">\n            <OwnerAssets\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n            </Route>           \n          <Route path=\"/upload-ipfs\">\n            <UploadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n          <Route path=\"/download-ipfs\">\n            <DownloadIPFS\n              drizzle={drizzle}\n              drizzleState={drizzleReadinessState.drizzleState}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Web3 from \"web3\";\n\n// import drizzle functions and contract artifact\nimport { Drizzle } from \"drizzle\";\nimport MarketPlace from \"./contracts/MarketPlace.json\";\nimport EncNft from \"./contracts/EncNft.json\"\nconst web3 = new Web3(window.web3.currentProvider);\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [\n    {\n      contractName: 'EncNft',\n      web3Contract: new web3.eth.Contract(EncNft.abi, '0x8C151518F690a51aC559eB2eA5A4A6e7AFA75F82') \n    },\n    {\n      contractName: 'MarketPlace',\n      web3Contract: new web3.eth.Contract(MarketPlace.abi, '0xD91f649c4301F9840D2442D3D412C8c014CB0F2A') \n    }    \n  ],\n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:8545\"),\n    customProvider: new Web3(window.web3.currentProvider),\n  },\n  // syncAlways:true,\n  polls: {\n    accounts: 2000,\n  },\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle}/>, document.getElementById('root'));\n"],"sourceRoot":""}